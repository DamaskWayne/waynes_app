const { VK, Keyboard } = require('vk-io')
const { Telegraf, Markup } = require('telegraf')
const sqlite3 = require('sqlite3').verbose()
const { setInterval } = require('timers')

const { createClient } = require('@supabase/supabase-js')

const SUPABASE_URL = 'https://uphcnbjehmckcjwxmhyh.supabase.co'
const SUPABASE_API_KEY =
	'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InVwaGNuYmplaG1ja2Nqd3htaHloIiwicm9sZSI6ImFub24iLCJpYXQiOjE3MzAyMjIyNTMsImV4cCI6MjA0NTc5ODI1M30.xy6I9NYw6WaUlX48LNYDSpOkoPYFRnVJBa_kQsD3faU'

const supabase = createClient(SUPABASE_URL, SUPABASE_API_KEY)

const vk = new VK({
	token:
		'vk1.a.Q9NkX2X7k4yvab34BKje68dL3oPj4PJASDuRlG6i2zmxz_QAyM3HK8D7vAM13nXeqyiInnEeC-RhjrM8-2S2KhiJ30WcnTKBoV928ugwl4VodYBiKChgq9UDwBULA6GsQ-cuPnzT8WYuy9AhaMnLtvXo0sUvjUkrsUeXLQa5BbB5nx1DyP4nJplvlQTx9OM1Ov2xn5VKxQ5o1_b1uGbJ4g',
})

const token = '7511515205:AAGgkdZPNdssJ2XrZl65Rzp190uIr3NqRAA'
const webAppUrl = 'https://waynes-app.web.app' // https://waynes-app.web.app
const bot = new Telegraf(token)

bot.command('start', ctx => {
	ctx.reply(
		'Hello! –ü—Ä–∏–≤–µ—Ç! üëã\n\n–í–ø–µ—Ä–≤—ã–µ –∑–¥–µ—Å—å –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å Telegram Premium, –Ø–Ω–¥–µ–∫—Å –ü–ª—é—Å –∏ –¥—Ä. –ø–æ–¥–ø–∏—Å–∫–∏ –∑–∞ WCoin! üéÅ\n\nüìñ –ù–∞—à –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –∫–∞–Ω–∞–ª: https://t.me/waynes_premium\n\nüí¨ –ù–∞—à —á–∞—Ç: https://t.me/+THCVJSKfbjY2MTgy\n\n/help ‚Äî —É–∑–Ω–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã\n\n',
		Markup.inlineKeyboard([
			Markup.button.webApp('Waynes App', `${webAppUrl}?ref=${ctx.payload}`),
		])
	)
})

bot.command('help', async ctx => {
	const telegramId = ctx.from.id // ID Telegram –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	await ctx.reply(
		`üë§ –í–∞—à ID Telegram: ${telegramId}\n\nüéÅ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /usepromo –ø—Ä–æ–º–æ–∫–æ–¥\n\n/start –æ—Ç–∫—Ä—ã—Ç—å –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.\n\n/faq –æ—Ç–≤–µ—Ç—ã –Ω–∞ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã`
	)
})

bot.command('faq', async ctx => {
	const telegramId = ctx.from.id // ID Telegram –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	await ctx.reply(
		`**–û —Å–µ—Ä–≤–∏—Å–µ WAYNES**\n‚≠ê ¬´WAYNES¬ª ‚Äî –ø—Ä–æ–µ–∫—Ç, –∫–æ—Ç–æ—Ä—ã–π —Ä–∞–∑–≤–∏–≤–∞–µ—Ç—Å—è –≤ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è—Ö.\n\nüíö –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å Telegram Premium, –Ø–Ω–¥–µ–∫—Å –ü–ª—é—Å –∏ –¥—Ä. –ø–æ–¥–ø–∏—Å–∫–∏ –∑–∞ WCoin!\n\nüí≠ –î–ª—è –∏–≥—Ä–æ–∫–æ–≤ ONLINE RP –º–æ–∂–Ω–æ –±–µ—Å–ø–ª–∞—Ç–Ω–æ –æ–±–º–µ–Ω–∏–≤–∞—Ç—å WCoin –Ω–∞ –ø—Ä–∏–∑—ã —Å –∫–µ–π—Å–æ–≤ –∏ –±–æ–∫—Å–æ–≤.\n\nüóØ–ü—Ä–æ—Å–º–æ—Ç—Ä –≤–∏–¥–µ–æ –±–µ–∑ –æ–±—Ö–æ–¥–æ–≤ –∏ —Ä–∞–∑–≤–∏—Ç–∏–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π.\n\n**–ß—Ç–æ —Ç–∞–∫–æ–µ WCoin?**\n‚≠ê WCoin ‚Äî —ç—Ç–æ –≤–∞–ª—é—Ç–∞ –≤ –Ω–∞—à–µ–º –±–æ—Ç–µ –∏–ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏. –¢—ã –º–æ–∂–µ—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –µ—ë –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –∫–µ–π—Å–æ–≤, –±–æ–∫—Å–æ–≤, –ø–ª–∞—Ç–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫.\n\nüíö –î–µ—Ä–∂–∞—Ç–µ–ª–∏ WCoin –±—É–¥—É—Ç —Ü–µ–Ω–∏—Ç—å—Å—è —Å—Ä–µ–¥–∏ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π. –ú—ã –ø–æ—Å—Ç–æ—è–Ω–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤—ã–≤–∞–µ–º –Ω–æ–≤—ã–µ –∏–¥–µ–∏, —á—Ç–æ–±—ã WCoin –±—ã–ª —Ü–µ–Ω–Ω–µ–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –¥–Ω—è.\n\n‚ù§ –ò–Ω–≤–µ—Å—Ç–∏—Ä—É—è –≤ –Ω–∞—Å, –≤—ã –ø–æ–º–æ–≥–∞–µ—Ç–µ —Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤–æ–≤–∞—Ç—å –Ω–∞—à —Å–µ—Ä–≤–∏—Å –∏ –≤–∞—à–∏ WCoin!\n\n**–ú–µ–Ω—è –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä—É—é—Ç?**\n–ù–µ—Ç ‚ùå\n\n–≠—Ç–æ –∞–∫—Ü–∏—è —Å–µ–º—å–∏ ¬´Waynes Family¬ª. –ú—ã –ù–ï –ø—Ä–æ–¥–∞–µ–º –∏–≥—Ä–æ–≤—É—é –≤–∞–ª—é—Ç—É, –∞ —Ä–∞–∑—ã–≥—Ä—ã–≤–∞–µ–º –∫–∞–∫ –≤ –æ–±—ã—á–Ω–æ–º –∫–æ–Ω–∫—É—Ä—Å–µ, –∏—Å–ø–æ–ª—å–∑—É—è –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞ –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø–∏–∞—Ä–∞.\n\n‚ùó –ó–∞–ø–æ–º–Ω–∏—Ç–µ:\n–ú—ã –Ω–µ –ø—Ä–æ–∫–∞—á–∏–≤–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç—ã–ù–µ –ø—Ä–æ—Å–∏–º –ø–∞—Ä–æ–ª–∏ –æ—Ç –∞–∫–∫–∞—É–Ω—Ç–æ–≤\n–ù–µ –ø—Ä–æ—Å–∏–º –∑–∞–ø–ª–∞—Ç–∏—Ç—å –∑–∞ —É—á–∞—Å—Ç–∏–µ –≤ –∞–∫—Ü–∏–∏ ‚Äî –£–ß–ê–°–¢–ò–ï –ë–ï–°–ü–õ–ê–¢–ù–û–ï\n–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–≥—Ä–∞–¥ ‚Äî –ë–ï–°–ü–õ–ê–¢–ù–û–ï\n\n**–ö–∞–∫ –ø–æ–ª—É—á–∞—Ç—å –ø—Ä–∏–∑—ã?**\n–ö–æ–≥–¥–∞ –≤—ã –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç–µ –±–æ–∫—Å, —Å–≤–µ—Ä—Ö—É –≤—ã—Ö–æ–¥–∏—Ç –∑–µ–ª–µ–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–∏–∑–∞, —Å–¥–µ–ª–∞–π—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ –≤ —á–∞—Ç, —É–∫–∞–∑–∞–≤ –±–∞–Ω–∫.—Å—á–µ—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–∏–∑–∞\n–ß–∞—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏: https://t.me/+THCVJSKfbjY2MTgy\n–ü–æ–¥—Ä–æ–±–Ω–µ–µ –≤ –Ω–∞—à–µ–º –ø–æ—Å—Ç—É: https://t.me/waynes_premium/11\n\n–¢–∞–∫–∂–µ —É –Ω–∞—Å –µ—Å—Ç—å –±–æ—Ç –≤ –í–ö, –≥–¥–µ –≤—ã —Ç–æ–∂–µ –º–æ–∂–µ—Ç–µ –æ—Ç–∫—Ä—ã–≤–∞—Ç—å –∫–µ–π—Å—ã ‚Äî https://vk.com/waynes_family`
	)
})

bot.command('subscribe', async (ctx) => {
    const subscriptionName = ctx.payload.trim()
    const userId = ctx.from.id
    const username = ctx.from.username || '–±–µ–∑ –Ω–∏–∫–∞'
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await ctx.reply('–û—Ç–ª–∏—á–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç—å —Å–≤–æ–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≤ –Ω–∞—à–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ üòç\n\nüí≥ –°–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã:\n\n‚Ä¢ VK Donut —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –µ–∂–µ–º–µ—Å—è—á–Ω—ã–º —Å–ø–∏—Å–∞–Ω–∏–µ–º: https://vk.com/donut/waynes_family.\n‚Ä¢ –û–ø–ª–∞—Ç–∞ –ø–æ –ø–µ—Ä–µ–≤–æ–¥—É –∏–ª–∏ QR-–∫–æ–¥—É –°–ë–ü\n‚Ä¢ –û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ Telegram Stars/Ton (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)\n‚Ä¢ –û–ø–ª–∞—Ç–∞ –∑–∞ WCoin\n\n–ï—Å–ª–∏ —É –≤–∞—Å –æ—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –≤—ã—à–µ –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –≤–∞–º –Ω–µ –ø–æ–¥—Ö–æ–¥—è—Ç, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É: /ask –í–æ–ø—Ä–æ—Å –∏–ª–∏ –ª–∏—á–Ω–æ @dmitry_damask')
    
    const adminMessage = `[Subscribe] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID ${userId} —Å –Ω–∏–∫–æ–º ${username} —Ö–æ—á–µ—Ç –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∫—É ${subscriptionName}\n\n–ß—Ç–æ–±—ã –æ—Ç–≤–µ—Ç–∏—Ç—å, –Ω–∞–ø–∏—à–∏—Ç–µ /pm ${userId} [–¢–µ–∫—Å—Ç]`
    
    try {
        await bot.telegram.sendMessage(950607972, adminMessage)
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É:', error)
    }
})

bot.command('ask', async (ctx) => {
    const question = ctx.payload.trim()
    const userId = ctx.from.id
    const username = ctx.from.username || '–±–µ–∑ –Ω–∏–∫–∞'
    
    if (!question) {
        return ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /ask')
    }
    
    // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await ctx.reply('–í–∞—à –≤–æ–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É. –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞.')
    
    // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
    const adminMessage = `[Question] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${username} (ID: ${userId}) –∑–∞–¥–∞–ª –≤–æ–ø—Ä–æ—Å:\n\n${question}\n\n–û—Ç–≤–µ—Ç–∏—Ç—å: /pm ${userId} [–¢–µ–∫—Å—Ç]`
    
    try {
        await bot.telegram.sendMessage(950607972, adminMessage)
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É:', error)
        await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–æ–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.')
    }
})

const promoCodestg = {} // –•—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ –≤ –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ–π –ø–∞–º—è—Ç–∏
const usedPromoCodes = {} // –•—Ä–∞–Ω–µ–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥
const checkAdmin = ctx => {
	return ctx.from.id === 950607972
}

const checkModerator = async ctx => {
	const userId = ctx.from.id

	// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤–∞—à–∏ –ª–∏—á–Ω—ã–µ –ø—Ä–∞–≤–∞
	if (userId === 950607972) {
		return true
	}

	// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ç–∞–±–ª–∏—Ü–µ admins
	const { data, error } = await supabase
		.from('admins')
		.select('*')
		.eq('telegram', userId)

	if (error) {
		console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:', error)
		return false
	}

	return data.length > 0 // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω –≤ —Ç–∞–±–ª–∏—Ü–µ admins, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º true
}

bot.command('pm', async (ctx) => {
    if (!checkAdmin(ctx)) {
        await ctx.reply('–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É')
        return
    }
    
    const [_, userId, ...messageParts] = ctx.message.text.split(' ')
    const message = messageParts.join(' ')
    
    if (!userId || !message) {
        await ctx.reply('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /pm [ID] [–¢–µ–∫—Å—Ç]')
        return
    }
    
    try {
        await bot.telegram.sendMessage(userId, `[–ê–¥–º–∏–Ω] ${message}`)
        await ctx.reply(`–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userId}`)
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:', error)
        await ctx.reply('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞?')
    }
})

bot.command('addhistory', async ctx => {
	if (!checkAdmin(ctx)) {
		return ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —ç—Ç—É –∫–æ–º–∞–Ω–¥—É')
	}

	const text = ctx.message.text.replace('/addhistory', '').trim()

	if (!text) {
		return ctx.reply('‚ùå –£–∫–∞–∂–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏: /addhistory [—Ç–µ–∫—Å—Ç]')
	}

	try {
		// –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –¥–æ–±–∞–≤–ª–µ–Ω–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é (–ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º —á—Ç–æ URL —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω)
		const { data: lastStory } = await supabase
			.from('stories')
			.select('image_url')
			.order('created_at', { ascending: false })
			.limit(1)
			.single()

		if (!lastStory?.image_url) {
			return ctx.reply('‚ùå –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ Supabase')
		}

		// –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–π –∏—Å—Ç–æ—Ä–∏–∏
		const { error } = await supabase
			.from('stories')
			.update({ text_content: text })
			.eq('image_url', lastStory.image_url)

		if (error) throw error

		ctx.reply('‚úÖ –ò—Å—Ç–æ—Ä–∏—è —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!')
	} catch (e) {
		console.error(e)
		ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏')
	}
})

bot.hears(/^\/—Ä–∞—Å—Å—ã–ª–∫–∞(?:\s|$)/, async ctx => {
	// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
	if (!checkAdmin(ctx)) {
		return ctx.reply('–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.')
	}

	// –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏
	const messageText = ctx.message.text.split(' ').slice(1).join(' ')
	if (!messageText) {
		return ctx.reply(
			'‚ùå –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏. –ü—Ä–∏–º–µ—Ä:\n/—Ä–∞—Å—Å—ã–ª–∫–∞ –ü—Ä–∏–≤–µ—Ç –≤—Å–µ–º!'
		)
	}

	try {
		// –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ Supabase
		const { data: users, error } = await supabase
			.from('users')
			.select('telegram') // –ë–µ—Ä—ë–º —Ç–æ–ª—å–∫–æ ID Telegram
			.not('telegram', 'is', null) // –ò—Å–∫–ª—é—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–µ–∑ Telegram ID

		if (error) {
			console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ Supabase:', error)
			return ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.')
		}

		// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
		if (!users || users.length === 0) {
			return ctx.reply('‚ùå –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.')
		}

		// –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ –ø–∞–∫–µ—Ç—ã –ø–æ 30 —á–µ–ª–æ–≤–µ–∫
		const chunkSize = 30
		let totalSent = 0

		for (let i = 0; i < users.length; i += chunkSize) {
			const chunk = users.slice(i, i + chunkSize)

			// –†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ —Ç–µ–∫—É—â–µ–º—É –ø–∞–∫–µ—Ç—É
			await Promise.all(
				chunk.map(async user => {
					const telegramId = user.telegram
					try {
						await bot.telegram.sendMessage(telegramId, messageText)
						totalSent++
					} catch (err) {
						console.error(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${telegramId}:`, err)
					}
				})
			)

			// –ü–∞—É–∑–∞ –º–µ–∂–¥—É –ø–∞–∫–µ—Ç–∞–º–∏ (2 —Å–µ–∫—É–Ω–¥—ã)
			await new Promise(resolve => setTimeout(resolve, 2000))
		}

		// –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
		ctx.reply(`‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–æ—Å–ª–∞–Ω–æ ${totalSent} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.`)
	} catch (err) {
		console.error('–û—à–∏–±–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏:', err)
		ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—Å—ã–ª–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π.')
	}
})

// –ö–æ–º–∞–Ω–¥–∞ /creatpromo [–Ω–∞–∑–≤–∞–Ω–∏–µ] [—Å—É–º–º–∞]
bot.command('creatpromo', ctx => {
	if (!checkAdmin(ctx)) {
		return ctx.reply('–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.')
	}

	const args = ctx.message.text.split(' ').slice(1)
	if (args.length < 2) {
		return ctx.reply('/creatpromo [–Ω–∞–∑–≤–∞–Ω–∏–µ] [—Å—É–º–º–∞]')
	}

	const [promoName, amount] = args
	if (isNaN(amount)) {
		return ctx.reply('–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º.')
	}

	promoCodestg[promoName] = {
		amount: parseInt(amount),
		maxActivations: null, // –ë–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ –∞–∫—Ç–∏–≤–∞—Ü–∏—è–º
		activationsLeft: null,
	}

	return ctx.reply(`–ü—Ä–æ–º–æ–∫–æ–¥ ${promoName} —Å —Å—É–º–º–æ–π ${amount} —Å–æ–∑–¥–∞–Ω.`)
})

// –ö–æ–º–∞–Ω–¥–∞ /ccreatpromo [–Ω–∞–∑–≤–∞–Ω–∏–µ] [—Å—É–º–º–∞] [–∫–æ–ª-–≤–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–π]
bot.command('ccreatpromo', ctx => {
	if (!checkAdmin(ctx)) {
		return ctx.reply('–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.')
	}

	const args = ctx.message.text.split(' ').slice(1)
	if (args.length < 3) {
		return ctx.reply(
			'/ccreatpromo [–Ω–∞–∑–≤–∞–Ω–∏–µ] [—Å—É–º–º–∞] [–∫–æ–ª-–≤–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–π]'
		)
	}

	const [promoName, amount, activations] = args
	if (isNaN(amount) || isNaN(activations)) {
		return ctx.reply('–°—É–º–º–∞ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–π –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Å–ª–∞–º–∏.')
	}

	promoCodestg[promoName] = {
		amount: parseInt(amount),
		maxActivations: parseInt(activations),
		activationsLeft: parseInt(activations),
	}

	return ctx.reply(
		`–ü—Ä–æ–º–æ–∫–æ–¥ ${promoName} —Å —Å—É–º–º–æ–π ${amount} –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –∞–∫—Ç–∏–≤–∞—Ü–∏–π ${activations} —Å–æ–∑–¥–∞–Ω.`
	)
})

// –ö–æ–º–∞–Ω–¥–∞ /delpromo [–Ω–∞–∑–≤–∞–Ω–∏–µ]
bot.command('delpromo', ctx => {
	if (!checkAdmin(ctx)) {
		return ctx.reply('–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.')
	}

	const args = ctx.message.text.split(' ').slice(1)
	if (args.length < 1) {
		return ctx.reply('/delpromo [–Ω–∞–∑–≤–∞–Ω–∏–µ]')
	}

	const promoName = args[0]
	if (!promoCodestg[promoName]) {
		return ctx.reply('–¢–∞–∫–æ–π –ø—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω.')
	}

	delete promoCodestg[promoName]
	return ctx.reply(`–ü—Ä–æ–º–æ–∫–æ–¥ ${promoName} —É–¥–∞–ª—ë–Ω.`)
})

// –ö–æ–º–∞–Ω–¥–∞ /usepromo [–Ω–∞–∑–≤–∞–Ω–∏–µ]
bot.command('usepromo', async ctx => {
	const args = ctx.message.text.split(' ').slice(1)
	if (args.length < 1) {
		return ctx.reply('–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /usepromo [–Ω–∞–∑–≤–∞–Ω–∏–µ]')
	}

	const promoName = args[0]

	// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞
	if (!promoCodestg[promoName]) {
		// –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ promoCodestg
		return ctx.reply('–¢–∞–∫–æ–π –ø—Ä–æ–º–æ–∫–æ–¥ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.')
	}

	// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–π
	if (promoCodestg[promoName].activationsLeft === 0) {
		// –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ promoCodestg
		return ctx.reply('–ê–∫—Ç–∏–≤–∞—Ü–∏–∏ –¥–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å.')
	}

	// –ü—Ä–æ–≤–µ—Ä–∫–∞, –±—ã–ª –ª–∏ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –ø—Ä–æ–º–æ–∫–æ–¥ —ç—Ç–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
	if (usedPromoCodes[ctx.from.id] && usedPromoCodes[ctx.from.id][promoName]) {
		return ctx.reply('–í—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ —ç—Ç–æ—Ç –ø—Ä–æ–º–æ–∫–æ–¥.')
	}

	// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è score
	const { data: user, error: fetchError } = await supabase
		.from('users')
		.select('score')
		.eq('telegram', ctx.from.id)
		.single()

	if (fetchError || !user) {
		return ctx.reply('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.')
	}

	const newScore = user.score + promoCodestg[promoName].amount

	// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è score
	const { error: updateError } = await supabase
		.from('users')
		.update({ score: newScore })
		.eq('telegram', ctx.from.id)

	if (updateError) {
		return ctx.reply('–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞.')
	}

	// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –∞–∫—Ç–∏–≤–∞—Ü–∏–π
	promoCodestg[promoName].activationsLeft -= 1 // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ promoCodestg

	// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞
	if (!usedPromoCodes[ctx.from.id]) {
		usedPromoCodes[ctx.from.id] = {}
	}
	usedPromoCodes[ctx.from.id][promoName] = true

	return ctx.reply(
		`–ü—Ä–æ–º–æ–∫–æ–¥ ${promoName} –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω. –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ ${promoCodestg[promoName].amount} WCoin.` // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ promoCodestg
	)
})

// –ü–æ–ª—É—á–µ–Ω–∏–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
const getUserId = async (ctx, target) => {
    if (ctx.message.reply_to_message) {
        return ctx.message.reply_to_message.from.id; // ID –∏–∑ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
    } else if (target.startsWith('@')) {
        const username = target.slice(1);
        const user = await ctx.telegram.getChatMember(ctx.chat.id, username);
        return user.user.id; // ID –ø–æ username
    } else {
        return target; // ID –Ω–∞–ø—Ä—è–º—É—é
    }
};

// –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
const getUsername = async (ctx, userId) => {
    try {
        const user = await ctx.telegram.getChatMember(ctx.chat.id, userId);
        return user.user.username ? `@${user.user.username}` : '–±–µ–∑ –Ω–∏–∫–∞';
    } catch (error) {
        return '–±–µ–∑ –Ω–∏–∫–∞';
    }
};

bot.command('clans', async (ctx) => {
	const isModerator = await checkModerator(ctx);
  	if (!isModerator) {
    	return ctx.reply('üö´ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.');
  }

  try {
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∫–ª–∞–Ω–∞—Ö –∏ –∏—Ö –≤–ª–∞–¥–µ–Ω–∏—è—Ö
    const { data: clans, error: clansError } = await supabase
      .from('clan')
      .select('*')
      .order('score', { ascending: false });
    
    if (clansError) throw clansError;

    // –î–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–ª–∞–Ω–∞ –ø–æ–ª—É—á–∞–µ–º –µ–≥–æ –≤–ª–∞–¥–µ–Ω–∏—è
    for (const clan of clans) {
      const { data: villages, error: villagesError } = await supabase
        .from('captured_villages')
        .select('*')
        .eq('clan_id', clan.clan_id);
      
      if (villagesError) throw villagesError;

      // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
      let message = `üÜî ID: ${clan.clan_id}\n`;
	  message += `üè∞ –ö–ª–∞–Ω: ${clan.clan_name}\n`;
      message += `üëë –°–æ–∑–¥–∞—Ç–µ–ª—å: ${clan.creator}\n`;
      message += `üí∞ –û–±—â–∞–∫: ${clan.score} WCoin\n`;
      message += `üèÜ –ü–æ–±–µ–¥: ${clan.wins} | –ü–æ—Ä–∞–∂–µ–Ω–∏–π: ${clan.losses}\n`;
      message += `‚è≥ –î–æ—Ö–æ–¥: ${clan.income || 0} WCoin/2–º–∏–Ω\n\n`;
      message += `üè° –í–ª–∞–¥–µ–Ω–∏—è:\n`;

      if (villages.length > 0) {
        villages.forEach(village => {
          const capturedTime = new Date(village.captured_at);
          const now = new Date();
          const diffMs = now - capturedTime;
          const diffDays = Math.floor(diffMs / (1000 * 60 * 60 * 24));
          const diffHours = Math.floor((diffMs % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
          const diffMins = Math.floor((diffMs % (1000 * 60 * 60)) / (1000 * 60));
          
          message += `- ${village.village_name} (${diffDays}–¥ ${diffHours}—á ${diffMins}–º)\n`;
          message += `  üí∞ –î–æ—Ö–æ–¥: ${village.income} WCoin/2–º–∏–Ω\n`;
        });
      } else {
        message += `–ù–µ—Ç –≤–ª–∞–¥–µ–Ω–∏–π\n`;
      }

      message += `\n----------------\n`;

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
      await ctx.reply(message);
    }

  } catch (error) {
    console.error('Error in /clans command:', error);
    ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–ª–∞–Ω–∞—Ö');
  }
});

// –ö–æ–º–∞–Ω–¥–∞ /war (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)
bot.command('war', async (ctx) => {
  if (!checkAdmin(ctx)) {
    return ctx.reply('–ù–µ—Ç —Ç–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã');
  }

  const args = ctx.message.text.split(' ');
  if (args.length < 3) {
    return ctx.reply('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /war [clan_id] [–ù–∞–∑–≤–∞–Ω–∏–µ –¥–µ—Ä–µ–≤–Ω–∏]');
  }

  const clanId = parseInt(args[1]);
  const villageName = args.slice(2).join(' ');

  try {
    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–ª–∞–Ω–∞
    const { data: clan, error: clanError } = await supabase
      .from('clan')
      .select('*')
      .eq('clan_id', clanId)
      .single();
    
    if (clanError || !clan) {
      return ctx.reply('–ö–ª–∞–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }

    // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–µ—Ä–µ–≤–Ω–∏ —É –∫–ª–∞–Ω–∞
    const { data: village, error: villageError } = await supabase
      .from('captured_villages')
      .select('*')
      .eq('clan_id', clanId)
      .eq('village_name', villageName)
      .single();
    
    if (villageError || !village) {
      return ctx.reply('–î–µ—Ä–µ–≤–Ω—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ —É —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∫–ª–∞–Ω–∞');
    }

    // 3. –†–∞–Ω–¥–æ–º–Ω—ã–π –≤—Ä–∞–≥
    const enemies = ['–¢–µ–º–Ω—ã–π —Ä—ã—Ü–∞—Ä—å', '–û–≥–Ω–µ–Ω–Ω—ã–π –º–∞–≥', '–õ–µ–¥—è–Ω–∞—è –≤–∞–ª—å–∫–∏—Ä–∏—è', '–ö—Ä–∞—Å–Ω—ã–π –¥—Ä–∞–∫–æ–Ω'];
    const randomEnemy = enemies[Math.floor(Math.random() * enemies.length)];

    // 4. –£–¥–∞–ª—è–µ–º –¥–µ—Ä–µ–≤–Ω—é –∏–∑ captured_villages
    const { error: deleteError } = await supabase
      .from('captured_villages')
      .delete()
      .eq('village_name', villageName)
      .eq('clan_id', clanId);
    
    if (deleteError) throw deleteError;

    // 5. –û–±–Ω–æ–≤–ª—è–µ–º holdings –∏ losses –≤ —Ç–∞–±–ª–∏—Ü–µ clan
    const currentHoldings = clan.holdings || [];
    const updatedHoldings = currentHoldings.filter(v => v.name !== villageName);
    
    const { error: updateError } = await supabase
      .from('clan')
      .update({ 
        holdings: updatedHoldings,
        losses: (clan.losses || 0) + 1 // –ü—Ä–æ—Å—Ç–æ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞ 1
      })
      .eq('clan_id', clanId);
    
    if (updateError) throw updateError;

    // 6. –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –∏—Å—Ç–æ—Ä–∏—é –±–∏—Ç–≤
    const { error: historyError } = await supabase
      .from('battle_history')
      .insert([{
        clan_id: clanId,
        battle_type: 'defense',
        enemy_name: randomEnemy,
        target_village: villageName,
        result: 'lose',
        losses: villageName,
        battle_time: new Date().toISOString()
      }]);
    
    if (historyError) throw historyError;

    ctx.replyWithHTML(
      `‚úÖ –î–µ—Ä–µ–≤–Ω—è <b>${villageName}</b> —É—Å–ø–µ—à–Ω–æ –æ—Ç–æ–±—Ä–∞–Ω–∞ —É –∫–ª–∞–Ω–∞ <b>${clan.clan_name}</b>!\n` +
      `üõ°Ô∏è –ó–∞—Ö–≤–∞—Ç—á–∏–∫: <i>${randomEnemy}</i>\n` +
      `üìâ –ü–æ—Ç–µ—Ä–∏: ${villageName} (${village.income} WCoin/2–º–∏–Ω)\n` +
      `üíî –ü–æ—Ä–∞–∂–µ–Ω–∏–π —É –∫–ª–∞–Ω–∞: ${(clan.losses || 0) + 1}`
    );

  } catch (error) {
    console.error('Error in /war command:', error);
    ctx.reply('‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã: ' + error.message);
  }
});

// –ö–æ–º–∞–Ω–¥–∞ /ahelp (–¥–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)
bot.command('ahelp', async ctx => {
	if (!await checkModerator(ctx)) {
        return ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —ç—Ç—É –∫–æ–º–∞–Ω–¥—É');
    }

	await ctx.reply(
		`–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã:\n/mute [id/–æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ] [–º–∏–Ω] [–ø—Ä–∏—á–∏–Ω–∞]\n/unmute [id/–æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ]\n/mutelist\n/ban [id/–æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ] [–¥–Ω–∏] [–ø—Ä–∏—á–∏–Ω–∞]\n/unban [id/–æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ]\n/banlist\n/warn [id/–æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ] [–ø—Ä–∏—á–∏–Ω–∞]\n/unwarn [id/–æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ]\n/warnlist\n/check [id/–æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ]\n/logs\n\n–ü—Ä–æ—á–µ–µ:\n/creatpromo [–Ω–∞–∑–≤–∞–Ω–∏–µ] [—Å—É–º–º–∞]\n/ccreatpromo [–Ω–∞–∑–≤–∞–Ω–∏–µ] [—Å—É–º–º–∞] [–∫–æ–ª-–≤–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–π]\n/delpromo [–Ω–∞–∑–≤–∞–Ω–∏–µ]\n/—Ä–∞—Å—Å—ã–ª–∫–∞ [—Ç–µ–∫—Å—Ç]`
	)
})

bot.command('giveadm', async ctx => {
	if (!checkAdmin(ctx)) {
		return ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —ç—Ç—É –∫–æ–º–∞–Ω–¥—É')
	}

	const userId = ctx.message.text.split(' ')[1]
	if (!userId) {
		return ctx.reply('‚ùå –£–∫–∞–∂–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: /giveadm [id telegram]')
	}

	// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ç–∞–±–ª–∏—Ü—É admins
	const { data, error } = await supabase
		.from('admins')
		.insert([{ telegram: userId, username: ctx.from.username || '–ë–µ–∑ –Ω–∏–∫–∞' }])

	if (error) {
		return ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–¥–∞—á–µ –∞–¥–º–∏–Ω–∫–∏')
	}

	ctx.reply(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID ${userId} –ø–æ–ª—É—á–∏–ª –∞–¥–º–∏–Ω–∫—É`)
})

bot.command('deladm', async (ctx) => {
    if (!checkAdmin(ctx)) {
        return ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —ç—Ç—É –∫–æ–º–∞–Ω–¥—É');
    }

    const userId = ctx.message.text.split(' ')[1];
    if (!userId) {
        return ctx.reply('‚ùå –£–∫–∞–∂–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: /deladm [id telegram]');
    }

    // –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ç–∞–±–ª–∏—Ü—ã admins
    const { data, error } = await supabase
        .from('admins')
        .delete()
        .eq('telegram', userId);

    if (error) {
        return ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–Ω—è—Ç–∏–∏ –∞–¥–º–∏–Ω–∫–∏');
    }

    ctx.reply(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID ${userId} –ª–∏—à–µ–Ω –∞–¥–º–∏–Ω–∫–∏`);
});

bot.command('mute', async (ctx) => {
    if (!await checkModerator(ctx)) {
        return ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —ç—Ç—É –∫–æ–º–∞–Ω–¥—É');
    }

    const args = ctx.message.text.split(' ').slice(1);
    let target, minutes, reason;

    // –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –≤—ã–∑–≤–∞–Ω–∞ –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if (ctx.message.reply_to_message) {
        target = ctx.message.reply_to_message.from.id; // ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –æ—Ç–≤–µ—Ç–∞
        minutes = parseInt(args[0]);
        reason = args.slice(1).join(' ');
    } else {
        // –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –≤—ã–∑–≤–∞–Ω–∞ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º ID/–Ω–∏–∫–∞
        target = args[0];
        minutes = parseInt(args[1]);
        reason = args.slice(2).join(' ');
    }

    if (!target || !minutes || !reason) {
        return ctx.reply('‚ùå –£–∫–∞–∂–∏—Ç–µ –≤—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: /mute [nickname/id/–æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ] [–∫–æ–ª-–≤–æ –º–∏–Ω—É—Ç] [–ø—Ä–∏—á–∏–Ω–∞]');
    }

    const userId = await getUserId(ctx, target);
    const username = await getUsername(ctx, userId);

    // –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø—Ä–∞–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–º—É—Ç)
    const untilDate = Math.floor(Date.now() / 1000) + minutes * 60;
    await ctx.telegram.restrictChatMember(ctx.chat.id, userId, {
        until_date: untilDate,
        permissions: {
            can_send_messages: false,
            can_send_media_messages: false,
            can_send_other_messages: false,
            can_add_web_page_previews: false,
        },
    });

    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º—É—Ç–∞ –≤ —Ç–∞–±–ª–∏—Ü—É punishments
    const muteEndTime = new Date(Date.now() + minutes * 60000).toISOString();
    const { data, error } = await supabase
        .from('punishments')
        .insert([{ telegram: userId, nickname: username, type: 'mute', time: muteEndTime, reason: reason }]);

    if (error) {
        return ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–¥–∞—á–µ –º—É—Ç–∞');
    }

    ctx.reply(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${username} (ID: ${userId}) –ø–æ–ª—É—á–∏–ª –º—É—Ç –Ω–∞ ${minutes} –º–∏–Ω—É—Ç –ø–æ –ø—Ä–∏—á–∏–Ω–µ: ${reason}`);
});

// –ö–æ–º–∞–Ω–¥–∞ /unmute [nickname/id/–æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ]
bot.command('unmute', async (ctx) => {
    if (!await checkModerator(ctx)) {
        return ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —ç—Ç—É –∫–æ–º–∞–Ω–¥—É');
    }

    const args = ctx.message.text.split(' ').slice(1);
    let target;

    // –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –≤—ã–∑–≤–∞–Ω–∞ –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if (ctx.message.reply_to_message) {
        target = ctx.message.reply_to_message.from.id; // ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –æ—Ç–≤–µ—Ç–∞
    } else {
        // –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –≤—ã–∑–≤–∞–Ω–∞ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º ID/–Ω–∏–∫–∞
        target = args[0];
    }

    if (!target) {
        return ctx.reply('‚ùå –£–∫–∞–∂–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: /unmute [nickname/id/–æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ]');
    }

    const userId = await getUserId(ctx, target);
    const username = await getUsername(ctx, userId);

    // –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∞–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await ctx.telegram.restrictChatMember(ctx.chat.id, userId, {
        permissions: {
            can_send_messages: true,
            can_send_media_messages: true,
            can_send_other_messages: true,
            can_add_web_page_previews: true,
        },
    });

    // –£–¥–∞–ª–µ–Ω–∏–µ –º—É—Ç–∞ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã punishments
    const { data, error } = await supabase
        .from('punishments')
        .delete()
        .eq('telegram', userId)
        .eq('type', 'mute')
		.gt('time', new Date().toISOString());

    if (error) {
        return ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–Ω—è—Ç–∏–∏ –º—É—Ç–∞');
    }

    ctx.reply(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${username} (ID: ${userId}) —Å–Ω—è—Ç –º—É—Ç.`);
});

bot.command('mutelist', async (ctx) => { 
    if (!await checkModerator(ctx)) {
        return ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —ç—Ç—É –∫–æ–º–∞–Ω–¥—É');
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –º—É—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const { data, error } = await supabase
        .from('punishments')
        .select('*')
        .eq('type', 'mute');

    if (error) {
        return ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, —É –∫–æ—Ç–æ—Ä—ã—Ö –µ—Å—Ç—å –º—É—Ç.');
    }

    if (data.length === 0) {
        return ctx.reply('‚úÖ –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, —É –∫–æ—Ç–æ—Ä—ã—Ö –µ—Å—Ç—å –º—É—Ç.');
    }

    const muteList = [];
    for (const mute of data) {
        const timeLeft = Math.ceil((new Date(mute.time) - Date.now()) / 60000); // –û—Å—Ç–∞–ª–æ—Å—å –º–∏–Ω—É—Ç

        // –ï—Å–ª–∏ –º—É—Ç –∏—Å—Ç–µ–∫, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–ø–∏—Å—å
        if (timeLeft <= 0) {
            continue;
        }

        // –ü–æ–ª—É—á–∞–µ–º –Ω–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const username = await getUsername(ctx, mute.telegram);

        muteList.push(`ID: ${mute.telegram}, –ù–∏–∫: ${username}, –ü—Ä–∏—á–∏–Ω–∞: ${mute.reason}, –û—Å—Ç–∞–ª–æ—Å—å: ${timeLeft} –º–∏–Ω—É—Ç`);
    }

    if (muteList.length === 0) {
        return ctx.reply('‚úÖ –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, —É –∫–æ—Ç–æ—Ä—ã—Ö –µ—Å—Ç—å –º—É—Ç.');
    }

    ctx.reply(`üìã –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, —É –∫–æ—Ç–æ—Ä—ã—Ö –µ—Å—Ç—å –º—É—Ç:\n${muteList.join('\n')}`);
});

bot.command('warn', async (ctx) => {
    if (!await checkModerator(ctx)) {
        return ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —ç—Ç—É –∫–æ–º–∞–Ω–¥—É');
    }

    const args = ctx.message.text.split(' ').slice(1);
    let target, reason;

    // –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –≤—ã–∑–≤–∞–Ω–∞ –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if (ctx.message.reply_to_message) {
        target = ctx.message.reply_to_message.from.id; // ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –æ—Ç–≤–µ—Ç–∞
        reason = args.join(' ');
    } else {
        // –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –≤—ã–∑–≤–∞–Ω–∞ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º ID/–Ω–∏–∫–∞
        target = args[0];
        reason = args.slice(1).join(' ');
    }

    if (!target || !reason) {
        return ctx.reply('‚ùå –£–∫–∞–∂–∏—Ç–µ –≤—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: /warn [nickname/id/–æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ] [–ø—Ä–∏—á–∏–Ω–∞]');
    }

    const userId = await getUserId(ctx, target);
    const username = await getUsername(ctx, userId);

    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–∞—Ä–Ω–∞ –≤ —Ç–∞–±–ª–∏—Ü—É punishments
    const { data, error } = await supabase
        .from('punishments')
        .insert([{ telegram: userId, type: 'warn', reason: reason }]);

    if (error) {
        return ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–¥–∞—á–µ –≤–∞—Ä–Ω–∞');
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤–∞—Ä–Ω–æ–≤
    const { data: warns, error: warnError } = await supabase
        .from('punishments')
        .select('*')
        .eq('telegram', userId)
        .eq('type', 'warn');

    if (warnError) {
        return ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –≤–∞—Ä–Ω–æ–≤');
    }

    if (warns.length >= 3) {
        // –ë–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ 3 –≤–∞—Ä–Ω–∞—Ö
        await supabase
            .from('punishments')
            .insert([{ telegram: userId, nickname: username, type: 'ban', reason: '3/3 –≤–∞—Ä–Ω–∞' }]);

        ctx.reply(`üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${username} (ID: ${userId}) –ø–æ–ª—É—á–∏–ª –±–∞–Ω –∑–∞ 3/3 –≤–∞—Ä–Ω–∞`);
    } else {
        ctx.reply(`‚ö† –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${username} (ID: ${userId}) –ø–æ–ª—É—á–∏–ª –≤–∞—Ä–Ω. –¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${warns.length}/3`);
    }
});

bot.command('unwarn', async (ctx) => {
    if (!await checkModerator(ctx)) {
        return ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —ç—Ç—É –∫–æ–º–∞–Ω–¥—É');
    }

    const args = ctx.message.text.split(' ').slice(1);
    let target;

    // –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –≤—ã–∑–≤–∞–Ω–∞ –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if (ctx.message.reply_to_message) {
        target = ctx.message.reply_to_message.from.id; // ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –æ—Ç–≤–µ—Ç–∞
    } else {
        // –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –≤—ã–∑–≤–∞–Ω–∞ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º ID/–Ω–∏–∫–∞
        target = args[0];
    }

    if (!target) {
        return ctx.reply('‚ùå –£–∫–∞–∂–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: /unwarn [nickname/id/–æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ]');
    }

    const userId = await getUserId(ctx, target);
    const username = await getUsername(ctx, userId);

    // –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤–∞—Ä–Ω–∞
    const { data, error } = await supabase
        .from('punishments')
        .delete()
        .eq('telegram', userId)
        .eq('type', 'warn')
        .order('id', { ascending: false })
        .limit(1);

    if (error) {
        return ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–Ω—è—Ç–∏–∏ –≤–∞—Ä–Ω–∞');
    }

    ctx.reply(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${username} (ID: ${userId}) –ª–∏—à–µ–Ω –æ–¥–Ω–æ–≥–æ –≤–∞—Ä–Ω–∞`);
});

bot.command('warnlist', async (ctx) => {
    if (!await checkModerator(ctx)) {
        return ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —ç—Ç—É –∫–æ–º–∞–Ω–¥—É');
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –≤–∞—Ä–Ω–∞–º–∏
    const { data, error } = await supabase
        .from('punishments')
        .select('*')
        .eq('type', 'warn');

    if (error) {
        return ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –≤–∞—Ä–Ω–æ–≤');
    }

    if (data.length === 0) {
        return ctx.reply('‚úÖ –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –≤–∞—Ä–Ω–∞–º–∏');
    }

    const warnList = [];
    for (const warn of data) {
        // –ü–æ–ª—É—á–∞–µ–º –Ω–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const username = await getUsername(ctx, warn.telegram);

        warnList.push(`ID: ${warn.telegram}, –ù–∏–∫: ${username}, –ü—Ä–∏—á–∏–Ω–∞: ${warn.reason}`);
    }

    ctx.reply(`üìã –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –≤–∞—Ä–Ω–∞–º–∏:\n${warnList.join('\n')}`);
});

bot.command('ban', async (ctx) => {
    if (!await checkModerator(ctx)) {
        return ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —ç—Ç—É –∫–æ–º–∞–Ω–¥—É');
    }

    const args = ctx.message.text.split(' ').slice(1);
    let target, days, reason;

    // –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –≤—ã–∑–≤–∞–Ω–∞ –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if (ctx.message.reply_to_message) {
        target = ctx.message.reply_to_message.from.id; // ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –æ—Ç–≤–µ—Ç–∞
        days = parseInt(args[0]);
        reason = args.slice(1).join(' ');
    } else {
        // –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –≤—ã–∑–≤–∞–Ω–∞ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º ID/–Ω–∏–∫–∞
        target = args[0];
        days = parseInt(args[1]);
        reason = args.slice(2).join(' ');
    }

    if (!target || !days || !reason) {
        return ctx.reply('‚ùå –£–∫–∞–∂–∏—Ç–µ –≤—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: /ban [nickname/id/–æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ] [–¥–Ω–µ–π] [–ø—Ä–∏—á–∏–Ω–∞]');
    }

    const userId = await getUserId(ctx, target);
    const username = await getUsername(ctx, userId);

    // –ë–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const untilDate = Math.floor(Date.now() / 1000) + days * 86400;
    await ctx.telegram.banChatMember(ctx.chat.id, userId, untilDate);

    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –±–∞–Ω–∞ –≤ —Ç–∞–±–ª–∏—Ü—É punishments
    const banEndTime = new Date(Date.now() + days * 86400000).toISOString();
    const { data, error } = await supabase
        .from('punishments')
        .insert([{ telegram: userId, nickname: username, type: 'ban', time: banEndTime, reason: reason }]);

    if (error) {
        return ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–¥–∞—á–µ –±–∞–Ω–∞');
    }

    ctx.reply(`üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${username} (ID: ${userId}) –∑–∞–±–∞–Ω–µ–Ω –Ω–∞ ${days} –¥–Ω–µ–π –ø–æ –ø—Ä–∏—á–∏–Ω–µ: ${reason}`);
});

// –ö–æ–º–∞–Ω–¥–∞ /unban [nickname/id/–æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ]
bot.command('unban', async (ctx) => {
    if (!await checkModerator(ctx)) {
        return ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —ç—Ç—É –∫–æ–º–∞–Ω–¥—É');
    }

    const args = ctx.message.text.split(' ').slice(1);
    let target;

    // –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –≤—ã–∑–≤–∞–Ω–∞ –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if (ctx.message.reply_to_message) {
        target = ctx.message.reply_to_message.from.id; // ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –æ—Ç–≤–µ—Ç–∞
    } else {
        // –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –≤—ã–∑–≤–∞–Ω–∞ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º ID/–Ω–∏–∫–∞
        target = args[0];
    }

    if (!target) {
        return ctx.reply('‚ùå –£–∫–∞–∂–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: /unban [nickname/id/–æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ]');
    }

    const userId = await getUserId(ctx, target);
    const username = await getUsername(ctx, userId);

    // –†–∞–∑–±–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await ctx.telegram.unbanChatMember(ctx.chat.id, userId);

    // –£–¥–∞–ª–µ–Ω–∏–µ –±–∞–Ω–∞ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã punishments
    const { data, error } = await supabase
        .from('punishments')
        .delete()
        .eq('telegram', userId)
        .eq('type', 'ban')
		.gt('time', new Date().toISOString());

    if (error) {
        return ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–Ω—è—Ç–∏–∏ –±–∞–Ω–∞');
    }

    ctx.reply(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${username} (ID: ${userId}) —Ä–∞–∑–±–∞–Ω–µ–Ω`);
});

bot.command('banlist', async (ctx) => {
    if (!await checkModerator(ctx)) {
        return ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —ç—Ç—É –∫–æ–º–∞–Ω–¥—É');
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–∞–±–∞–Ω–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const { data, error } = await supabase
        .from('punishments')
        .select('*')
        .eq('type', 'ban');

    if (error) {
        return ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –±–∞–Ω–æ–≤');
    }

    if (data.length === 0) {
        return ctx.reply('‚úÖ –ù–µ—Ç –∑–∞–±–∞–Ω–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
    }

    const banList = [];
    for (const ban of data) {
        const timeLeft = Math.ceil((new Date(ban.time) - Date.now()) / 86400000); // –û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π

        // –ï—Å–ª–∏ –±–∞–Ω –∏—Å—Ç–µ–∫, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–ø–∏—Å—å
        if (timeLeft <= 0) {
            continue;
        }

        // –ü–æ–ª—É—á–∞–µ–º –Ω–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const username = await getUsername(ctx, ban.telegram);

        banList.push(`ID: ${ban.telegram}, –ù–∏–∫: ${username}, –ü—Ä–∏—á–∏–Ω–∞: ${ban.reason}, –û—Å—Ç–∞–ª–æ—Å—å: ${timeLeft} –¥–Ω–µ–π`);
    }

    if (banList.length === 0) {
        return ctx.reply('‚úÖ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–±–∞–Ω–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.');
    }

    ctx.reply(`üìã –°–ø–∏—Å–æ–∫ –∑–∞–±–∞–Ω–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n${banList.join('\n')}`);
});

bot.command('check', async (ctx) => {
    if (!await checkModerator(ctx)) {
        return ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —ç—Ç—É –∫–æ–º–∞–Ω–¥—É');
    }

    const args = ctx.message.text.split(' ').slice(1);
    let target;

    // –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –≤—ã–∑–≤–∞–Ω–∞ –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if (ctx.message.reply_to_message) {
        target = ctx.message.reply_to_message.from.id; // ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –æ—Ç–≤–µ—Ç–∞
    } else {
        // –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –≤—ã–∑–≤–∞–Ω–∞ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º ID/–Ω–∏–∫–∞
        target = args[0];
    }

    if (!target) {
        return ctx.reply('‚ùå –£–∫–∞–∂–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: /check [nickname/id/–æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ]');
    }

    try {
        const userId = await getUserId(ctx, target);
        const username = await getUsername(ctx, userId);

        // –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –Ω–∞–∫–∞–∑–∞–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const { data: punishments, error } = await supabase
            .from('punishments')
            .select('*')
            .eq('telegram', userId);

        if (error) {
            return ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –Ω–∞–∫–∞–∑–∞–Ω–∏—è—Ö');
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—á–∞—Å—Ç–∏—è –≤ –∫–∞–Ω–∞–ª–µ –∏ —á–∞—Ç–µ
        const channelId = '@waynes_premium'; // –±–µ–∑ ID –∫–∞–Ω–∞–ª–∞
        const chatId = '-1001913079597'; // ID —á–∞—Ç–∞ 

        const isInChannel = await checkUserMembership(ctx, userId, channelId);
        const isInChat = await checkUserMembership(ctx, userId, chatId);

        // –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        let userInfo = `ID: ${userId}\n`;
        userInfo += `NickName: ${username}\n`;
        userInfo += `–°–æ—Å—Ç–æ–∏—Ç –≤ –¢–ì –∫–∞–Ω–∞–ª–µ: ${isInChannel ? '–î–∞' : '–ù–µ—Ç'}\n`;
        userInfo += `–°–æ—Å—Ç–æ–∏—Ç –≤ —á–∞—Ç–µ: ${isInChat ? '–î–∞' : '–ù–µ—Ç'}\n`;

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–∫–∞–∑–∞–Ω–∏–π
        const activePunishments = punishments.filter(punishment => {
            if (punishment.type === 'ban' || punishment.type === 'mute') {
                const endTime = new Date(punishment.time);
                return endTime > new Date(); // –ù–∞–∫–∞–∑–∞–Ω–∏–µ –µ—â–µ –∞–∫—Ç–∏–≤–Ω–æ
            }
            return false;
        });

        if (activePunishments.length > 0) {
            userInfo += '–ê–∫—Ç–∏–≤–Ω–æ–µ –Ω–∞–∫–∞–∑–∞–Ω–∏–µ:\n';
            activePunishments.forEach(punishment => {
                const endTime = new Date(punishment.time);
                const timeLeft = Math.ceil((endTime - new Date()) / (1000 * 60 * 60 * 24)); // –û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π
                userInfo += `- ${punishment.type === 'ban' ? '–ë–∞–Ω' : '–ú—É—Ç'}, ${timeLeft} ${punishment.type === 'ban' ? '–¥–Ω–µ–π' : '–º–∏–Ω—É—Ç'}, –ü—Ä–∏—á–∏–Ω–∞: ${punishment.reason}\n`;
            });
        } else {
            userInfo += '–ê–∫—Ç–∏–≤–Ω–æ–µ –Ω–∞–∫–∞–∑–∞–Ω–∏–µ: –ù–µ—Ç\n';
        }

        // –ò—Å—Ç–æ—Ä–∏—è –Ω–∞–∫–∞–∑–∞–Ω–∏–π
        if (punishments.length > 0) {
            userInfo += '–ò—Å—Ç–æ—Ä–∏—è –Ω–∞–∫–∞–∑–∞–Ω–∏–π:\n';
            punishments.forEach(punishment => {
                const endTime = new Date(punishment.time);
                const formattedDate = endTime.toLocaleDateString('ru-RU', {
                    year: 'numeric',
                    month: 'long',
                    day: 'numeric',
                });
                userInfo += `- ${punishment.type === 'ban' ? '–ë–∞–Ω' : punishment.type === 'mute' ? '–ú—É—Ç' : '–í–∞—Ä–Ω'}, ${punishment.type === 'ban' ? '–¥–Ω–µ–π' : punishment.type === 'mute' ? '–º–∏–Ω—É—Ç' : ''}, –ü—Ä–∏—á–∏–Ω–∞: ${punishment.reason}, –î–∞—Ç–∞ —Å–Ω—è—Ç–∏—è: ${formattedDate}\n`;
            });
        } else {
            userInfo += '–ò—Å—Ç–æ—Ä–∏—è –Ω–∞–∫–∞–∑–∞–Ω–∏–π: –ù–µ—Ç\n';
        }

        ctx.reply(userInfo);
    } catch (error) {
        ctx.reply(`‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
    }
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —É—á–∞—Å—Ç–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–∞–Ω–∞–ª–µ –∏–ª–∏ —á–∞—Ç–µ
async function checkUserMembership(ctx, userId, chatId) {
    try {
        const chatMember = await ctx.telegram.getChatMember(chatId, userId);
        const isMember = ['member', 'administrator', 'creator'].includes(chatMember.status);
        
        return isMember;
    } catch (error) {
        console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —É—á–∞—Å—Ç–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId} –≤ ${chatId}:`, error);
        return false;
    }
}

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
const paginationState = new Map();

// –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Å–µ—Å—Å–∏–π –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
setInterval(() => {
  const now = Date.now();
  for (const [key, value] of paginationState.entries()) {
    if (now - value.timestamp > 30 * 60 * 1000) { // 30 –º–∏–Ω—É—Ç TTL
      paginationState.delete(key);
    }
  }
}, 5 * 60 * 1000);

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ª–æ–≥–æ–≤ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
bot.command('logs', async (ctx) => {
  if (!(await checkModerator(ctx))) {
    return ctx.reply('üö´ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ');
  }

  // –ü–æ–º–æ—â—å –ø–æ –∫–æ–º–∞–Ω–¥–µ
  if (!ctx.message.text.includes('=')) {
    return ctx.reply(`
üìä –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ª–æ–≥–æ–≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:

/logs [—Ñ–∏–ª—å—Ç—Ä—ã] [page=N]

–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã:
telegram=[ID] - —Ñ–∏–ª—å—Ç—Ä –ø–æ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
type=[—Ç–∏–ø] - —Ç–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏ (shon_seller, clan_withdraw –∏ –¥—Ä.)
nickname=[–Ω–∏–∫] - —Ñ–∏–ª—å—Ç—Ä –ø–æ –Ω–∏–∫—É (—Ä–µ–≥–∏—Å—Ç—Ä–æ–Ω–µ–∑–∞–≤–∏—Å–∏–º—ã–π)
amount=[—á–∏—Å–ª–æ] - —Ç–æ—á–Ω–∞—è —Å—É–º–º–∞
amount_gt=[—á–∏—Å–ª–æ] - —Å—É–º–º–∞ –±–æ–ª—å—à–µ —á–µ–º
amount_lt=[—á–∏—Å–ª–æ] - —Å—É–º–º–∞ –º–µ–Ω—å—à–µ —á–µ–º
date_from=[YYYY-MM-DD] - –Ω–∞—á–∏–Ω–∞—è —Å –¥–∞—Ç—ã
date_to=[YYYY-MM-DD] - –∑–∞–∫–∞–Ω—á–∏–≤–∞—è –¥–∞—Ç–æ–π
page=[N] - –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 1)

–ü—Ä–∏–º–µ—Ä—ã:
/logs telegram=12345
/logs type=shon_seller date_from=2023-01-01 page=2
/logs nickname=Wayne amount_gt=100
`);
  }

  await sendFilteredHtmlReport(ctx);
});

function formatNumber(num) {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —á–∏—Å–ª–æ —Ü–µ–ª—ã–º
  return Number.isInteger(num) ? num.toString() : num.toFixed(2).replace(/\.?0+$/, '');
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ HTML-–æ—Ç—á–µ—Ç–∞ —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏ –∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
async function sendFilteredHtmlReport(ctx) {
  try {
    const args = ctx.message.text.split(' ').slice(1);
    const userId = ctx.from.id;
    const pageSize = 100; // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
    let page = 1;
    const pageArg = args.find(arg => arg.startsWith('page='));
    if (pageArg) {
      page = parseInt(pageArg.split('=')[1]) || 1;
      args.splice(args.indexOf(pageArg), 1); // –£–¥–∞–ª—è–µ–º page –∏–∑ —Ñ–∏–ª—å—Ç—Ä–æ–≤
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    const filterKey = `${userId}:${args.join('_')}`;
    
    let query = supabase
      .from('transactions')
      .select('telegram, nickname, type, amount, description, balance_after, date', { count: 'exact' })
      .order('date', { ascending: false })
      .limit(pageSize);

    // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
    args.forEach(arg => {
      const [key, value] = arg.split('=');
      if (!key || !value) return;

      switch(key) {
        case 'telegram':
          query = query.eq('telegram', parseInt(value));
          break;
        case 'type':
          query = query.eq('type', value);
          break;
        case 'nickname':
          query = query.ilike('nickname', `%${value}%`);
          break;
        case 'amount':
          query = query.eq('amount', parseFloat(value));
          break;
        case 'amount_gt':
          query = query.gt('amount', parseFloat(value));
          break;
        case 'amount_lt':
          query = query.lt('amount', parseFloat(value));
          break;
        case 'date_from':
          query = query.gte('date', `${value}T00:00:00`);
          break;
        case 'date_to':
          query = query.lte('date', `${value}T23:59:59`);
          break;
      }
    });

    // –î–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–π –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫—É—Ä—Å–æ—Ä–Ω—É—é –ø–∞–≥–∏–Ω–∞—Ü–∏—é
    if (page > 1) {
      const state = paginationState.get(filterKey);
      if (!state || !state.lastDate) {
        return ctx.reply('‚ö† –°–µ—Å—Å–∏—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏—Å—Ç–µ–∫–ª–∞ –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞. –ó–∞–ø—Ä–æ—Å–∏—Ç–µ –æ—Ç—á–µ—Ç –∑–∞–Ω–æ–≤–æ.');
      }
      query = query.lt('date', state.lastDate);
    }

    const { data, count, error } = await query;

    if (error) throw error;
    if (!data?.length) return ctx.reply('üîç –õ–æ–≥–æ–≤ –ø–æ —É–∫–∞–∑–∞–Ω–Ω—ã–º —Ñ–∏–ª—å—Ç—Ä–∞–º –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º lastDate –¥–ª—è –∫—É—Ä—Å–æ—Ä–Ω–æ–π –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    const lastDate = data[data.length - 1]?.date;
    paginationState.set(filterKey, { 
      args, 
      page,
      lastDate, // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞—Ç—É –ø–æ—Å–ª–µ–¥–Ω–µ–π –∑–∞–ø–∏—Å–∏
      timestamp: Date.now()
    });

    // –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü (–ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ)
    const totalPages = Math.ceil(count / pageSize);

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è HTML
    const html = `
<!DOCTYPE html>
<html>
<head>
  <meta charset="UTF-8">
  <title>–û—Ç—á–µ—Ç –ø–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º</title>
  <style>
    :root {
      --bg-color: #1a1a2e;
      --card-color: #16213e;
      --text-color: #e6e6e6;
      --accent-color: #4cc9f0;
      --positive-color: #4ade80;
      --negative-color: #f87171;
      --border-color: #2d3748;
    }
    
    body {
      font-family: 'Segoe UI', system-ui, sans-serif;
      margin: 0;
      padding: 20px;
      background-color: var(--bg-color);
      color: var(--text-color);
    }
    
    .container {
      max-width: 100%;
      margin: 0 auto;
      background-color: var(--card-color);
      border-radius: 12px;
      padding: 20px;
      box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    }
    
    h1 {
      color: var(--accent-color);
      margin-top: 0;
      font-weight: 600;
      border-bottom: 1px solid var(--border-color);
      padding-bottom: 10px;
    }
    
    table {
      width: 100%;
      border-collapse: collapse;
      margin: 20px 0;
      border-radius: 8px;
      overflow: hidden;
    }
    
    th {
      background-color: #1e293b;
      color: var(--accent-color);
      padding: 12px 15px;
      text-align: left;
      font-weight: 500;
      text-transform: uppercase;
      font-size: 0.85em;
      letter-spacing: 0.5px;
    }
    
    td {
      padding: 12px 15px;
      border-bottom: 1px solid var(--border-color);
    }
    
    tr:last-child td {
      border-bottom: none;
    }
    
    tr:hover {
      background-color: rgba(74, 201, 240, 0.05);
    }
    
    .negative {
      color: var(--negative-color);
      font-weight: 500;
    }
    
    .positive {
      color: var(--positive-color);
      font-weight: 500;
    }
    
    .summary {
      background-color: rgba(26, 32, 44, 0.7);
      padding: 15px;
      border-radius: 8px;
      margin: 20px 0;
      display: flex;
      flex-wrap: wrap;
      gap: 15px;
      border: 1px solid var(--border-color);
    }
    
    .summary p {
      margin: 5px 0;
      background-color: rgba(74, 201, 240, 0.1);
      padding: 8px 12px;
      border-radius: 6px;
      font-size: 0.9em;
    }
    
    .pagination {
      display: flex;
      justify-content: center;
      gap: 10px;
      margin-top: 20px;
    }
    
    .page-info {
      text-align: center;
      margin: 15px 0;
      color: #a0aec0;
      font-size: 0.9em;
    }
    
    .timestamp {
      font-size: 0.8em;
      color: #718096;
      text-align: right;
      margin-top: 20px;
    }
    
    @media (max-width: 768px) {
      td, th {
        padding: 8px 10px;
        font-size: 0.9em;
      }
      
      .summary {
        flex-direction: column;
        gap: 8px;
      }
    }

	.description-cell {
      max-width: 300px;
      white-space: normal;
      word-wrap: break-word;
      overflow-wrap: break-word;
    }
    
    .tooltip {
      position: relative;
      display: inline-block;
    }
    
    .tooltip .tooltiptext {
      visibility: hidden;
      width: 300px;
      background-color: #2d3748;
      color: #fff;
      text-align: center;
      border-radius: 6px;
      padding: 8px;
      position: absolute;
      z-index: 1;
      bottom: 125%;
      left: 50%;
      transform: translateX(-50%);
      opacity: 0;
      transition: opacity 0.3s;
    }
    
    .tooltip:hover .tooltiptext {
      visibility: visible;
      opacity: 1;
    }
  </style>
</head>
<body>
  <div class="container">
    <h1>üîç –û—Ç—á–µ—Ç –ø–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º</h1>
    
    <div class="summary">
      <p><strong>–í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π:</strong> ${count}</p>
      <p><strong>–ü–æ–∫–∞–∑–∞–Ω–æ:</strong> ${data.length} (${(page - 1) * pageSize + 1}-${Math.min(page * pageSize, count)})</p>
      <p><strong>–ü–µ—Ä–∏–æ–¥:</strong> ${formatDateTime(data[data.length-1].date)} - ${formatDateTime(data[0].date)}</p>
      ${args.length > 0 ? `<p><strong>–§–∏–ª—å—Ç—Ä—ã:</strong> ${args.join(', ')}</p>` : ''}
    </div>
    
    <table>
      <thead>
        <tr>
          <th>ID</th>
          <th>–ù–∏–∫</th>
          <th>–¢–∏–ø</th>
          <th>–°—É–º–º–∞</th>
          <th>–ë–∞–ª–∞–Ω—Å</th>
          <th>–î–∞—Ç–∞</th>
          <th>–û–ø–∏—Å–∞–Ω–∏–µ</th>
        </tr>
      </thead>
      <tbody>
      ${data.map(t => `
        <tr>
          <td><code>${t.telegram}</code></td>
          <td>${t.nickname || '<span style="color: #a0aec0">–ê–Ω–æ–Ω–∏–º</span>'}</td>
          <td><span style="color: ${getTypeColor(t.type)}">${t.type}</span></td>
          <td class="${t.amount < 0 ? 'negative' : 'positive'}">${formatNumber(t.amount)}</td>
			<td>${formatNumber(t.balance_after)}</td>
          <td>${formatDateTime(t.date)}</td>
          <td class="description-cell">
            <div class="tooltip">
              ${t.description.length > 50 ? 
                `${t.description.substring(0, 50)}...` : 
                t.description}
              ${t.description.length > 50 ? 
                `<span class="tooltiptext">${t.description}</span>` : 
                ''}
            </div>
          </td>
        </tr>
      `).join('')}
      </tbody>
    </table>
    
    <div class="page-info">
      –°—Ç—Ä–∞–Ω–∏—Ü–∞ ${page} –∏–∑ ${totalPages}
    </div>
    
    <div class="timestamp">
      –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ: ${formatDateTime(new Date().toISOString())}
    </div>
  </div>
</body>
</html>
    `;

    // –û—Ç–ø—Ä–∞–≤–∫–∞ HTML-—Ñ–∞–π–ª–∞
    await ctx.replyWithDocument({
      source: Buffer.from(html),
      filename: `transactions_${new Date().toISOString().slice(0,10)}.html`
    });

    // –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    const buttons = [];
    if (page > 1) {
      buttons.push(Markup.button.callback('‚¨Ö –ù–∞–∑–∞–¥', `prev_page:${filterKey}`));
    }
    if (page < totalPages) {
      buttons.push(Markup.button.callback('–í–ø–µ—Ä–µ–¥ ‚û°', `next_page:${filterKey}`));
    }

    if (buttons.length > 0) {
      await ctx.reply('–ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º:', Markup.inlineKeyboard(buttons));
    }

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞:', error);
    ctx.reply('‚ö† –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞');
  }
}

function getTypeColor(type) {
  const colors = {
    'shon_seller': '#4cc9f0',
    'clan_withdraw': '#f472b6',
    'deposit': '#a78bfa',
    'withdraw': '#f87171',
    'transfer': '#60a5fa'
  };
  return colors[type] || '#a0aec0';
}

function formatDateTime(dateString) {
  const date = new Date(dateString);
  
  // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –≤—Ä—É—á–Ω—É—é –¥–ª—è –µ–¥–∏–Ω–æ–æ–±—Ä–∞–∑–∏—è
  const day = String(date.getDate()).padStart(2, '0');
  const month = String(date.getMonth() + 1).padStart(2, '0');
  const year = date.getFullYear();
  const hours = String(date.getHours()).padStart(2, '0');
  const minutes = String(date.getMinutes()).padStart(2, '0');
  
  return `${day}.${month}.${year} ${hours}:${minutes}`;
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
bot.action(/^(prev_page|next_page):(.+)$/, async (ctx) => {
  if (!(await checkModerator(ctx))) {
    return ctx.answerCbQuery('üö´ –ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞', { show_alert: true });
  }

  const [action, filterKey] = ctx.match;
  const state = paginationState.get(filterKey);
  
  if (!state || Date.now() - state.timestamp > 30 * 60 * 1000) {
    return ctx.answerCbQuery('–°–µ—Å—Å–∏—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏—Å—Ç–µ–∫–ª–∞. –ó–∞–ø—Ä–æ—Å–∏—Ç–µ –æ—Ç—á–µ—Ç –∑–∞–Ω–æ–≤–æ.', { show_alert: true });
  }

  // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏ timestamp
  state.page = action === 'prev_page' ? state.page - 1 : state.page + 1;
  state.timestamp = Date.now();
  paginationState.set(filterKey, state);

  await ctx.deleteMessage();
  const command = `/logs ${state.args.join(' ')} page=${state.page}`;
  await ctx.reply(`–ó–∞–≥—Ä—É–∂–∞—é —Å—Ç—Ä–∞–Ω–∏—Ü—É ${state.page}... ${command}`);
  await sendFilteredHtmlReport(ctx);
});

bot.command('lllghauth', async (ctx) => {
    // –ü–æ–ª—É—á–∞–µ–º userId –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    const userId = ctx.from.id; // –ò—Å–ø–æ–ª—å–∑—É–µ–º ctx.from.id –≤–º–µ—Å—Ç–æ ctx.senderId

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–≤—è–∑–∫—É –∞–∫–∫–∞—É–Ω—Ç–∞ –≤ Supabase
    const { data: foundUser, error } = await supabase
        .from('users')
        .select('*')
        .eq('telegram', userId)
        .single();

    if (error || !foundUser) {
        return await ctx.reply('‚ö† –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ Telegram. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏.');
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–∏–≤—è–∑–∞–Ω –ª–∏ VK
    if (!foundUser.vk) {
        return await ctx.reply('‚ö† –í—ã –Ω–µ –ø—Ä–∏–≤—è–∑–∞–ª–∏ —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç VK –∫ Telegram.\n–ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞ https://vk.cc/cE1gYV –∏ –Ω–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /auth –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏.');
    }

    // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ WCoin –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞
    await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ WCoin –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ VK –±–æ—Ç:');
    
    // –û–∂–∏–¥–∞–µ–º —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    bot.on('text', async (msgCtx) => {
		if (msgCtx.chat.type === 'private') {
			// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç —Ç–æ–≥–æ –∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if (msgCtx.from.id === userId) {
            const wcoinAmount = parseInt(msgCtx.message.text, 10);
            
            if (!isNaN(wcoinAmount) && wcoinAmount > 0) {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ score
                if (foundUser.score < wcoinAmount) {
                    return await msgCtx.reply('‚ö† –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ WCoin –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞.');
                }

                // –í—ã—á–∏—Ç–∞–µ–º WCoin –∏–∑ score –≤ Supabase
                const newScore = foundUser.score - wcoinAmount;
                const { error: updateError } = await supabase
                    .from('users')
                    .update({ score: newScore })
                    .eq('telegram', userId);

                if (updateError) {
                    return await msgCtx.reply('‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ.');
                }

                // –î–æ–±–∞–≤–ª—è–µ–º WCoin –≤ SQLite
                await db.run(
                    'UPDATE users SET wcoin = wcoin + ? WHERE vk_id = ?',
                    [wcoinAmount, foundUser.vk],
                    (err) => {
                        if (err) {
                            console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è WCoin:', err);
                            return msgCtx.reply('‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ WCoin.');
                        } else {
                            return msgCtx.reply(`‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–æ ${wcoinAmount} WCoin –Ω–∞ —Å—á–µ—Ç –≤ VK –±–æ—Ç–∞.`);
                        }
                    }
                );
            } else {
                await msgCtx.reply('‚ö† –£–∫–∞–∑–∞–Ω–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ WCoin –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞.');
            }
        }
		}
	});
});

bot.launch()

async function sendVkNotification(vkUserId, message) {
	const vkMessage = {
		user_id: vkUserId,
		message: message,
		random_id: Math.floor(Math.random() * 100000)
	};

	await fetch(`https://api.vk.com/method/messages.send`, {
		method: 'POST',
		headers: {
			'Content-Type': 'application/json'
		},
		body: JSON.stringify({
			...vkMessage,
			v: '5.199', // –≤–µ—Ä—Å–∏—è API
			access_token: 'vk1.a.602MQ_cJzBYb8CqLTO2amczP1ffK7RqpFKUWswatVLAnc0MrwpePuCbYAffW3Bhlg35mtcgG3pl4UdqG8AHG_6G_mg-ku2nmrkRGmIkGU6VBu7PHVFAkbplwlmE6pN-Bp8kBjvqdsb4eq4daz8h030w2JNTOe8L78lw_1N8pnCxV9vybm7n_ldx2mD3b2-TzZQrxHAf6L2htnqJxFtzzEg' // –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ç–æ–∫–µ–Ω
		})
	});
}

async function handleAuthCommand(context, message) {
	const userId = context.senderId
	const args = message.split(' ')

	// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
	if (args.length < 2) {
		return await context.send(
			'–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /auth login [ID Telegram] –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞, /auth [–∫–æ–ª-–≤–æ WCoin] –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ WCoin –∏–ª–∏ /auth –ø—Ä–µ–¥–º–µ—Ç [–Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞] –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –ø—Ä–µ–¥–º–µ—Ç–∞ –≤ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.\n\nID –≤–∞—à–µ–≥–æ Telegram –∞–∫–∫–∞—É–Ω—Ç–∞ –º–æ–∂–Ω–æ —É–∑–Ω–∞—Ç—å –≤ –¢–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç–µ –ø–æ –∫–æ–º–∞–Ω–¥–µ /help.'
		)
	}

	const command = args[1]
	const input = args[2] // –ë–µ—Ä–µ–º –≤—Ç–æ—Ä–æ–π –∞—Ä–≥—É–º–µ–Ω—Ç –¥–ª—è ID Telegram, —Å—É–º–º—ã WCoin –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–∞

	if (command === 'login') {
		// –õ–æ–≥–∏–∫–∞ –ø—Ä–∏–≤—è–∑–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞ (–æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
		const telegramID = parseInt(input, 10)
		if (!isNaN(telegramID)) {
			// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–∏–≤—è–∑–∞–Ω –ª–∏ –∞–∫–∫–∞—É–Ω—Ç VK –∫ Telegram
			const { data: foundUserByVk, error: errorByVk } = await supabase
				.from('users')
				.select('*')
				.eq('vk', userId)
				.single()

			// –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º VK ID –∏ Telegram —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω, —Å–æ–æ–±—â–∞–µ–º –æ–± —ç—Ç–æ–º
			if (foundUserByVk && foundUserByVk.telegram) {
				return await context.send(
					'‚ö† –í–∞—à –∞–∫–∫–∞—É–Ω—Ç VK —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –∞–∫–∫–∞—É–Ω—Ç—É Telegram –∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä–∏–≤—è–∑–∞–Ω –ø–æ–≤—Ç–æ—Ä–Ω–æ.'
				)
			}

			// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–∏–≤—è–∑–∞–Ω –ª–∏ Telegram ID –∫ –¥—Ä—É–≥–æ–º—É VK
			const { data: foundUserByTelegram, error: errorByTelegram } =
				await supabase
					.from('users')
					.select('*')
					.eq('telegram', telegramID)
					.single()

			if (!foundUserByTelegram) {
				return await context.send(
					'‚ö† –£–∫–∞–∑–∞–Ω–Ω—ã–π ID Telegram –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤ —Å–ø–∏—Å–∫–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –≤ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏.'
				)
			}

			// –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º Telegram ID –∏ VK —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω, —Å–æ–æ–±—â–∞–µ–º –æ–± —ç—Ç–æ–º
			if (foundUserByTelegram && foundUserByTelegram.vk) {
				return await context.send(
					'‚ö† –≠—Ç–æ—Ç –∞–∫–∫–∞—É–Ω—Ç Telegram —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –¥—Ä—É–≥–æ–º—É –∞–∫–∫–∞—É–Ω—Ç—É VK.'
				)
			}

			// –í—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä–∏–≤—è–∑–∫—É
			const { error: updateError } = await supabase
				.from('users')
				.update({ vk: userId })
				.eq('telegram', telegramID)

			if (updateError) {
				return await context.send(
					'–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–≤—è–∑–∫–µ –∞–∫–∫–∞—É–Ω—Ç–∞. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ.'
				)
			}

			return await context.send(
				'‚úÖ –í–∞—à –∞–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ WCoin –∏–ª–∏ –ø—Ä–µ–¥–º–µ—Ç—ã —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥ /auth [–∫–æ–ª-–≤–æ WCoin] –∏–ª–∏ /auth –ø—Ä–µ–¥–º–µ—Ç [–Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞].'
			)
		} else {
			return await context.send('‚ö† –£–∫–∞–∑–∞–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID Telegram.')
		}
	} else if (command === '–ø—Ä–µ–¥–º–µ—Ç') {
		// –õ–æ–≥–∏–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ –ø—Ä–µ–¥–º–µ—Ç–∞
		const itemName = args.slice(2).join(' ') // –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞
		const transferQuantity = 10 // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞

		// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏–≤—è–∑–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞ –≤ Supabase
		const { data: foundUser, error } = await supabase
			.from('users')
			.select('*')
			.eq('vk', userId)
			.single()

		if (error || !foundUser || !foundUser.telegram) {
			return await context.send(
				'‚ö† –°–Ω–∞—á–∞–ª–∞ –ø—Ä–∏–≤—è–∂–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç —Å –ø–æ–º–æ—â—å—é /auth login [ID Telegram].'
			)
		}

		// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –ø—Ä–µ–¥–º–µ—Ç–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ VK
		db.get(
			'SELECT quantity FROM user_items WHERE user_id = ? AND item_name = ?',
			[userId, itemName],
			async (err, row) => {
				if (err) {
					console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø—Ä–µ–¥–º–µ—Ç–∞:', err)
					return await context.send('‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø—Ä–µ–¥–º–µ—Ç–∞.')
				}

				if (!row || row.quantity < transferQuantity) {
					return await context.send(
						`‚ö† –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ "${itemName}" –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ 10—à—Ç.`
					)
				}

				// –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ WCoin –¥–ª—è –∫–æ–º–∏—Å—Å–∏–∏
				const user = await getUser(userId)
				if (!user || user.wcoin < 100) {
					return await context.send(
						'‚ö† –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ WCoin –¥–ª—è –æ–ø–ª–∞—Ç—ã –∫–æ–º–∏—Å—Å–∏–∏ –∑–∞ –ø–µ—Ä–µ–≤–æ–¥. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ 100WCoin.'
					)
				}

				// –°–Ω–∏–º–∞–µ–º –∫–æ–º–∏—Å—Å–∏—é –∑–∞ –ø–µ—Ä–µ–≤–æ–¥
				db.run(
					'UPDATE users SET wcoin = wcoin - ? WHERE vk_id = ?',
					[100, userId],
					async err => {
						if (err) {
							console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–ø–∏—Å–∞–Ω–∏–∏ –∫–æ–º–∏—Å—Å–∏–∏:', err)
							return await context.send('‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–ø–∏—Å–∞–Ω–∏–∏ –∫–æ–º–∏—Å—Å–∏–∏.')
						}

						// –°–Ω–∏–º–∞–µ–º –ø—Ä–µ–¥–º–µ—Ç—ã —Å –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ VK
						db.run(
							'UPDATE user_items SET quantity = quantity - ? WHERE user_id = ? AND item_name = ?',
							[transferQuantity, userId, itemName],
							async err => {
								if (err) {
									console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–ø–∏—Å–∞–Ω–∏–∏ –ø—Ä–µ–¥–º–µ—Ç–æ–≤:', err)
									return await context.send('‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–ø–∏—Å–∞–Ω–∏–∏ –ø—Ä–µ–¥–º–µ—Ç–æ–≤.')
								}

								// –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–¥–º–µ—Ç—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö Supabase
								const { data: existingItem, error: itemError } = await supabase
									.from('items')
									.select('*')
									.eq('telegram', foundUser.telegram)
									.eq('nickname', user?.username)
									.eq('item_name', itemName)
									.single()

								if (itemError || !existingItem) {
									// –ï—Å–ª–∏ –ø—Ä–µ–¥–º–µ—Ç–∞ –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
									await supabase.from('items').insert([
										{
											telegram: foundUser.telegram,
											nickname: user?.username,
											item_name: itemName,
											quantity: transferQuantity,
										},
									])
								} else {
									// –ï—Å–ª–∏ –ø—Ä–µ–¥–º–µ—Ç –µ—Å—Ç—å, –æ–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
									await supabase
										.from('items')
										.update({
											quantity: existingItem.quantity + transferQuantity,
										})
										.eq('id', existingItem.id)
								}

								// –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
								await context.send(
									`‚úÖ –ü—Ä–µ–¥–º–µ—Ç "${itemName}" —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω –≤ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ. –° –≤–∞—Å —Å–ø–∏—Å–∞–Ω–æ 100 WCoin –∑–∞ –ø–µ—Ä–µ–≤–æ–¥.`
								)

								// –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram
								await sendTelegramNotification(
									foundUser.telegram,
									`‚úÖ –í–∞–º –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–æ ${transferQuantity} —à—Ç. –ø—Ä–µ–¥–º–µ—Ç–∞ "${itemName}" –∏–∑ VK.`
								)
							}
						)
					}
				)
			}
		)
	} else {
		// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∫ —Å—É–º–º—É WCoin
		const wcoinAmount = parseInt(command, 10)
		if (!isNaN(wcoinAmount) && wcoinAmount > 0) {
			const user = await getUser(userId)
			if (!user || user.wcoin < wcoinAmount) {
				return await context.send(
					'‚ö† –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ WCoin –∏–ª–∏ –≤—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã /reg.'
				)
			}

			// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏–≤—è–∑–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞ –≤ Supabase
			const { data: foundUser, error } = await supabase
				.from('users')
				.select('*')
				.eq('vk', userId)
				.single()

			if (error || !foundUser || !foundUser.telegram) {
				return await context.send(
					'‚ö† –°–Ω–∞—á–∞–ª–∞ –ø—Ä–∏–≤—è–∂–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç —Å –ø–æ–º–æ—â—å—é /auth login [ID Telegram].'
				)
			}

			// –ü–µ—Ä–µ–≤–æ–¥ WCoin
			const newScore = foundUser.score + wcoinAmount

			const { error: updateError } = await supabase
				.from('users')
				.update({ score: newScore })
				.eq('vk', userId)

			if (updateError) {
				return await context.send(
					'‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ.'
				)
			}

			// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≤ —Ç–∞–±–ª–∏—Ü—É transactions
			await supabase.from('transactions').insert([
				{
					telegram: foundUser.telegram,
					nickname: foundUser.nickname || '–ê–Ω–æ–Ω–∏–º',
					type: 'VK', // –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ
					amount: wcoinAmount,
					description: `–ü–µ—Ä–µ–≤–æ–¥ WCoin –∏–∑ VK –≤ Telegram`,
					balance_after: newScore,
					date: new Date().toISOString(),
				},
			])

			await sendTelegramNotification(
				foundUser.telegram,
				`‚úÖ –í–∞—à —Å—á–µ—Ç –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ ${wcoinAmount} WCoin –∏–∑ VK.`
			)

			db.run(
				'UPDATE users SET wcoin = wcoin - ? WHERE vk_id = ?',
				[wcoinAmount, userId],
				err => {
					if (err) {
						console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è WCoin:', err)
						return context.send('‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ WCoin.')
					} else {
						context.send(
							`‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–æ ${wcoinAmount} WCoin –Ω–∞ —Å—á–µ—Ç –≤ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.`
						)
					}
				}
			)
		} else {
			await context.send(
				'‚ö† –£–∫–∞–∑–∞–Ω–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ WCoin –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞.'
			)
		}
	}
}

async function sendTelegramNotification(telegramId, message) {
	const telegramMessage = {
		chat_id: telegramId,
		text: message,
		parse_mode: 'Markdown'
	};

	// –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ fetch –∏–ª–∏ –¥—Ä—É–≥—É—é –±–∏–±–ª–∏–æ—Ç–µ–∫—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ POST-–∑–∞–ø—Ä–æ—Å–∞ –∫ Telegram API
	await fetch(`https://api.telegram.org/bot7511515205:AAGgkdZPNdssJ2XrZl65Rzp190uIr3NqRAA/sendMessage`, {
		method: 'POST',
		headers: {
			'Content-Type': 'application/json'
		},
		body: JSON.stringify(telegramMessage)
	});
}

const db = new sqlite3.Database('users.db')

const oneHour = 3600 // 1 —á–∞—Å –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
const twoHours = 7200 // 2 —á–∞—Å–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
const userEnergy = {}; // –•—Ä–∞–Ω–µ–Ω–∏–µ —ç–Ω–µ—Ä–≥–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
const cooldownTime = 3600000; // 1 —á–∞—Å –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö

db.serialize(() => {
	db.run(
		`CREATE TABLE IF NOT EXISTS users (id INTEGER PRIMARY KEY, vk_id INTEGER, nickname TEXT, status TEXT, wcoin INTEGER, rating INTEGER DEFAULT 0, last_bonus_timestamp INTEGER DEFAULT 0, last_shovel_purchase_timestamp INTEGER DEFAULT 0, rewards INTEGER DEFAULT 0, referral_code TEXT, referred_by TEXT, referral_level INTEGER DEFAULT 1, completed_tasks TEXT DEFAULT '')`
	)

	db.run(
		'CREATE TABLE IF NOT EXISTS promocodes (code TEXT PRIMARY KEY, wcoin INTEGER)'
	)

	db.run(
		'CREATE TABLE IF NOT EXISTS used_promocodes (user_id INTEGER, code TEXT, PRIMARY KEY (user_id, code))'
	)

	db.run(
		'CREATE TABLE IF NOT EXISTS cases (id INTEGER PRIMARY KEY, vk_id INTEGER, common INTEGER DEFAULT 0, silver INTEGER DEFAULT 0, gold INTEGER DEFAULT 0, platinum INTEGER DEFAULT 0, wayne INTEGER DEFAULT 0)'
	)

	db.run(`CREATE TABLE IF NOT EXISTS rooms (
        id INTEGER PRIMARY KEY,
        room_name TEXT,
        creator_id INTEGER,
        wcoin_amount INTEGER,
        player1_id INTEGER,
        player2_id INTEGER,
        status TEXT DEFAULT 'open'
    )`)

	db.run(`CREATE TABLE IF NOT EXISTS referrals (
    	id INTEGER PRIMARY KEY AUTOINCREMENT,
    	referrer_vk_id INTEGER,
    	referred_vk_id INTEGER,
    	FOREIGN KEY(referrer_vk_id) REFERENCES users(vk_id),
    	FOREIGN KEY(referred_vk_id) REFERENCES users(vk_id)
  	)`)

	db.run(
		'CREATE TABLE IF NOT EXISTS shovels (id INTEGER PRIMARY KEY, vk_id INTEGER, common INTEGER DEFAULT 0, silver INTEGER DEFAULT 0, gold INTEGER DEFAULT 0, platinum INTEGER DEFAULT 0, wayne INTEGER DEFAULT 0)'
	)

	db.run(
		'CREATE TABLE IF NOT EXISTS user_items (user_id INTEGER, item_name TEXT, quantity INTEGER, PRIMARY KEY (user_id, item_name))'
	)

	db.run(
		'CREATE TABLE IF NOT EXISTS market (user_id INTEGER, item_name TEXT, quantity INTEGER, price INTEGER, PRIMARY KEY (user_id, item_name))'
	)

	db.run(`
        CREATE TABLE IF NOT EXISTS clans (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            name TEXT,
            creator_id INTEGER,
            balance INTEGER DEFAULT 0,
            wins INTEGER DEFAULT 0,
            losses INTEGER DEFAULT 0,
			health INTEGER DEFAULT 1000,
            last_battle_timestamp INTEGER DEFAULT 0,
			level INTEGER DEFAULT 1,
			required_items TEXT DEFAULT '{"level2": {"–≠–±–æ–Ω–∏—Ç–æ–≤—ã–π –º–µ—á": 2, "–≠–±–æ–Ω–∏—Ç–æ–≤–∞—è –±—Ä–æ–Ω—è": 2, "–ü–æ—Å–æ—Ö Wayne": 3}, "level3": {"–≠–±–æ–Ω–∏—Ç–æ–≤—ã–π –º–µ—á": 4, "–≠–±–æ–Ω–∏—Ç–æ–≤–∞—è –±—Ä–æ–Ω—è": 4, "–ü–æ—Å–æ—Ö Wayne": 5}}'
        )
    `)

	db.run(`
        CREATE TABLE IF NOT EXISTS clan_members (
            user_id INTEGER,
            clan_id INTEGER,
            PRIMARY KEY (user_id, clan_id)
        )
    `)

	db.run(`
        CREATE TABLE IF NOT EXISTS clan_battles (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            clan_id INTEGER NOT NULL,
            enemy_name TEXT NOT NULL,
            enemy_health INTEGER NOT NULL,
            clan_health INTEGER NOT NULL,
            last_battle_timestamp INTEGER NOT NULL,
            FOREIGN KEY (clan_id) REFERENCES clans(id)
        )
    `)

	db.run(`
    CREATE TABLE IF NOT EXISTS villages (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        name TEXT UNIQUE,
        health INTEGER,
        clan_id INTEGER,
        is_in_battle INTEGER DEFAULT 0,
		attacking_clan_id INTEGER DEFAULT NULL,
		income_per_min REAL DEFAULT 0,
		last_join_timestamp INTEGER DEFAULT NULL,
        FOREIGN KEY (clan_id) REFERENCES clans(id)
    )
`)

	db.run(`
    INSERT OR IGNORE INTO villages (name, health, clan_id, is_in_battle) VALUES 
    ('Waynes City', 1300, NULL, 0),
    ('–¢–∞–ª–æ—Ä–∏–Ω', 1300, NULL, 0),
    ('–°—Ç–∞—Ä—ã–π –•–µ–ª—å–º–¥–æ—Ä—Ñ', 1300, NULL, 0)
`)

	db.run(`
		CREATE TABLE IF NOT EXISTS crafted_items (
			user_id INTEGER,
			item_name TEXT,
			quantity INTEGER DEFAULT 1,
			PRIMARY KEY (user_id, item_name)
		)
	`)

	db.run(`
    CREATE TABLE IF NOT EXISTS clan_battle_requests (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        challenger_clan_id INTEGER NOT NULL,
        opponent_clan_id INTEGER NOT NULL,
        amount INTEGER NOT NULL,
        challenger_id INTEGER NOT NULL,
        FOREIGN KEY (challenger_clan_id) REFERENCES clans(id),
        FOREIGN KEY (opponent_clan_id) REFERENCES clans(id)
    )
`)

	db.run(`
    CREATE TABLE IF NOT EXISTS active_clan_wars (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        clan1_id INTEGER NOT NULL,
        clan2_id INTEGER NOT NULL,
        clan1_health INTEGER DEFAULT 1000,
        clan2_health INTEGER DEFAULT 1000,
        amount INTEGER NOT NULL,
        FOREIGN KEY (clan1_id) REFERENCES clans(id),
        FOREIGN KEY (clan2_id) REFERENCES clans(id)
    )
`)

	db.run(`
        CREATE TABLE IF NOT EXISTS fund (
    		balance INTEGER DEFAULT 0
		)
    `)

	db.run(`
        CREATE TABLE IF NOT EXISTS fund_contributions (
    		user_id INTEGER,
    		amount INTEGER,
    		FOREIGN KEY(user_id) REFERENCES users(vk_id)
		)
    `)

	db.run(`
        CREATE TABLE IF NOT EXISTS user_tasks (
    		vk_id INTEGER,
    		task_id INTEGER,
    		completed BOOLEAN DEFAULT 0,
    		PRIMARY KEY (vk_id, task_id)
		);
	`)

	db.run(`
		CREATE TABLE IF NOT EXISTS quests (
    		id INTEGER PRIMARY KEY,
    		text TEXT,
    		reward INTEGER
  		);
    `)
})

// Games

// Number

// –•—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –∏–≥—Ä—ã
let gameState = {
    isGameActive: false,  // –∏–¥–µ—Ç –ª–∏ –∏–≥—Ä–∞
    currentPlayer: null,  // id —Ç–µ–∫—É—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞
    players: [],          // —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏–≥—Ä—ã
    secretNumber: null,   // –∑–∞–≥–∞–¥–∞–Ω–Ω–æ–µ —á–∏—Å–ª–æ
    gameCreator: null,    // id —Å–æ–∑–¥–∞—Ç–µ–ª—è –∏–≥—Ä—ã
    minRange: 0,          // –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ
    maxRange: 300         // –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ
};

// –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã
function resetGameState() {
    gameState = {
        isGameActive: false,
        currentPlayer: null,
        players: [],
        secretNumber: null,
        gameCreator: null,
        minRange: 0,
        maxRange: 300
    };
}

// Item
const craftedItemsList = ['–≠–±–æ–Ω–∏—Ç–æ–≤—ã–π –º–µ—á', '–≠–±–æ–Ω–∏—Ç–æ–≤–∞—è –±—Ä–æ–Ω—è']

const itemList = [
	'–§—Ä–∞–≥–º–µ–Ω—Ç—ã WCoin',
	'–õ–µ–≥–∫–∞—è –∞–ø—Ç–µ—á–∫–∞',
	'–ë–æ–ª—å—à–∞—è –∞–ø—Ç–µ—á–∫–∞',
	'–ó–æ–ª–æ—Ç–æ–π –º–µ—á',
	'–í–µ–¥—Ä–æ –≤–æ–¥—ã',
	'–ü–æ—Å–æ—Ö Wayne',
	'–ó–µ–ª—å–µ –æ–≥–Ω—è',
	'–ü–ª–∞—Ç–∏–Ω–æ–≤–∞—è —Å—Ç—Ä–µ–ª–∞',
]

const craftingRecipes = {
	'–≠–±–æ–Ω–∏—Ç–æ–≤–∞—è –±—Ä–æ–Ω—è': {
		'–ó–µ–ª—å–µ –æ–≥–Ω—è': 6,
		'–ü–ª–∞—Ç–∏–Ω–æ–≤–∞—è —Å—Ç—Ä–µ–ª–∞': 7,
		'–ü–æ—Å–æ—Ö Wayne': 6
	},
	'–≠–±–æ–Ω–∏—Ç–æ–≤—ã–π –º–µ—á': {
		'–ó–æ–ª–æ—Ç–æ–π –º–µ—á': 6,
		'–í–µ–¥—Ä–æ –≤–æ–¥—ã': 5,
		'–ü–æ—Å–æ—Ö Wayne': 6
	},
	WCoin: {
		'–§—Ä–∞–≥–º–µ–Ω—Ç—ã WCoin': 25,
		'–ü–æ—Å–æ—Ö Wayne': 2,
	},
}

// Shovels
const shovelPrices = {
	–æ–±—ã—á–Ω–∞—è: 20,
	—Å–µ—Ä–µ–±—Ä—è–Ω–∞—è: 50,
	–∑–æ–ª–æ—Ç–∞—è: 100,
	–ø–ª–∞—Ç–∏–Ω–æ–≤–∞—è: 300,
	wayne–ª–æ–ø–∞—Ç–∞: 700,
}

const shovelRewards = {
	–æ–±—ã—á–Ω–∞—è: { attempts: 1, min: 15, max: 40 },
	—Å–µ—Ä–µ–±—Ä—è–Ω–∞—è: { attempts: 1, min: 45, max: 65 },
	–∑–æ–ª–æ—Ç–∞—è: { attempts: 1, min: 95, max: 120, case: '–æ–±—ã—á–Ω–∞—è' },
	–ø–ª–∞—Ç–∏–Ω–æ–≤–∞—è: { attempts: 1, min: 255, max: 330, case: '—Å–µ—Ä–µ–±—Ä—è–Ω–∞—è' },
	wayne–ª–æ–ø–∞—Ç–∞: { attempts: 1, min: 685, max: 730, case: '–∑–æ–ª–æ—Ç–∞—è' },
}

const shovelTypes = {
	–æ–±—ã—á–Ω–∞—è: 'common',
	—Å–µ—Ä–µ–±—Ä—è–Ω–∞—è: 'silver',
	–∑–æ–ª–æ—Ç–∞—è: 'gold',
	–ø–ª–∞—Ç–∏–Ω–æ–≤–∞—è: 'platinum',
	wayne–ª–æ–ø–∞—Ç–∞: 'wayne',
}

function getShovelType(command) {
	const shovelTypeMap = {
		common: '–æ–±—ã—á–Ω–∞—è',
		silver: '—Å–µ—Ä–µ–±—Ä—è–Ω–∞—è',
		gold: '–∑–æ–ª–æ—Ç–∞—è',
		platinum: '–ø–ª–∞—Ç–∏–Ω–æ–≤–∞—è',
		wayne: 'wayne–ª–æ–ø–∞—Ç–∞',
	}

	return shovelTypeMap[command]
}

// Cases
const caseRewards = {
	common: {
		rewards: [
			{ type: 'wcoin', amount: 150, dropChance: 0.8 },
			{ type: 'wcoin', amount: 200, dropChance: 0.7 },
			{ type: 'wcoin', amount: 250, dropChance: 0.7 },
			{ type: 'item', name: '40.000$', dropChance: 0.8 },
			{ type: 'item', name: '50.000$', dropChance: 0.6 },
			{ type: 'item', name: '60.000$', dropChance: 0.2 },
			{ type: 'item', name: '–ì–∏—Ç–∞—Ä–∞ –Ω–∞ —Å–ø–∏–Ω—É', dropChance: 0.2 },
			{ type: 'item', name: '–ë–∞–Ω–∞–Ω–∫–∞ "Supreme"', dropChance: 0.2 },
		],
	},
	silver: {
		rewards: [
			{ type: 'wcoin', amount: 450, dropChance: 0.8 },
			{ type: 'wcoin', amount: 550, dropChance: 0.7 },
			{ type: 'wcoin', amount: 700, dropChance: 0.7 },
			{ type: 'wcoin', amount: 800, dropChance: 0.7 },
			{ type: 'wcoin', amount: 900, dropChance: 0.7 },
			{ type: 'item', name: '60.000$', dropChance: 0.8 },
			{ type: 'item', name: '80.000$', dropChance: 0.4 },
			{ type: 'item', name: '110.000$', dropChance: 0.2 },
			{ type: 'item', name: '–©–µ–ª–∫—É–Ω—á–∏–∫ –Ω–∞ —Å–ø–∏–Ω—É', dropChance: 0.05 },
			{ type: 'item', name: '–ö—Ä–µ—Å—Ç –Ω–∞ —Å–ø–∏–Ω—É', dropChance: 0.05 },
		],
	},
	gold: {
		rewards: [
			{ type: 'wcoin', amount: 450, dropChance: 0.8 },
			{ type: 'wcoin', amount: 500, dropChance: 0.7 },
			{ type: 'wcoin', amount: 750, dropChance: 0.7 },
			{ type: 'wcoin', amount: 800, dropChance: 0.7 },
			{ type: 'wcoin', amount: 900, dropChance: 0.7 },
			{ type: 'wcoin', amount: 1000, dropChance: 0.7 },
			{ type: 'wcoin', amount: 1100, dropChance: 0.7 },
			{ type: 'item', name: '130.000$', dropChance: 0.4 },
			{ type: 'item', name: '150.000$', dropChance: 0.3 },
			{ type: 'item', name: '190.000$', dropChance: 0.2 },
			{ type: 'item', name: '–ú–∏—à–∫–∞ –Ω–∞ —Å–ø–∏–Ω—É', dropChance: 0.05 },
			{ type: 'item', name: '–ö–æ–Ω—Ñ–µ—Ç–∞ –Ω–∞ —Å–ø–∏–Ω—É', dropChance: 0.05 },
		],
	},
	platinum: {
		rewards: [
			{ type: 'wcoin', amount: 1700, dropChance: 0.8 },
			{ type: 'wcoin', amount: 1900, dropChance: 0.7 },
			{ type: 'wcoin', amount: 2200, dropChance: 0.7 },
			{ type: 'wcoin', amount: 2300, dropChance: 0.7 },
			{ type: 'wcoin', amount: 2400, dropChance: 0.7 },
			{ type: 'wcoin', amount: 2500, dropChance: 0.7 },
			{ type: 'wcoin', amount: 2600, dropChance: 0.7 },
			{ type: 'wcoin', amount: 2700, dropChance: 0.7 },
			{ type: 'item', name: '200.000$', dropChance: 0.4 },
			{ type: 'item', name: '300.000$', dropChance: 0.3 },
			{ type: 'item', name: '400.000$', dropChance: 0.2 },
			{ type: 'item', name: '–§—Ä–µ–¥–¥–∏', dropChance: 0.05 },
			{ type: 'item', name: '–ê–π—Å–º–µ–Ω', dropChance: 0.05 },
		],
	},
	wayne: {
		rewards: [
			{ type: 'wcoin', amount: 2500, dropChance: 0.8 },
			{ type: 'wcoin', amount: 2900, dropChance: 0.7 },
			{ type: 'wcoin', amount: 3200, dropChance: 0.7 },
			{ type: 'wcoin', amount: 3300, dropChance: 0.7 },
			{ type: 'wcoin', amount: 3400, dropChance: 0.7 },
			{ type: 'wcoin', amount: 4000, dropChance: 0.7 },
			{ type: 'wcoin', amount: 5000, dropChance: 0.7 },
			{ type: 'wcoin', amount: 6000, dropChance: 0.7 },
			{ type: 'wcoin', amount: 7000, dropChance: 0.7 },
			{ type: 'item', name: '700.000$', dropChance: 0.5 },
			{ type: 'item', name: '820.000$', dropChance: 0.4 },
			{ type: 'item', name: '900.000$', dropChance: 0.3 },
			{ type: 'item', name: '–î—Ä–µ–π–∫', dropChance: 0.05 },
		],
	},
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–∞–¥–µ–Ω–∏—è –Ω–∞–≥—Ä–∞–¥—ã
const dropReward = (caseType) => {
    const rewards = caseRewards[caseType].rewards;
    const totalChance = rewards.reduce((acc, reward) => acc + reward.dropChance, 0);
    const chance = Math.random() * totalChance; // –°–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ totalChance

    let current = 0;
    for (const reward of rewards) {
        if (current <= chance && chance < current + reward.dropChance) {
            return reward; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—ã–ø–∞–≤—à—É—é –Ω–∞–≥—Ä–∞–¥—É
        }
        current += reward.dropChance;
    }
    return null; // –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –≤—ã–ø–∞–ª–æ
};

const caseTypes = {
	–æ–±—ã—á–Ω—ã–π: 'common',
	—Å–µ—Ä–µ–±—Ä—è–Ω—ã–π: 'silver',
	–∑–æ–ª–æ—Ç–æ–π: 'gold',
	–ø–ª–∞—Ç–∏–Ω–æ–≤—ã–π: 'platinum',
	wayne: 'wayne',
}

const registrationStates = {}
const promoCodes = {}

const statuses = [
	'–Ø—Ä–∫–∏–π',
	'–õ—é–±–æ–ø—ã—Ç–Ω—ã–π',
	'–û–ø—ã—Ç–Ω—ã–π',
	'–ö—Ä–∏—Å—Ç–∞–ª–ª–∏—á–µ—Å–∫–∏–π –∏–Ω—Å–∞–π—Ç',
	'–ê–ª–º–∞–∑–Ω—ã–π —Å–∞–º–±—É—Ñ–µ—Ä',
	'–¢–æ–ø–æ–≤—ã–π —Ä–µ—Ñ–µ—Ä',
	'Gang',
	'Mafia',
	'–ö–æ–ø',
	'–£—á–∏—Ç–µ–ª—å',
	'–ú–µ–¥–∏–∫',
	'–¢—Ä–µ–π–¥–µ—Ä',
	'–£—Å—Ç–æ–π—á–∏–≤—ã–π –ø—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—å',
	'Bitcoin',
	'Ton',
	'–ú–∏–ª–ª–∏–æ–Ω–µ—Ä',
	'–§–∞—Ä–º–∏—Å—Ç WCoins',
	'–ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç',
	'Gamer',
	'–Æ—Ä–∏—Å—Ç',
	'–ö–ª–∞–Ω–æ–≤–æ–¥',
]

function generateReferralCode() {
	return Math.random().toString(36).substring(2, 8) // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π –∫–æ–¥
}

async function generateReferralCodeOld(userId) {
	const referralCode = `code_${userId}` // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–¥–∞, –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª—é–±–æ–π –∞–ª–≥–æ—Ä–∏—Ç–º
	await new Promise((resolve, reject) => {
		db.run(
			'UPDATE users SET referral_code = ? WHERE vk_id = ?',
			[referralCode, userId],
			err => {
				if (err) reject(err)
				else resolve()
			}
		)
	})
	return referralCode
}

// Randomaizer (1 Cases) (2 Shovels)
function getRandomReward(caseType) {
	const rewards = caseRewards[caseType]
	const allRewards = rewards.wcoin.concat(rewards.items)
	const randomIndex = Math.floor(Math.random() * allRewards.length)
	const reward = allRewards[randomIndex]
	console.log(`–°–ª—É—á–∞–π–Ω–æ–µ –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ: ${reward}`)
	return reward
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –ø—Ä–∏–∑–∞
function calculateReward(shovel) {
	const min = shovel.min
	const max = shovel.max
	const reward = Math.floor(Math.random() * (max - min + 1)) + min
	return reward
}

// Account
// –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ WCoin
async function updateUserWcoin(userId, amount, vkID, wcoinChange, fromMessage = false) {
	const user = await getUser(userId)
	const newWcoin = user.wcoin + wcoinChange

	// –ï—Å–ª–∏ —ç—Ç–æ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ –∑–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
	if (fromMessage && user.status !== '–Ø—Ä–∫–∏–π' && user.status !== '–õ—é–±–æ–ø—ã—Ç–Ω—ã–π') {
		return // –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç, –Ω–µ –Ω–∞—á–∏—Å–ª—è–µ–º WCoin –∑–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
	}

	if (user.telegram) {
        await supabase
            .from('users')
            .update({ score: newWcoin })
            .eq('vk', vkID)
    }

	// –ù–∞—á–∏—Å–ª—è–µ–º WCoin
	return new Promise((resolve, reject) => {
		db.run(
			'UPDATE users SET wcoin = wcoin + ? WHERE vk_id = ?',
			[amount, userId],
			err => {
				if (err) reject(err)
				else resolve()
			}
		)
	})
}

async function handleMessage(context) {
	const userId = context.senderId
	const amount = 1 // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ WCoin –∑–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ

	// –ù–∞—á–∏—Å–ª—è–µ–º WCoin —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å—Ç–∞—Ç—É—Å "–Ø—Ä–∫–∏–π" –∏–ª–∏ "–õ—é–±–æ–ø—ã—Ç–Ω—ã–π"
	await updateUserWcoin(userId, amount, true) // –ü–µ—Ä–µ–¥–∞–µ–º true –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function getUserStatus(vk_id) {
    return new Promise((resolve, reject) => {
        db.get("SELECT status FROM users WHERE vk_id = ?", [vk_id], (err, row) => {
            if (err) return reject(err);
            resolve(row ? row.status : null);
        });
    });
}

async function updateUserStatus(userId, rating, context) {
	const user = await getUser(userId)
	let newStatus = user.status // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å
	let rewardWcoin = 0 // –ù–∞–≥—Ä–∞–¥–∞ –∑–∞ –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å

	// –°–ø–∏—Å–æ–∫ —Å—Ç–∞—Ç—É—Å–æ–≤, –¥–ª—è –∫–æ—Ç–æ—Ä—ã—Ö –∑–∞–ø—Ä–µ—â–µ–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∏–µ
	const restrictedStatuses = [
		'–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä',
		'–ö—Ä–∏—Å—Ç–∞–ª–ª–∏—á–µ—Å–∫–∏–π –∏–Ω—Å–∞–π—Ç',
		'–ê–ª–º–∞–∑–Ω—ã–π —Å–∞–º–±—É—Ñ–µ—Ä',
		'–¢–æ–ø–æ–≤—ã–π —Ä–µ—Ñ–µ—Ä',
		'Gang',
		'Mafia',
		'–ö–æ–ø',
		'–£—á–∏—Ç–µ–ª—å',
		'–ú–µ–¥–∏–∫',
		'–¢—Ä–µ–π–¥–µ—Ä',
		'–£—Å—Ç–æ–π—á–∏–≤—ã–π –ø—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—å',
		'Bitcoin',
		'Ton',
		'–ú–∏–ª–ª–∏–æ–Ω–µ—Ä',
		'–§–∞—Ä–º–∏—Å—Ç WCoins',
		'–ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç',
		'Gamer',
		'–Æ—Ä–∏—Å—Ç',
		'–ö–ª–∞–Ω–æ–≤–æ–¥',
	]

	// –ü—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å–ª–∏ —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤—Ö–æ–¥–∏—Ç –≤ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ, –Ω–µ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∏ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
	if (restrictedStatuses.includes(user.status)) {
		return user.status // –¢–∏—Ö–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
	}

	// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–π—Ç–∏–Ω–≥–∞
	if (rating >= 600 && user.status !== '–û–ø—ã—Ç–Ω—ã–π') {
		newStatus = '–û–ø—ã—Ç–Ω—ã–π'
		rewardWcoin = 800 // –ù–∞–≥—Ä–∞–¥–∞ –∑–∞ —Å—Ç–∞—Ç—É—Å "–û–ø—ã—Ç–Ω—ã–π"
	} else if (rating >= 200 && user.status === '–Ø—Ä–∫–∏–π') {
		newStatus = '–õ—é–±–æ–ø—ã—Ç–Ω—ã–π'
		rewardWcoin = 300 // –ù–∞–≥—Ä–∞–¥–∞ –∑–∞ —Å—Ç–∞—Ç—É—Å "–õ—é–±–æ–ø—ã—Ç–Ω—ã–π"
	} else if (rating < 200 && user.status === '–õ—é–±–æ–ø—ã—Ç–Ω—ã–π') {
		newStatus = '–Ø—Ä–∫–∏–π'
	}

	// –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–∏–ª—Å—è, –æ–±–Ω–æ–≤–ª—è–µ–º –µ–≥–æ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏ –Ω–∞—á–∏—Å–ª—è–µ–º –Ω–∞–≥—Ä–∞–¥—É
	if (newStatus !== user.status) {
		await db.run('UPDATE users SET status = ? WHERE vk_id = ?', [
			newStatus,
			userId,
		])

		// –ù–∞—á–∏—Å–ª—è–µ–º WCoin, –µ—Å–ª–∏ –µ—Å—Ç—å –Ω–∞–≥—Ä–∞–¥–∞ –∑–∞ –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å
		if (rewardWcoin > 0) {
			await updateUserWcoin(userId, rewardWcoin)

			// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
			await context.send(
				`${await getUserMention(
					userId
				)}, –ø–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ —Å—Ç–∞—Ç—É—Å–∞ "${newStatus}" –∏ –ø–æ–ª—É—á–∏–ª–∏ ${rewardWcoin} WCoin! üéâ`
			)
		}
	}

	return newStatus
}

async function updateUserNickname(vk_id, newNickname) {
	return new Promise((resolve, reject) => {
		const stmt = db.prepare('UPDATE users SET nickname = ? WHERE vk_id = ?')
		stmt.run(newNickname, vk_id, function (err) {
			if (err) {
				reject(err)
			} else {
				console.log(`–ù–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${vk_id} –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ ${newNickname}`)
				resolve()
			}
		})
		stmt.finalize()
	})
}

async function updateUserRewards(vk_id, reward) {
	return new Promise((resolve, reject) => {
		const stmt = db.prepare(
			'UPDATE users SET wcoin = wcoin + ? WHERE vk_id = ?'
		)
		stmt.run(reward, vk_id, function (err) {
			if (err) {
				reject(err)
			} else {
				console.log(`–û–±–Ω–æ–≤–ª–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ WCoin –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${vk_id}`)
				resolve()
			}
		})
		stmt.finalize()
	})
}

async function resolveUserId(target) {
	if (target.startsWith('https://vk.com/')) {
		const screenName = target.replace('https://vk.com/', '')
		try {
			const response = await vk.api.utils.resolveScreenName({
				screen_name: screenName,
			})
			if (response.type === 'user') {
				return response.object_id
			}
		} catch (error) {
			console.error('Error resolving user ID by profile link:', error)
		}
	} else if (target.startsWith('@')) {
		const screenName = target.slice(1)
		try {
			const response = await vk.api.users.get({ user_ids: screenName })
			if (response.length > 0) {
				return response[0].id
			}
		} catch (error) {
			console.error('Error resolving user ID by @mention:', error)
		}
	} else if (!isNaN(target)) {
		return parseInt(target, 10)
	} else {
		try {
			const response = await vk.api.utils.resolveScreenName({
				screen_name: target,
			})
			if (response.type === 'user') {
				return response.object_id
			}
		} catch (error) {
			console.error('Error resolving user ID by profile name:', error)
		}
	}
	return null
}

async function getUserByName(username) {
	return new Promise((resolve, reject) => {
		db.get(
			'SELECT vk_id FROM users WHERE nickname = ?',
			[username],
			(err, row) => {
				if (err) {
					console.error(err)
					reject('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ.')
				} else {
					resolve(row)
				}
			}
		)
	})
}

async function getUser(vk_id) {
	return new Promise((resolve, reject) => {
		db.get(
			`
            SELECT u.*, 
                   (SELECT c.name FROM clans c
                    JOIN clan_members cm ON c.id = cm.clan_id
                    WHERE cm.user_id = u.vk_id
                    LIMIT 1) AS clan_name
            FROM users u
            WHERE u.vk_id = ?
            `,
			[vk_id],
			(err, row) => {
				if (err) {
					reject(err)
				} else {
					// –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º null
					if (!row) {
						resolve(null)
					} else {
						// –ï—Å–ª–∏ last_shovel_purchase_timestamp –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –µ–≥–æ –≤ 0
						if (!row.last_shovel_purchase_timestamp) {
							row.last_shovel_purchase_timestamp = 0
						}
						resolve(row)
					}
				}
			}
		)
	})
}

async function addUser(vk_id, nickname, status, wcoin, referralCode) {
	return new Promise((resolve, reject) => {
		db.run(
			'INSERT INTO users (vk_id, nickname, status, wcoin, referral_code, rating) VALUES (?, ?, ?, ?, ?, ?)',
			[vk_id, nickname, status, wcoin, referralCode, 0], // –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—á–∏–Ω–∞–µ—Ç —Å 0 —Ä–µ–π—Ç–∏–Ω–≥–∞
			function (err) {
				if (err) reject(err)
				else resolve()
			}
		)
	})
}

async function getAllUsers() {
	return new Promise((resolve, reject) => {
		db.all('SELECT * FROM users', (err, rows) => {
			if (err) {
				reject(err)
			} else {
				resolve(rows)
			}
		})
	})
}

async function getUserWcoin(userId) {
	return new Promise((resolve, reject) => {
		db.get(`SELECT wcoin FROM users WHERE vk_id = ?`, [userId], (err, row) => {
			if (err) {
				reject(err)
				return
			}
			resolve(row ? row.wcoin : 0)
		})
	})
}

async function getUserNickname(vk_id) {
	return new Promise((resolve, reject) => {
		db.get(
			`SELECT nickname FROM users WHERE vk_id = ?`,
			[vk_id],
			(err, row) => {
				if (err) {
					reject(err)
					return
				}
				resolve(row ? row.nickname : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
			}
		)
	})
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ handle –≤—ã–¥–∞—á–∏ WCoin
async function handleGrantWcoin(context, target, wcoinAmount) {
	const wcoin = parseInt(wcoinAmount, 10)
	const userId = context.senderId

	if (isNaN(wcoin) || !target) {
		await context.send(
			`${await getUserMention(
				userId
			)}, ‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /–≤—ã–¥–∞—Ç—å [ID/@—Å—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å(–∑–∞—Ç–µ–º "@" —É–±–µ—Ä–∏—Ç–µ)] [—Å—É–º–º–∞]`
		)
		return
	}

	const targetUserId = await resolveUserId(target)
	if (!targetUserId) {
		await context.send(
			`${await getUserMention(userId)}, üóø –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.`
		)
		return
	}

	const targetUser = await getUser(targetUserId)
	if (targetUser) {
		await updateUserWcoin(targetUser.vk_id, wcoin)
		const updatedUser = await getUser(targetUser.vk_id)
		await context.send(
			`${await getUserMention(userId)}, üí∏ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${
				targetUser.nickname
			} –¥–æ–±–∞–≤–ª–µ–Ω–æ ${wcoin} WCoin. –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: ${updatedUser.wcoin} WCoin.`
		)
	} else {
		await context.send(
			`${await getUserMention(userId)}, üóø –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.`
		)
	}
}

// Promocode

async function addPromocode(code, wcoin) {
	return new Promise((resolve, reject) => {
		const stmt = db.prepare(
			'INSERT INTO promocodes (code, wcoin) VALUES (?, ?)'
		)
		stmt.run(code, wcoin, function (err) {
			if (err) {
				reject(err)
			} else {
				console.log(`–î–æ–±–∞–≤–ª–µ–Ω –ø—Ä–æ–º–æ–∫–æ–¥ ${code} —Å WCoin: ${wcoin}`)
				resolve()
			}
		})
		stmt.finalize()
	})
}

async function getPromocode(code) {
	return new Promise((resolve, reject) => {
		db.get('SELECT * FROM promocodes WHERE code = ?', [code], (err, row) => {
			if (err) {
				reject(err)
			} else {
				resolve(row)
			}
		})
	})
}

async function deletePromocode(code) {
	return new Promise((resolve, reject) => {
		const stmt = db.prepare('DELETE FROM promocodes WHERE code = ?')
		stmt.run(code, function (err) {
			if (err) {
				reject(err)
			} else {
				console.log(`–£–¥–∞–ª–µ–Ω –ø—Ä–æ–º–æ–∫–æ–¥ ${code}`)
				resolve()
			}
		})
		stmt.finalize()
	})
}

async function hasUsedPromocode(user_id, code) {
	return new Promise((resolve, reject) => {
		db.get(
			'SELECT 1 FROM used_promocodes WHERE user_id = ? AND code = ?',
			[user_id, code],
			(err, row) => {
				if (err) {
					reject(err)
				} else {
					resolve(!!row)
				}
			}
		)
	})
}

async function markPromocodeAsUsed(user_id, code) {
	return new Promise((resolve, reject) => {
		const stmt = db.prepare(
			'INSERT INTO used_promocodes (user_id, code) VALUES (?, ?)'
		)
		stmt.run(user_id, code, function (err) {
			if (err) {
				reject(err)
			} else {
				resolve()
			}
		})
		stmt.finalize()
	})
}

// Bonus and Interval shovels

async function updateLastBonusTimestamp(vk_id, timestamp) {
	return new Promise((resolve, reject) => {
		const stmt = db.prepare(
			'UPDATE users SET last_bonus_timestamp = ? WHERE vk_id = ?'
		)
		stmt.run(timestamp, vk_id, function (err) {
			if (err) {
				reject(err)
			} else {
				resolve()
			}
		})
		stmt.finalize()
	})
}

async function updateLastShovelPurchaseTimestamp(vk_id, timestamp) {
	return new Promise((resolve, reject) => {
		const stmt = db.prepare(
			'UPDATE users SET last_shovel_purchase_timestamp = ? WHERE vk_id = ?'
		)
		stmt.run(timestamp, vk_id, function (err) {
			if (err) {
				reject(err)
			} else {
				resolve()
			}
		})
		stmt.finalize()
	})
}

async function getTimestampNow() {
	return Math.floor(Date.now() / 1000) // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π timestamp –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
}

async function handleBonusCommand(context) {
	const userId = context.senderId
	const user = await getUser(userId)

	if (!user) {
		await context.send(
			`${await getUserMention(
				userId
			)}, üìÑ –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ù–∞–ø–∏—à–∏—Ç–µ "/reg", —á—Ç–æ–±—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è.`
		)
		return
	}

	const currentTimestamp = await getTimestampNow()
	const lastBonusTimestamp = user.last_bonus_timestamp

	if (currentTimestamp < lastBonusTimestamp + oneHour) {
		const secondsUntilNextBonus =
			lastBonusTimestamp + oneHour - currentTimestamp
		const minutesUntilNextBonus = Math.ceil(secondsUntilNextBonus / 60)
		await context.send(
			`${await getUserMention(
				userId
			)}, üóø –í—ã —É–∂–µ –ø–æ–ª—É—á–∏–ª–∏ –±–æ–Ω—É—Å. –°–ª–µ–¥—É—é—â–∏–π –±–æ–Ω—É—Å –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω —á–µ—Ä–µ–∑ ${minutesUntilNextBonus} –º–∏–Ω—É—Ç.`
		)
	} else {
		const bonusAmount = 35
		await updateUserWcoin(userId, bonusAmount)
		await updateLastBonusTimestamp(userId, currentTimestamp)

		// Add random item bonus
		const randomItem = itemList[Math.floor(Math.random() * itemList.length)]
		const quantity = Math.floor(Math.random() * 3) + 1
		await updateUserItems(userId, randomItem, quantity)

		const updatedUser = await getUser(userId)
		await context.send(
			`${await getUserMention(
				userId
			)}, üåü –í—ã –ø–æ–ª—É—á–∏–ª–∏ 35 WCoin –∏ ${quantity} —à—Ç. ${randomItem}! –¢–µ–ø–µ—Ä—å —É –≤–∞—Å ${
				updatedUser.wcoin
			} WCoin.`
		)
	}
}

// Hi and link

async function getUserMention(vk_id) {
	const user = await getUser(vk_id)
	if (user) {
		return `[id${vk_id}|${user.nickname}]`
	} else {
		return `[id${vk_id}|–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å]` // fallback, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω
	}
}

// –û–±—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function handleUserJoin(context, userId) {
	if (userId !== context.senderId) {
		const userMention = await getUserMention(userId)
		await context.send(
			`–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ${userMention}!\n\n–ú—ã —Ä–∞–¥—ã, —á—Ç–æ —Ç—ã –≤—ã–±—Ä–∞–ª –Ω–∞—Å. –°–∫–æ—Ä–µ–π —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Å—è –≤ –Ω–∞—à–µ–º –±–æ—Ç–µ –ø–æ –∫–æ–º–∞–Ω–¥–µ "/reg", –≤–ø–∏—Å—ã–≤–∞–π –ø—Ä–æ–º–æ–∫–æ–¥ ‚Äî "#waynes" –∏ –ø–æ–ª—É—á–∞–π –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∫–µ–π—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∏–∑–∞!\n–ß–µ–º –±–æ–ª—å—à–µ —Ç—ã –æ–±—â–∞–µ—à—å—Å—è –≤ –Ω–∞—à–µ–º –±–æ—Ç–µ, —Ç–µ–º –±–æ–ª—å—à–µ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–µ—à—å WCoin, –ø–æ–∫—É–ø–∞–π –∫–µ–π—Å—ã –∏ –ø–æ–ª—É—á–∞–π –ø—Ä–∏–∑—ã!`
		)
	}
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è, –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏–≥–ª–∞—à–∞—é—Ç –≤ —á–∞—Ç
vk.updates.on('chat_invite_user', async context => {
	try {
		console.log('chat_invite_user event detected')
		const userId = context.eventMemberId
		await handleUserJoin(context, userId)
	} catch (error) {
		console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–±—ã—Ç–∏—è chat_invite_user:', error)
	}
})

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è, –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ö–æ–¥–∏—Ç –≤ —á–∞—Ç –ø–æ —Å—Å—ã–ª–∫–µ
vk.updates.on('chat_join_user', async context => {
	try {
		console.log('chat_join_user event detected')
		const userId = context.memberId
		await handleUserJoin(context, userId)
	} catch (error) {
		console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–±—ã—Ç–∏—è chat_join_user:', error)
	}
})

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è, –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏–≥–ª–∞—à–∞—é—Ç –≤ —á–∞—Ç –ø–æ —Å—Å—ã–ª–∫–µ
vk.updates.on('chat_invite_user_by_link', async context => {
	try {
		console.log('chat_invite_user_by_link event detected')
		const userId = context.memberId
		await handleUserJoin(context, userId)
	} catch (error) {
		console.error(
			'–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–±—ã—Ç–∏—è chat_invite_user_by_link:',
			error
		)
	}
})

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è, –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏–≥–ª–∞—à–∞—é—Ç –≤ —á–∞—Ç —á–µ—Ä–µ–∑ —Å–æ–æ–±—â–µ–Ω–∏–µ
vk.updates.on('chat_invite_user_by_message_request', async context => {
	try {
		console.log('chat_invite_user_by_message_request event detected')
		const userId = context.memberId
		await handleUserJoin(context, userId)
	} catch (error) {
		console.error(
			'–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–±—ã—Ç–∏—è chat_invite_user_by_message_request:',
			error
		)
	}
})

// Event
async function getUserTaskStatus(userId, taskId) {
	return new Promise((resolve, reject) => {
		db.get(
			'SELECT completed FROM user_tasks WHERE vk_id = ? AND task_id = ?',
			[userId, taskId],
			(err, row) => {
				if (err) reject(err)
				else resolve(row || { completed: false })
			}
		)
	})
}

async function markTaskAsCompleted(userId, taskId) {
	return new Promise((resolve, reject) => {
		db.run(
			'INSERT OR REPLACE INTO user_tasks (vk_id, task_id, completed) VALUES (?, ?, 1)',
			[userId, taskId],
			err => {
				if (err) reject(err)
				else resolve()
			}
		)
	})
}

function loadQuests() {
	return new Promise((resolve, reject) => {
		db.all('SELECT * FROM quests', [], (err, rows) => {
			if (err) return reject(err)
			rows.forEach(row => {
				quests[row.id] = { text: row.text, reward: row.reward }
			})
			resolve()
		})
	})
}

loadQuests()
	.then(() => {
		console.log('–ó–∞–¥–∞–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', quests)
	})
	.catch(err => {
		console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–¥–∞–Ω–∏–π:', err)
	})

// Cases command

async function addUserCases(vk_id) {
	return new Promise((resolve, reject) => {
		const stmt = db.prepare('INSERT INTO cases (vk_id) VALUES (?)')
		stmt.run(vk_id, function (err) {
			if (err) {
				reject(err)
			} else {
				console.log(`–î–æ–±–∞–≤–ª–µ–Ω —É—á–µ—Ç –∫–µ–π—Å–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${vk_id}`)
				resolve()
			}
		})
		stmt.finalize()
	})
}

async function sendCaseList(context) {
	await context.send(`üì¶ –î–ª—è –ø–æ–∫—É–ø–∫–∏ –∫–µ–π—Å–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:
    "–∫—É–ø–∏—Ç—å –∫–µ–π—Å [–Ω–∞–∑–≤–∞–Ω–∏–µ]"
    
    –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–µ–π—Å—ã –∏ –∏—Ö —Å—Ç–æ–∏–º–æ—Å—Ç—å:
    üì¶ –û–±—ã—á–Ω—ã–π –∫–µ–π—Å: 1000 WCoin
    üì¶ –°–µ—Ä–µ–±—Ä—è–Ω—ã–π –∫–µ–π—Å: 4000 WCoin
    üéÅ –ó–æ–ª–æ—Ç–æ–π –∫–µ–π—Å: 6000 WCoin
    üéÅ –ü–ª–∞—Ç–∏–Ω–æ–≤—ã–π –∫–µ–π—Å: 10000 WCoin
    üíº WayneCase: 20000 WCoin`)
}

async function getUserCases(vk_id) {
	return new Promise((resolve, reject) => {
		db.get('SELECT * FROM cases WHERE vk_id = ?', [vk_id], (err, row) => {
			if (err) {
				reject(err)
			} else {
				resolve(row)
			}
		})
	})
}

async function updateUserCases(vk_id, caseType, increment) {
	return new Promise((resolve, reject) => {
		const stmt = db.prepare(
			`UPDATE cases SET ${caseType} = ${caseType} + ? WHERE vk_id = ?`
		)
		stmt.run(increment, vk_id, function (err) {
			if (err) {
				reject(err)
			} else {
				console.log(
					`–û–±–Ω–æ–≤–ª–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–µ–π—Å–æ–≤ (${caseType}) –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${vk_id}`
				)
				resolve()
			}
		})
		stmt.finalize()
	})
}

async function handleBuyCaseCommand(context, caseType, casePrice) {
	const userId = context.senderId
	const user = await getUser(userId)

	if (!user) {
		await context.send(
			`${await getUserMention(
				userId
			)}, üìÑ –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ù–∞–ø–∏—à–∏—Ç–µ "/reg", —á—Ç–æ–±—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è.`
		)
		return
	}

	if (user.wcoin < casePrice) {
		await context.send(
			`${await getUserMention(
				userId
			)}, ‚ùå –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ WCoin –¥–ª—è –ø–æ–∫—É–ø–∫–∏ —ç—Ç–æ–≥–æ –∫–µ–π—Å–∞.`
		)
		return
	}

	const userCases = await getUserCases(userId)
	if (!userCases) {
		await addUserCases(userId)
	}

	await updateUserWcoin(userId, -casePrice)
	await updateUserCases(userId, caseType, 1)
	const newBalance = user.wcoin - casePrice

	await context.send(
		`${await getUserMention(
			userId
		)}, üéâ –í—ã —É—Å–ø–µ—à–Ω–æ –∫—É–ø–∏–ª–∏ ${caseType} –∫–µ–π—Å –∑–∞ ${casePrice} WCoin. –£ –≤–∞—Å –æ—Å—Ç–∞–ª–æ—Å—å ${newBalance} WCoin.`
	)
}

async function handleCaseOpenCommand(context, caseTypeInput) {
    const userId = context.senderId;
    const user = await getUser(userId);

    if (!user) {
        await context.send(
            `${await getUserMention(userId)}, üóø –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ù–∞–ø–∏—à–∏—Ç–µ "/reg", —á—Ç–æ–±—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è.`
        );
        return;
    }

    const caseType = caseTypes[caseTypeInput];

    if (!caseType) {
        await context.send(
            `${await getUserMention(userId)}, üì¶ –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –∫–µ–π—Å–∞: "${caseTypeInput}".`
        );
        return;
    }

    const userCases = await getUserCases(userId);

    if (userCases[caseType] <= 0) {
        await context.send(
            `${await getUserMention(userId)}, üì¶ –£ –≤–∞—Å –Ω–µ—Ç –∫–µ–π—Å–æ–≤ —Ç–∏–ø–∞ "${caseTypeInput}".`
        );
        return;
    }

    // –ü–æ–ª—É—á–∞–µ–º –Ω–∞–≥—Ä–∞–¥—É
    const reward = dropReward(caseType); // –ò—Å–ø–æ–ª—å–∑—É–µ–º dropReward –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–≥—Ä–∞–¥—ã
    console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –æ—Ç–∫—Ä—ã–ª –∫–µ–π—Å "${caseTypeInput}" –∏ –ø–æ–ª—É—á–∏–ª –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ:`, reward);

    // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ –æ—Ç–∫—Ä—ã—Ç–∏—è –∫–µ–π—Å–∞
    await updateDatabaseAfterOpening(userId, caseType, reward);

	// –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç –∏–∑ itemList
	const randomItem = itemList[Math.floor(Math.random() * itemList.length)]
	const quantity = Math.floor(Math.random() * 3) + 1 // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥–º–µ—Ç–∞

	if (reward.type === 'wcoin') {
		// –û–±—Ä–∞–±–æ—Ç–∫–∞ WCoin
		await updateUserWcoin(userId, reward.amount) // –î–æ–±–∞–≤–ª—è–µ–º WCoin
		await updateUserItems(userId, randomItem, quantity) // –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç –∏–∑ itemList
		await context.send(
			`${await getUserMention(
				userId
			)}, üéâ –í—ã –æ—Ç–∫—Ä—ã–ª–∏ –∫–µ–π—Å "${caseTypeInput}" –∏ –ø–æ–ª—É—á–∏–ª–∏ ${
				reward.amount
			} WCoin –∏ ${quantity} —à—Ç. ${randomItem}!`
		)
	} else if (reward.type === 'item') {
		// –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–µ–¥–º–µ—Ç–æ–≤
		await updateUserItems(userId, randomItem, quantity) // –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç –∏–∑ itemList
		await context.send(
			`${await getUserMention(
				userId
			)}, üéâ –í—ã –æ—Ç–∫—Ä—ã–ª–∏ –∫–µ–π—Å "${caseTypeInput}" –∏ –ø–æ–ª—É—á–∏–ª–∏ –ø—Ä–µ–¥–º–µ—Ç: ${
				reward.name
			}, –∏ ${quantity} —à—Ç. ${randomItem}!`
		)

		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–µ–¥–º–µ—Ç–∞
		await vk.api.messages.send({
			user_id: 252840773, // ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
			message: `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å [id${userId}|${user.nickname}] –æ—Ç–∫—Ä—ã–ª –∫–µ–π—Å "${caseTypeInput}" –∏ –ø–æ–ª—É—á–∏–ª –ø—Ä–µ–¥–º–µ—Ç: ${reward.name}, –∏ ${quantity} —à—Ç. ${randomItem}.`,
			random_id: Math.floor(Math.random() * 100000),
		})
	}
}

async function updateDatabaseAfterOpening(userId, caseType, reward) {
	await updateUserCases(userId, caseType, -1)
	if (typeof reward === 'number') {
		await updateUserWcoin(userId, reward)
	} else {
		// –õ–æ–≥–∏–∫–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
		console.log(`–î–æ–±–∞–≤–ª–µ–Ω –ø—Ä–µ–¥–º–µ—Ç "${reward}" –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userId}`)
	}
}

async function handleTransferWcoin(context, target, wcoinAmount) {
	const wcoin = parseInt(wcoinAmount, 10)
	const userId = context.senderId

	if (isNaN(wcoin) || wcoin <= 0 || !target) {
		await context.send(
			`${await getUserMention(
				userId
			)}, ‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ WCoin –¥—Ä—É–≥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /–ø–µ—Ä–µ–¥–∞—Ç—å [ID/@—Å—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å(–∑–∞—Ç–µ–º —É–±–µ—Ä–∏—Ç–µ "@")] [—Å—É–º–º–∞]`
		)
		return
	}

	const targetUserId = await resolveUserId(target)
	if (!targetUserId) {
		await context.send(
			`${await getUserMention(userId)}, üóø –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.`
		)
		return
	}

	const user = await getUser(userId)
	const targetUser = await getUser(targetUserId)

	if (user.wcoin < wcoin) {
		await context.send(
			`${await getUserMention(
				userId
			)}, üóø –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ WCoin –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏.`
		)
		return
	}

	if (userId === targetUser.vk_id) {
		await context.send(
			`${await getUserMention(
				userId
			)}, üò° –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–¥–∞—Ç—å WCoin —Å–∞–º–æ–º—É —Å–µ–±–µ.`
		)
		return
	}

	await updateUserWcoin(userId, -wcoin) // –£–º–µ–Ω—å—à–∞–µ–º –±–∞–ª–∞–Ω—Å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
	await updateUserWcoin(targetUser.vk_id, wcoin) // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—É—á–∞—Ç–µ–ª—è

	const updatedUser = await getUser(userId)
	const updatedTargetUser = await getUser(targetUser.vk_id)

	await context.send(
		`${await getUserMention(
			userId
		)}, üí∏ –í—ã –ø–µ—Ä–µ–¥–∞–ª–∏ ${wcoin} WCoin –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${await getUserMention(
			targetUser.vk_id
		)}. –í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: ${
			updatedUser.wcoin
		} WCoin.\nüë§ –ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${targetUser.nickname}: ${
			updatedTargetUser.wcoin
		} WCoin.`
	)
}

// wbar

async function createRoom(context, roomName, userId, wcoinAmount) {
	return new Promise((resolve, reject) => {
		// Check how many rooms the user has created
		db.all(
			`SELECT id FROM rooms WHERE creator_id = ? AND status = 'open'`,
			[userId],
			(err, rows) => {
				if (err) {
					reject(err)
					return
				}

				if (rows.length >= 3) {
					context.send(`‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –±–æ–ª—å—à–µ —Ç—Ä—ë—Ö –∫–æ–º–Ω–∞—Ç.`)
					reject('Room limit reached')
					return
				}

				// Check for existing room name
				db.get(
					`SELECT id FROM rooms WHERE room_name = ? AND status = 'open'`,
					[roomName],
					(err, row) => {
						if (err) {
							reject(err)
							return
						}

						if (row) {
							context.send(
								`‚ùå –ö–æ–º–Ω–∞—Ç–∞ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º "${roomName}" —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.`
							)
							reject('Room name exists')
							return
						}

						// Check if the user has enough WCoin to create a room
						getUserWcoin(userId)
							.then(userWcoin => {
								if (userWcoin < wcoinAmount) {
									context.send(
										`‚ùå –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ WCoin –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã.`
									)
									reject('Not enough WCoin')
									return
								}

								// Deduct the WCoin amount from the user
								updateUserWcoin(userId, -wcoinAmount)
									.then(() => {
										// Insert the new room into the database
										db.run(
											`INSERT INTO rooms (room_name, creator_id, wcoin_amount, status) VALUES (?, ?, ?, 'open')`,
											[roomName, userId, wcoinAmount],
											function (err) {
												if (err) {
													reject(err)
													return
												}

												context.send(
													`‚úÖ –ö–æ–º–Ω–∞—Ç–∞ "${roomName}" —Å–æ–∑–¥–∞–Ω–∞. –í—ã –ø–æ—Å—Ç–∞–≤–∏–ª–∏ ${wcoinAmount} WCoin.`
												)
												resolve()
											}
										)
									})
									.catch(reject)
							})
							.catch(reject)
					}
				)
			}
		)
	})
}

async function handleWBarCommand(context, command, params) {
	const userId = context.senderId
	console.log(
		`handleWBarCommand called with command: ${command}, params: ${params}`
	)

	if (!command) {
		// Handle case where command is missing or invalid
		await context.send(
			`${await getUserMention(
				userId
			)}, ‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ —É–∫–∞–∑–∞–Ω–∞ –∫–æ–º–∞–Ω–¥–∞.\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /wbar —Å–æ–∑–¥–∞—Ç—å [–Ω–∞–∑–≤–∞–Ω–∏–µ_–∫–æ–º–Ω–∞—Ç—ã] [—Å—É–º–º–∞]\n\n/wbar –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å [–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å]\n\n/wbar –ø—Ä–∏–Ω—è—Ç—å [–Ω–∞–∑–≤–∞–Ω–∏–µ] –∏–ª–∏ /wbar –æ—Ç–º–µ–Ω–∞.\n\n–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–Ω–∞—Ç: /wbar –∫–æ–º–Ω–∞—Ç—ã`
		)
		return
	}

	if (command === '—Å–æ–∑–¥–∞—Ç—å') {
		if (params.length < 2 || isNaN(parseInt(params[1], 10))) {
			await context.send(
				`${await getUserMention(
					userId
				)}, ‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ —É–∫–∞–∑–∞–Ω—ã –ø–∞—Ä–∞–º–µ—Ç—Ä—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /wbar —Å–æ–∑–¥–∞—Ç—å [–Ω–∞–∑–≤–∞–Ω–∏–µ_–∫–æ–º–Ω–∞—Ç—ã] [—Å—É–º–º–∞]`
			)
			return
		}

		const roomName = params[0]
		const wcoinAmount = parseInt(params[1], 10)

		if (isNaN(wcoinAmount) || wcoinAmount <= 0) {
			await context.send(
				`${await getUserMention(
					userId
				)}, ‚ùå –£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É –¥–ª—è —Å—Ç–∞–≤–∫–∏.`
			)
			return
		}

		console.log(`Creating room: ${roomName} with amount: ${wcoinAmount}`)
		await createRoom(context, roomName, userId, wcoinAmount)
	} else if (command === '–ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å') {
		if (params.length < 1) {
			await context.send(
				`${await getUserMention(
					userId
				)}, ‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ —É–∫–∞–∑–∞–Ω—ã –ø–∞—Ä–∞–º–µ—Ç—Ä—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /wbar –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å [–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å]`
			)
			return
		}

		const target = params.join(' ')

		const targetUserId = await resolveUserId(target)
		if (!targetUserId) {
			await context.send(`‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${target} –Ω–µ –Ω–∞–π–¥–µ–Ω.`)
			return
		}

		await inviteToRoom(context, userId, targetUserId)
	} else if (command === '–ø—Ä–∏–Ω—è—Ç—å') {
		if (params.length < 1) {
			await context.send(
				`${await getUserMention(
					userId
				)}, ‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ —É–∫–∞–∑–∞–Ω—ã –ø–∞—Ä–∞–º–µ—Ç—Ä—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /wbar –ø—Ä–∏–Ω—è—Ç—å [–Ω–∞–∑–≤–∞–Ω–∏–µ_–∫–æ–º–Ω–∞—Ç—ã]`
			)
			return
		}

		const roomName = params[0]

		await acceptRoomInvitation(context, userId, roomName)
	} else if (command === '–æ—Ç–º–µ–Ω–∞') {
		// Cancel room creation
		await cancelRoomCreation(context, userId)
	} else if (command === '–∫–æ–º–Ω–∞—Ç—ã') {
		await listRooms(context)
	} else {
		// Handle unknown command
		await context.send(
			`${await getUserMention(
				userId
			)}, ‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ —É–∫–∞–∑–∞–Ω–∞ –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /wbar —Å–æ–∑–¥–∞—Ç—å [–Ω–∞–∑–≤–∞–Ω–∏–µ_–∫–æ–º–Ω–∞—Ç—ã] [—Å—É–º–º–∞]\n/wbar –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å [–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å]\n\n–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∫–æ–º–Ω–∞—Ç–µ –¥–ª—è –∏–≥—Ä—ã:\n/wbar –ø—Ä–∏–Ω—è—Ç—å [–Ω–∞–∑–≤–∞–Ω–∏–µ], –∏–ª–∏ /wbar –æ—Ç–º–µ–Ω–∞\n–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–Ω–∞—Ç: /wbar –∫–æ–º–Ω–∞—Ç—ã`
		)
	}
}

async function listRooms(context) {
	db.all(
		`SELECT room_name, wcoin_amount, creator_id FROM rooms WHERE status = 'open'`,
		async (err, rows) => {
			if (err) {
				console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∫–æ–º–Ω–∞—Ç:', err)
				await context.send(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–Ω–∞—Ç.`)
				return
			}

			if (rows.length === 0) {
				await context.send(`‚ùå –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–Ω–∞—Ç.`)
				return
			}

			// –°–æ–∑–¥–∞–µ–º –º–∞—Å—Å–∏–≤ –ø—Ä–æ–º–∏—Å–æ–≤ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∏–∫–Ω–µ–π–º–æ–≤ —Å–æ–∑–¥–∞—Ç–µ–ª–µ–π –∫–æ–º–Ω–∞—Ç
			const roomListPromises = rows.map(async room => {
				try {
					const nickname = await getUserNickname(room.creator_id)
					return `–ù–∞–∑–≤–∞–Ω–∏–µ: ${room.room_name}, –°—Ç–∞–≤–∫–∞: ${room.wcoin_amount} WCoin, –û–∂–∏–¥–∞–µ—Ç: ${nickname}.`
				} catch (error) {
					console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–∏–∫–Ω–µ–π–º–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error)
					return `–ù–∞–∑–≤–∞–Ω–∏–µ: ${room.room_name}, –°—Ç–∞–≤–∫–∞: ${room.wcoin_amount} WCoin, –û–∂–∏–¥–∞–µ—Ç: (–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ).`
				}
			})

			try {
				const roomList = await Promise.all(roomListPromises)
				await context.send(
					`üìã –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–Ω–∞—Ç:\n${roomList.join(
						'\n\n'
					)}\n\n–ù–∞–ø–∏—à–∏: /wbar –ø—Ä–∏–Ω—è—Ç—å [–Ω–∞–∑–≤–∞–Ω–∏–µ_–∫–æ–º–Ω–∞—Ç—ã]`
				)
			} catch (error) {
				console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∫–æ–º–Ω–∞—Ç:', error)
				await context.send(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–Ω–∞—Ç.`)
			}
		}
	)
}

async function cancelRoomCreation(context, userId) {
	return new Promise((resolve, reject) => {
		// Find the latest room created by the user
		db.get(
			`SELECT id, room_name, wcoin_amount FROM rooms 
            WHERE creator_id = ? AND status = 'open'
            ORDER BY id DESC
            LIMIT 1`,
			[userId],
			(err, room) => {
				if (err) {
					reject(err)
					return
				}

				if (!room) {
					context.send(`‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ–º–Ω–∞—Ç –¥–ª—è –æ—Ç–º–µ–Ω—ã.`)
					resolve()
					return
				}

				// Refund WCoin to the user
				updateUserWcoin(userId, room.wcoin_amount)
					.then(() => {
						// Cancel the room
						db.run(`DELETE FROM rooms WHERE id = ?`, [room.id], err => {
							if (err) {
								reject(err)
								return
							}

							context.send(
								`‚úÖ –ö–æ–º–Ω–∞—Ç–∞ "${room.room_name}" —É–¥–∞–ª–µ–Ω–∞, WCoin –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã.`
							)
							resolve()
						})
					})
					.catch(reject)
			}
		)
	})
}

// Function to invite a user to a room
async function inviteToRoom(context, inviterId, invitedUserId) {
	return new Promise((resolve, reject) => {
		db.get(
			`SELECT id, room_name, wcoin_amount FROM rooms 
            WHERE creator_id = ? AND player2_id IS NULL AND status = 'open'`,
			[inviterId],
			async (err, room) => {
				if (err) {
					reject(err)
					return
				}

				if (!room) {
					await context.send(`‚ùå –í—ã –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–ª–∏ –∫–æ–º–Ω–∞—Ç—É –¥–ª—è –∏–≥—Ä—ã.`)
					return
				}

				// Get the mention of the invited user
				const invitedUserMention = await getUserMention(invitedUserId)

				await context.send(
					`${invitedUserMention}, –≤–∞—Å –ø—Ä–∏–≥–ª–∞—Å–∏–ª–∏ –≤ –∫–æ–º–Ω–∞—Ç—É —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º: ${room.room_name}, –Ω–∞ —Å—Ç–∞–≤–∫—É: ${room.wcoin_amount} WCoin.\n` +
						`–ï—Å–ª–∏ –≤—ã —Å–æ–≥–ª–∞—Å–Ω—ã, –Ω–∞–ø–∏—à–∏—Ç–µ: /wbar –ø—Ä–∏–Ω—è—Ç—å ${room.room_name}`
				)
			}
		)
	})
}

// Function to accept the room invitation
async function acceptRoomInvitation(context, userId, roomName) {
	return new Promise((resolve, reject) => {
		// Fetch room details including the stake amount
		db.get(
			`SELECT id, creator_id, player1_id, player2_id, wcoin_amount FROM rooms 
            WHERE room_name = ? AND status = 'open'`,
			[roomName],
			async (err, room) => {
				if (err) {
					reject(err)
					return
				}

				if (!room) {
					await context.send(
						`${await getUserMention(
							userId
						)}, üç∑ –ö–æ–º–Ω–∞—Ç–∞ ${roomName} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∂–µ –∑–∞–∫—Ä—ã—Ç–∞.`
					)
					return
				}

				// Check if the invited user has enough WCoin
				const userWcoin = await getUserWcoin(userId)
				if (userWcoin < room.wcoin_amount) {
					await context.send(
						`‚ùå –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ WCoin –¥–ª—è —É—á–∞—Å—Ç–∏—è –≤ —ç—Ç–æ–π –∫–æ–º–Ω–∞—Ç–µ.`
					)
					return
				}

				if (room.player2_id) {
					await context.send(`üç∑ –í —ç—Ç—É –∫–æ–º–Ω–∞—Ç—É —É–∂–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –¥—Ä—É–≥–æ–π –∏–≥—Ä–æ–∫.`)
					return
				}

				// Update room status and perform game logic
				db.run(
					`UPDATE rooms SET status = 'closed', player2_id = ? WHERE id = ?`,
					[userId, room.id],
					async err => {
						if (err) {
							reject(err)
							return
						}

						// Implement game logic here
						const winnerId = Math.random() < 0.5 ? room.creator_id : userId
						const loserId =
							winnerId === room.creator_id ? userId : room.creator_id
						const wcoinAmount = room.wcoin_amount

						try {
							if (winnerId === room.creator_id) {
								// Creator wins
								await updateUserWcoin(winnerId, wcoinAmount * 2) // Add the full stake amount as a win to the creator's balance
								await updateUserWcoin(loserId, -wcoinAmount)
								await context.send(
									`–í—ã –ø—Ä–∏–Ω—è–ª–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ, —Å—Ç–∞–≤–∫–∞ —Å—ã–≥—Ä–∞–ª–∞ –≤ –ø–æ–ª—å–∑—É –∏–≥—Ä–æ–∫–∞, –∫–æ—Ç–æ—Ä—ã–π —Å–æ–∑–¥–∞–ª –∫–æ–º–Ω–∞—Ç—É. –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ ${wcoinAmount} WCoin!ü•≥`
								)
							} else {
								// Creator loses
								await updateUserWcoin(userId, wcoinAmount) // Add the stake amount to the winner's balance
								// No deduction for the creator's balance
								await context.send(
									`–í—ã –ø—Ä–∏–Ω—è–ª–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ, —Å—Ç–∞–≤–∫–∞ —Å—ã–≥—Ä–∞–ª–∞ –≤ –≤–∞—à—É –ø–æ–ª—å–∑—É. –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ ${wcoinAmount} WCoin!ü•≥`
								)
							}
						} catch (error) {
							console.error('Error updating user balance:', error)
						}

						// Close the room (delete from database)
						db.run(`DELETE FROM rooms WHERE id = ?`, [room.id], err => {
							if (err) {
								console.error('Failed to delete room after game:', err)
							}
						})
					}
				)
			}
		)
	})
}

// Shovels

async function updateUserShovels(vk_id, shovelType, increment) {
	return new Promise((resolve, reject) => {
		const column = shovelTypes[shovelType]
		if (!column) {
			return reject(new Error('–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –ª–æ–ø–∞—Ç—ã'))
		}

		const sql = `UPDATE shovels SET ${column} = ${column} + ? WHERE vk_id = ?`
		console.log(`Executing SQL: ${sql}`)

		const stmt = db.prepare(sql)
		stmt.run(increment, vk_id, function (err) {
			if (err) {
				reject(err)
			} else {
				console.log(`Updated shovel count (${shovelType}) for user ${vk_id}`)
				resolve()
			}
		})
		stmt.finalize()
	})
}

async function ensureUserShovels(vk_id) {
	const userShovels = await getUserShovels(vk_id)

	if (!userShovels) {
		// –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ —Ç–∞–±–ª–∏—Ü–µ `shovels`, —Å–æ–∑–¥–∞–¥–∏–º –µ–≥–æ
		return new Promise((resolve, reject) => {
			db.run('INSERT INTO shovels (vk_id) VALUES (?)', [vk_id], function (err) {
				if (err) {
					reject(err)
				} else {
					resolve()
				}
			})
		})
	}
}

async function getUserShovels(vk_id) {
	return new Promise((resolve, reject) => {
		db.get('SELECT * FROM shovels WHERE vk_id = ?', [vk_id], (err, row) => {
			if (err) {
				console.error(`Error retrieving user shovels: ${err.message}`)
				reject(err)
			} else {
				console.log(`Retrieved user shovels: ${JSON.stringify(row)}`)
				resolve(row)
			}
		})
	})
}

// Wmarkets

async function listMarketItem(userId, itemName, quantity, price) {
	const user = await getUser(userId)
	if (!user)
		return 'üìÑ –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ù–∞–ø–∏—à–∏—Ç–µ "/reg", —á—Ç–æ–±—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è.'

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø—Ä–µ–¥–º–µ—Ç –∫—Ä–∞—Ñ—á–µ–Ω–Ω—ã–º
	if (craftedItemsList.includes(itemName)) {
		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤—ã—Å—Ç–∞–≤–ª–µ–Ω –ª–∏ –ø—Ä–µ–¥–º–µ—Ç —É–∂–µ –Ω–∞ –ø—Ä–æ–¥–∞–∂—É
		const itemExists = await new Promise((resolve, reject) => {
			db.get(
				'SELECT * FROM market WHERE user_id = ? AND item_name = ?',
				[userId, itemName],
				(err, row) => {
					if (err) {
						console.error(err)
						reject(err)
					} else {
						resolve(row !== undefined)
					}
				}
			)
		})

		if (itemExists)
			return `‚ùå –¢–æ–≤–∞—Ä —É–∂–µ –≤—ã—Å—Ç–∞–≤–ª–µ–Ω, —Å–Ω–∏–º–∏—Ç–µ –µ–≥–æ, —á—Ç–æ–±—ã —Å–Ω–æ–≤–∞ –≤—ã—Å—Ç–∞–≤–∏—Ç—å –Ω–∞ –ø—Ä–æ–¥–∞–∂—É.\n/wmarkets —Å–Ω—è—Ç—å [–ø—Ä–µ–¥–º–µ—Ç]`

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—Ä–∞—Ñ—á–µ–Ω–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤
		const userItem = await new Promise((resolve, reject) => {
			db.get(
				'SELECT * FROM crafted_items WHERE user_id = ? AND item_name = ?',
				[userId, itemName],
				(err, row) => {
					if (err) {
						console.error(err)
						reject(err)
					} else {
						resolve(row)
					}
				}
			)
		})

		if (!userItem)
			return `${await getUserMention(
				userId
			)}, üò° –£ –≤–∞—Å –Ω–µ—Ç —Ç–∞–∫–æ–≥–æ –∫—Ä–∞—Ñ—á–µ–Ω–Ω–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞.`
		if (userItem.quantity < quantity)
			return `${await getUserMention(
				userId
			)}, üò° –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫—Ä–∞—Ñ—á–µ–Ω–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏.`

		return new Promise((resolve, reject) => {
			db.run(
				'INSERT INTO market (user_id, item_name, quantity, price) VALUES (?, ?, ?, ?)',
				[userId, itemName, quantity, price],
				err => {
					if (err) {
						console.error(err)
						reject('Failed to list item.')
					} else {
						resolve(
							'‚úÖ –ü—Ä–µ–¥–º–µ—Ç —É—Å–ø–µ—à–Ω–æ –≤—ã—Å—Ç–∞–≤–ª–µ–Ω –Ω–∞ –ø—Ä–æ–¥–∞–∂—É.\n–°–ø–∏—Å–æ–∫ –ø—Ä–æ–¥–∞–≤—Ü–æ–≤: /wmarkets —Ä—ã–Ω–æ–∫'
						)
					}
				}
			)
		})
	} else {
		// –ü—Ä–æ–¥–∞–∂–∞ –æ–±—ã—á–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤
		if (!itemList.includes(itemName))
			return '‚ùå –¢–∞–∫–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≤–µ–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞, –ª–∏–±–æ —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã.\n/wmarkets –≤—ã—Å—Ç–∞–≤–∏—Ç—å [–ø—Ä–µ–¥–º–µ—Ç] [–∫–æ–ª-–≤–æ] [—Ü–µ–Ω–∞ –∑–∞ —à—Ç.]'

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤—ã—Å—Ç–∞–≤–ª–µ–Ω –ª–∏ –ø—Ä–µ–¥–º–µ—Ç —É–∂–µ –Ω–∞ –ø—Ä–æ–¥–∞–∂—É
		const itemExists = await new Promise((resolve, reject) => {
			db.get(
				'SELECT * FROM market WHERE user_id = ? AND item_name = ?',
				[userId, itemName],
				(err, row) => {
					if (err) {
						console.error(err)
						reject(err)
					} else {
						resolve(row !== undefined)
					}
				}
			)
		})

		if (itemExists)
			return `‚ùå –¢–æ–≤–∞—Ä —É–∂–µ –≤—ã—Å—Ç–∞–≤–ª–µ–Ω, —Å–Ω–∏–º–∏—Ç–µ –µ–≥–æ, —á—Ç–æ–±—ã —Å–Ω–æ–≤–∞ –≤—ã—Å—Ç–∞–≤–∏—Ç—å –Ω–∞ –ø—Ä–æ–¥–∞–∂—É.\n/wmarkets —Å–Ω—è—Ç—å [–ø—Ä–µ–¥–º–µ—Ç]`

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥–º–µ—Ç–æ–≤
		const userItem = await new Promise((resolve, reject) => {
			db.get(
				'SELECT * FROM user_items WHERE user_id = ? AND item_name = ?',
				[userId, itemName],
				(err, row) => {
					if (err) {
						console.error(err)
						reject(err)
					} else {
						resolve(row)
					}
				}
			)
		})

		if (!userItem)
			return `${await getUserMention(userId)}, üò° –£ –≤–∞—Å –Ω–µ—Ç —Ç–∞–∫–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞.`
		if (userItem.quantity < quantity)
			return `${await getUserMention(
				userId
			)}, üò° –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏.`

		return new Promise((resolve, reject) => {
			db.run(
				'INSERT INTO market (user_id, item_name, quantity, price) VALUES (?, ?, ?, ?)',
				[userId, itemName, quantity, price],
				err => {
					if (err) {
						console.error(err)
						reject('Failed to list item.')
					} else {
						resolve(
							'‚úÖ –ü—Ä–µ–¥–º–µ—Ç —É—Å–ø–µ—à–Ω–æ –≤—ã—Å—Ç–∞–≤–ª–µ–Ω –Ω–∞ –ø—Ä–æ–¥–∞–∂—É.\n–°–ø–∏—Å–æ–∫ –ø—Ä–æ–¥–∞–≤—Ü–æ–≤: /wmarkets —Ä—ã–Ω–æ–∫'
						)
					}
				}
			)
		})
	}
}

async function removeMarketItem(userId, itemName) {
	const itemExists = await new Promise((resolve, reject) => {
		db.get(
			'SELECT * FROM market WHERE user_id = ? AND item_name = ?',
			[userId, itemName],
			(err, row) => {
				if (err) {
					console.error(err)
					reject(err)
				} else {
					resolve(row !== undefined)
				}
			}
		)
	})

	if (!itemExists)
		return '‚ùå –í—ã –Ω–µ –≤—ã—Å—Ç–∞–≤–ª—è–ª–∏ —ç—Ç–æ—Ç –ø—Ä–µ–¥–º–µ—Ç –Ω–∞ –ø—Ä–æ–¥–∞–∂—É –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞.'

	return new Promise((resolve, reject) => {
		db.run(
			'DELETE FROM market WHERE user_id = ? AND item_name = ?',
			[userId, itemName],
			err => {
				if (err) {
					console.error(err)
					reject('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–µ–¥–º–µ—Ç–∞ —Å —Ä—ã–Ω–∫–∞.')
				} else {
					resolve('‚úÖ –ü—Ä–µ–¥–º–µ—Ç —É—Å–ø–µ—à–Ω–æ —Å–Ω—è—Ç —Å –ø—Ä–æ–¥–∞–∂–∏!')
				}
			}
		)
	})
}

async function showMarket() {
	return new Promise(async (resolve, reject) => {
		db.all('SELECT * FROM market', [], async (err, rows) => {
			if (err) {
				console.error(err)
				reject('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ —Ä—ã–Ω–∫–µ.')
			} else {
				// –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –∏—Ö –Ω–∏–∫–Ω–µ–π–º–∞–º
				const users = await new Promise((resolve, reject) => {
					db.all('SELECT vk_id, nickname FROM users', [], (err, userRows) => {
						if (err) {
							reject(err)
						} else {
							const userMap = new Map(
								userRows.map(user => [user.vk_id, user.nickname])
							)
							resolve(userMap)
						}
					})
				})

				const marketList = rows
					.map(row => {
						const sellerNickname = users.get(row.user_id);
						const sellerLink = sellerNickname
							? `[id${row.user_id}|${sellerNickname}]`
							: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
						return `üôé‚Äç‚ôÇ –ü—Ä–æ–¥–∞–≤–µ—Ü: ${sellerLink}\nüíº –ü—Ä–µ–¥–º–µ—Ç: ${row.item_name}, üîñ –ö–æ–ª-–≤–æ: ${row.quantity}\nüí∏ –¶–µ–Ω–∞: ${row.price} WCoin –∑–∞ —à—Ç—É–∫—É`
					})
					.join('\n\n')
				resolve(marketList || 'üîé –ü—Ä–æ–¥–∞–≤—Ü—ã –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.')
			}
		})
	})
}

async function buyMarketItem(buyerId, sellerId, itemName) {
	try {
		if (buyerId === sellerId) {
			return 'üò° –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∫—É–ø–∏—Ç—å —Å–≤–æ–∏ —Ç–æ–≤–∞—Ä—ã, –ª–∏–±–æ —Å–Ω–∏–º–∏—Ç–µ –∏—Ö —Å –ø—Ä–æ–¥–∞–∂–∏.'
		}

		const buyer = await getUser(buyerId)
		const seller = await getUser(sellerId)

		if (!buyer) return '–ü–æ–∫—É–ø–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.'
		if (!seller) return '–ü—Ä–æ–¥–∞–≤–µ—Ü –Ω–µ –Ω–∞–π–¥–µ–Ω.'

		const marketItem = await new Promise((resolve, reject) => {
			db.get(
				'SELECT * FROM market WHERE user_id = ? AND item_name = ?',
				[sellerId, itemName],
				(err, row) => {
					if (err) {
						console.error(err)
						reject('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø—Ä–µ–¥–º–µ—Ç–∞ –Ω–∞ —Ä—ã–Ω–∫–µ.')
					} else {
						resolve(row)
					}
				}
			)
		})

		if (!marketItem) {
			return 'üîé –ü—Ä–µ–¥–º–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ —Ä—ã–Ω–∫–µ.\n–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /wmarkets –∫—É–ø–∏—Ç—å [ID/—É–ø–æ–º–∏–Ω–∞–Ω–∏–µ] [–ø—Ä–µ–¥–º–µ—Ç]'
		}

		const totalPrice = marketItem.price * marketItem.quantity
		if (buyer.wcoin < totalPrice) {
			return '‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏.'
		}

		// –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è
		await new Promise((resolve, reject) => {
			db.run(
				'UPDATE users SET wcoin = wcoin - ? WHERE vk_id = ?',
				[totalPrice, buyerId],
				err => {
					if (err) {
						console.error(err)
						reject('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ä–µ–¥—Å—Ç–≤ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è.')
					} else {
						resolve()
					}
				}
			)
		})

		// –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞ –ø—Ä–æ–¥–∞–≤—Ü–∞
		await new Promise((resolve, reject) => {
			db.run(
				'UPDATE users SET wcoin = wcoin + ? WHERE vk_id = ?',
				[totalPrice, sellerId],
				err => {
					if (err) {
						console.error(err)
						reject('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ä–µ–¥—Å—Ç–≤ –ø—Ä–æ–¥–∞–≤—Ü–∞.')
					} else {
						resolve()
					}
				}
			)
		})

		// –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ —É –ø—Ä–æ–¥–∞–≤—Ü–∞
		await new Promise((resolve, reject) => {
			db.run(
				'UPDATE user_items SET quantity = quantity - ? WHERE user_id = ? AND item_name = ? AND quantity >= ?',
				[marketItem.quantity, sellerId, itemName, marketItem.quantity],
				err => {
					if (err) {
						console.error(err)
						reject('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –ø—Ä–æ–¥–∞–≤—Ü–∞.')
					} else {
						resolve()
					}
				}
			)
		})

		// –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥–º–µ—Ç —Å —Ä—ã–Ω–∫–∞, –µ—Å–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–≤–Ω–æ –∏–ª–∏ –º–µ–Ω—å—à–µ 0
		await new Promise((resolve, reject) => {
			db.run(
				'DELETE FROM market WHERE user_id = ? AND item_name = ?',
				[sellerId, itemName],
				err => {
					if (err) {
						console.error(err)
						reject('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–µ–¥–º–µ—Ç–∞ —Å —Ä—ã–Ω–∫–∞.')
					} else {
						resolve()
					}
				}
			)
		})

		// –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–µ–¥–º–µ—Ç—ã —É –ø–æ–∫—É–ø–∞—Ç–µ–ª—è
		await new Promise((resolve, reject) => {
			db.run(
				'INSERT INTO user_items (user_id, item_name, quantity) VALUES (?, ?, ?) ON CONFLICT(user_id, item_name) DO UPDATE SET quantity = quantity + ?',
				[buyerId, itemName, marketItem.quantity, marketItem.quantity],
				err => {
					if (err) {
						console.error(err)
						reject('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è.')
					} else {
						resolve()
					}
				}
			)
		})

		return `üí∏ –í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–æ–±—Ä–µ–ª–∏ ${marketItem.quantity} ${itemName} –∑–∞ ${totalPrice} WCoin.\n–ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ –≤–∞—à–∏—Ö –ø—Ä–µ–¥–º–µ—Ç–∞—Ö: /–ø—Ä–µ–¥–º–µ—Ç—ã`
	} catch (error) {
		console.error(error)
		return '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ –ø—Ä–µ–¥–º–µ—Ç–∞.'
	}
}

async function listUserItems(userId) {
	return new Promise((resolve, reject) => {
		db.all(
			'SELECT item_name, quantity FROM user_items WHERE user_id = ?',
			[userId],
			(err, rows) => {
				if (err) {
					console.error(err)
					reject('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç—ã.')
				} else {
					const items = rows.reduce((acc, row) => {
						acc[row.item_name] = row.quantity
						return acc
					}, {})
					resolve(items)
				}
			}
		)
	})
}

async function updateUserItems(userId, itemName, quantity) {
	return new Promise((resolve, reject) => {
		db.run(
			'INSERT INTO user_items (user_id, item_name, quantity) VALUES (?, ?, ?) ON CONFLICT(user_id, item_name) DO UPDATE SET quantity = quantity + ?',
			[userId, itemName, quantity, quantity],
			err => {
				if (err) {
					console.error(err)
					reject(err)
				} else {
					resolve()
				}
			}
		)
	})
}

// Craft

async function handleCraftCommand(context) {
	const message = context.text
	const userId = context.senderId
	const parts = message.split(' ')

	if (parts[0] !== '/–∫—Ä–∞—Ñ—Ç') {
		return
	}

	const itemName = parts.slice(1).join(' ')

	if (!itemName) {
		const recipeList = Object.keys(craftingRecipes)
			.map(item => {
				const recipe = craftingRecipes[item]
				const requirements = Object.entries(recipe)
					.map(([ingredient, quantity]) => `${quantity} ${ingredient}`)
					.join(', ')
				return `${item}: ${requirements}`
			})
			.join('\n\n')

		context.send(
			`üìú –ü—Ä–∏–≤–µ—Ç, —è –ê–ª–µ–∫—Å. –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Å–æ–∑–¥–∞—Ç—å –∫—É–∑–Ω–µ—á–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç, –Ω–æ –º–Ω–µ –Ω—É–∂–Ω—ã —Ä–µ—Å—É—Ä—Å—ã –∏ 20 WCoin:\n\n${recipeList}\n\n–ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /–∫—Ä–∞—Ñ—Ç [–ö—É–∑–Ω–µ—á–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç]`
		)
		return
	}

	if (itemName === 'WCoin') {
		const recipeForWcoin = {
			'–§—Ä–∞–≥–º–µ–Ω—Ç—ã WCoin': 25,
			'–ü–æ—Å–æ—Ö Wayne': 2,
		}

		const userItems = await listUserItems(userId)
		const userWcoin = await getUserWcoin(userId)
		const missingItems = {}
		const insufficientItems = {}

		for (const [ingredient, quantity] of Object.entries(recipeForWcoin)) {
			const availableQuantity = userItems[ingredient] || 0
			if (availableQuantity < quantity) {
				insufficientItems[ingredient] = availableQuantity
				missingItems[ingredient] = quantity - availableQuantity
			}
		}

		if (Object.keys(missingItems).length > 0) {
			const missingItemsText = Object.entries(recipeForWcoin)
				.map(([item, qty]) => {
					const availableQty = userItems[item] || 0
					return `${availableQty}/${qty} ${item}`
				})
				.join(', ')
			context.send(
				`‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ä–µ—Å—É—Ä—Å–æ–≤ –¥–ª—è –∫—Ä–∞—Ñ—Ç–∞ WCoin: ${missingItemsText}`
			)
			return
		}

		// Deduct resources for WCoin crafting
		for (const [ingredient, quantity] of Object.entries(recipeForWcoin)) {
			await updateUserItems(userId, ingredient, -quantity)
		}

		// Add 50 WCoin to the user's balance
		await updateUserWcoin(userId, 50)
		context.send(`‚úÖ –í—ã –ø–æ–ª—É—á–∏–ª–∏ 50 WCoin!`)
		return
	}

	if (!craftingRecipes[itemName]) {
		context.send('‚ùå –ü—Ä–µ–¥–º–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ä–µ—Ü–µ–ø—Ç–∞—Ö –∫—Ä–∞—Ñ—Ç–∞.')
		return
	}

	const recipe = craftingRecipes[itemName]
	const userItems = await listUserItems(userId)
	const userWcoin = await getUserWcoin(userId)
	const missingItems = {}
	const insufficientItems = {}

	for (const [ingredient, quantity] of Object.entries(recipe)) {
		const availableQuantity = userItems[ingredient] || 0
		if (availableQuantity < quantity) {
			insufficientItems[ingredient] = availableQuantity
			missingItems[ingredient] = quantity - availableQuantity
		}
	}

	if (userWcoin < 20) {
		context.send('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ WCoin –¥–ª—è –∫—Ä–∞—Ñ—Ç–∞.')
		return
	}

	if (Object.keys(missingItems).length > 0) {
		const missingItemsText = Object.entries(recipe)
			.map(([item, qty]) => {
				const availableQty = userItems[item] || 0
				return `${availableQty}/${qty} ${item}`
			})
			.join(', ')
		context.send(`‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ä–µ—Å—É—Ä—Å–æ–≤: ${missingItemsText}`)
		return
	}

	// Deduct WCoin
	await updateUserWcoin(userId, -20)

	// Deduct resources and add crafted item
	for (const [ingredient, quantity] of Object.entries(recipe)) {
		await updateUserItems(userId, ingredient, -quantity)
	}

	await updateUserItems(userId, itemName, 1)

	// Add crafted item to the database
	await addCraftedItemToDatabase(userId, itemName)

	context.send(`‚öí‚úÖ –û—Ç–ª–∏—á–Ω–æ, –¥–µ—Ä–∂–∏ —Å–≤–æ–π –ø—Ä–µ–¥–º–µ—Ç ${itemName}!`)
}

async function listCraftedItems(userId) {
	return new Promise((resolve, reject) => {
		db.all(
			'SELECT item_name, quantity FROM crafted_items WHERE user_id = ?',
			[userId],
			(err, rows) => {
				if (err) {
					console.error(err);
					reject('Failed to retrieve crafted items.');
				} else {
					const items = rows.length
						? rows.map(row => `${row.item_name}: ${row.quantity} —à—Ç.`).join('\n')
						: '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∫—É–∑–Ω–µ—á–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤.';
					resolve(`‚öí –ö—É–∑–Ω–µ—á–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã:\n${items}`);
				}
			}
		);
	});
}

async function addCraftedItemToDatabase(userId, itemName) {
	return new Promise((resolve, reject) => {
		db.run(
			'INSERT INTO crafted_items (user_id, item_name, quantity) VALUES (?, ?, ?) ON CONFLICT(user_id, item_name) DO UPDATE SET quantity = quantity + ?',
			[userId, itemName, 1, 1],
			err => {
				if (err) {
					console.error(err)
					reject('–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Å–∫—Ä–∞—Ñ—á–µ–Ω–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç.')
				} else {
					resolve()
				}
			}
		)
	})
}

// wclan

async function getClanByUserId(userId) {
	return new Promise((resolve, reject) => {
		db.get(
			`
            SELECT c.*, u.nickname AS creator_nickname,
                   (SELECT COUNT(*) FROM clan_members cm WHERE cm.clan_id = c.id) AS member_count
            FROM clans c
            JOIN clan_members cm ON c.id = cm.clan_id
            JOIN users u ON c.creator_id = u.vk_id
            WHERE cm.user_id = ?
            `,
			[userId],
			(err, row) => {
				if (err) {
					console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –∫–ª–∞–Ω–µ:', err)
					reject('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –∫–ª–∞–Ω–µ.')
				} else {
					resolve(row)
				}
			}
		)
	})
}

async function getClanById(clanId) {
	return new Promise((resolve, reject) => {
		db.get(
			`
            SELECT c.*, u.nickname AS creator_nickname,
                   (SELECT COUNT(*) FROM clan_members cm WHERE cm.clan_id = c.id) AS member_count
            FROM clans c
            JOIN users u ON c.creator_id = u.vk_id
            WHERE c.id = ?
            `,
			[clanId],
			(err, row) => {
				if (err) {
					console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –∫–ª–∞–Ω–µ –ø–æ ID:', err)
					reject('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –∫–ª–∞–Ω–µ –ø–æ ID.')
				} else {
					resolve(row)
				}
			}
		)
	})
}

async function createClan(userId, clanName) {
	return new Promise((resolve, reject) => {
		getClanByUserId(userId)
			.then(existingClan => {
				if (existingClan) {
					reject(
						'‚ùå –í—ã —É–∂–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –∫–ª–∞–Ω–µ. –í—ã–π–¥–∏—Ç–µ –∏–∑ –Ω–µ–≥–æ, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π.'
					)
					return
				}

				db.run(
					'INSERT INTO clans (name, creator_id) VALUES (?, ?)',
					[clanName, userId],
					function (err) {
						if (err) {
							reject(err)
						} else {
							db.run(
								'INSERT INTO clan_members (user_id, clan_id) VALUES (?, ?)',
								[userId, this.lastID],
								err => {
									if (err) {
										reject(err)
									} else {
										resolve(this.lastID)
									}
								}
							)
						}
					}
				)
			})
			.catch(reject)
	})
}

async function deleteClan(userId) {
	return new Promise((resolve, reject) => {
		getClanByUserId(userId)
			.then(clan => {
				if (!clan || clan.creator_id !== userId) {
					reject('üò° –í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º –∫–ª–∞–Ω–∞.')
					return
				}
				db.run('DELETE FROM clans WHERE id = ?', [clan.id], err => {
					if (err) {
						reject(err)
					} else {
						db.run(
							'DELETE FROM clan_members WHERE clan_id = ?',
							[clan.id],
							err => {
								if (err) {
									reject(err)
								} else {
									resolve()
								}
							}
						)
					}
				})
			})
			.catch(reject)
	})
}

async function leaveClan(userId) {
	return new Promise((resolve, reject) => {
		getClanByUserId(userId)
			.then(clan => {
				if (!clan) {
					reject('‚ùå –í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –∫–ª–∞–Ω–µ.')
					return
				}
				if (clan.creator_id === userId) {
					reject('‚ùå –°–æ–∑–¥–∞—Ç–µ–ª—å –∫–ª–∞–Ω–∞ –Ω–µ –º–æ–∂–µ—Ç –ø–æ–∫–∏–Ω—É—Ç—å –∫–ª–∞–Ω.')
					return
				}
				db.run(
					'DELETE FROM clan_members WHERE user_id = ? AND clan_id = ?',
					[userId, clan.id],
					err => {
						if (err) {
							reject('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ –∫–ª–∞–Ω–∞.')
						} else {
							resolve('‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–∫–∏–Ω—É–ª–∏ –∫–ª–∞–Ω.')
						}
					}
				)
			})
			.catch(reject)
	})
}

async function inviteMember(creatorId, invitee) {
	return new Promise((resolve, reject) => {
		getClanByUserId(creatorId)
			.then(clan => {
				if (!clan || clan.creator_id !== creatorId) {
					reject('üò° –í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º –∫–ª–∞–Ω–∞.')
					return
				}

				// –ò—Å–ø–æ–ª—å–∑—É–µ–º resolveUserId –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
				resolveUserId(invitee)
					.then(async userId => {
						if (!userId) {
							reject('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.')
							return
						}

						// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö (–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –æ–Ω)
						const registeredUser = await getUser(userId)
						if (!registeredUser) {
							reject('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.')
							return
						}

						getClanByUserId(userId)
							.then(existingClan => {
								if (existingClan) {
									reject('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –∫–ª–∞–Ω–µ.')
									return
								}

								db.run(
									'INSERT INTO clan_members (user_id, clan_id) VALUES (?, ?)',
									[userId, clan.id],
									err => {
										if (err) {
											reject(err)
										} else {
											resolve('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω –≤ –∫–ª–∞–Ω.')
										}
									}
								)
							})
							.catch(reject)
					})
					.catch(reject)
			})
			.catch(reject)
	})
}

async function countClanMembers(clanId) {
	return new Promise((resolve, reject) => {
		db.get(
			'SELECT COUNT(*) AS count FROM clan_members WHERE clan_id = ?',
			[clanId],
			(err, row) => {
				if (err) {
					console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Å—á–µ—Ç–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–ª–∞–Ω–∞:', err)
					reject('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Å—á–µ—Ç–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–ª–∞–Ω–∞.')
				} else {
					resolve(row.count)
				}
			}
		)
	})
}

async function startBattle(userId) {
	return new Promise((resolve, reject) => {
		getClanByUserId(userId)
			.then(async clan => {
				if (!clan || clan.creator_id !== userId) {
					reject('üò° –í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º –∫–ª–∞–Ω–∞.')
					return
				}

				// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–ª–∞–Ω–∞
				const memberCount = await countClanMembers(clan.id)
				if (memberCount < 3) {
					reject(
						'üîé –î–ª—è –ø–æ–∏—Å–∫–∞ –≤—Ä–∞–≥–∞, –≤ –∫–ª–∞–Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∫–∞–∫ –º–∏–Ω–∏–º—É–º 3 —É—á–∞—Å—Ç–Ω–∏–∫–∞.'
					)
					return
				}

				db.get(
					'SELECT * FROM clan_battles WHERE clan_id = ?',
					[clan.id],
					(err, battle) => {
						if (err) {
							console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∞–∫—Ç–∏–≤–Ω–æ–π –±–∏—Ç–≤—ã:', err)
							reject('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∞–∫—Ç–∏–≤–Ω–æ–π –±–∏—Ç–≤—ã.')
							return
						}

						if (battle) {
							reject('‚öî –£–∂–µ –∏–¥–µ—Ç –±–∏—Ç–≤–∞.')
							return
						}

						const now = Date.now()
						const lastBattleTimestamp = clan.last_battle_timestamp || 0

						if (now - lastBattleTimestamp < 6 * 60 * 60 * 1000) {
							reject('üîé –ù–µ–ª—å–∑—è –∏—Å–∫–∞—Ç—å –≤—Ä–∞–≥–∞ —á–∞—â–µ —á–µ–º —Ä–∞–∑ –≤ 6 —á–∞—Å–æ–≤.')
							return
						}

						const enemies = [
							{ name: '–õ–µ–¥—è–Ω–∞—è –≤–∞–ª—å–∫–∏—Ä–∏—è', health: 1200 },
							{ name: '–ö—Ä–∞—Å–Ω—ã–π –¥—Ä–∞–∫–æ–Ω', health: 1200 },
							{ name: '–¢–µ–º–Ω—ã–π —Ä—ã—Ü–∞—Ä—å', health: 1200 },
							{ name: '–û–≥–Ω–µ–Ω–Ω—ã–π –º–∞–≥', health: 1200 },
						]
						const shuffledEnemies = enemies.sort(() => Math.random() - 0.5)

						// –í—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤–æ–≥–æ –≤—Ä–∞–≥–∞ –ø–æ—Å–ª–µ –ø–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏—è
						const enemy = shuffledEnemies[0]

						db.run(
							'INSERT INTO clan_battles (clan_id, enemy_name, enemy_health, clan_health, last_battle_timestamp) VALUES (?, ?, ?, ?, ?)',
							[clan.id, enemy.name, enemy.health, clan.health, now],
							err => {
								if (err) {
									console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±–∏—Ç–≤—ã:', err)
									reject('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±–∏—Ç–≤—ã.')
								} else {
									db.run(
										'UPDATE clans SET last_battle_timestamp = ? WHERE id = ?',
										[now, clan.id],
										err => {
											if (err) {
												console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–ª–∞–Ω–∞:', err)
												reject('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–ª–∞–Ω–∞.')
											} else {
												resolve(enemy.name)
											}
										}
									)
								}
							}
						)
					}
				)
			})
			.catch(err => {
				console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–ª–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', err)
				reject('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –∫–ª–∞–Ω–µ.')
			})
	})
}

async function joinClan(userId, clanName) {
	return new Promise((resolve, reject) => {
		db.get('SELECT * FROM clans WHERE name = ?', [clanName], (err, clan) => {
			if (err) {
				reject(err)
			} else if (!clan) {
				reject('üîé –ö–ª–∞–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω.')
			} else {
				db.run(
					'INSERT INTO clan_members (user_id, clan_id) VALUES (?, ?)',
					[userId, clan.id],
					err => {
						if (err) {
							reject(err)
						} else {
							resolve()
						}
					}
				)
			}
		})
	})
}

async function withdrawFromClan(userId, amount) {
	return new Promise((resolve, reject) => {
		getClanByUserId(userId)
			.then(clan => {
				if (!clan || clan.creator_id !== userId) {
					reject('üò° –í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º –∫–ª–∞–Ω–∞.')
					return
				}
				db.get(
					'SELECT * FROM clan_battles WHERE clan_id = ?',
					[clan.id],
					(err, battle) => {
						if (err) {
							reject('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –±–∏—Ç–≤—ã.')
							return
						}
						if (battle) {
							reject('üò° –ù–µ–ª—å–∑—è —Å–Ω–∏–º–∞—Ç—å WCoin –≤–æ –≤—Ä–µ–º—è –∞–∫—Ç–∏–≤–Ω–æ–π –±–∏—Ç–≤—ã.')
							return
						}
						if (clan.balance < amount) {
							reject('üò° –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –≤ –æ–±—â–∞–∫–µ.')
							return
						}
						db.run(
							'UPDATE clans SET balance = balance - ? WHERE id = ?',
							[amount, clan.id],
							err => {
								if (err) {
									reject(err)
								} else {
									// –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å —Å–æ–∑–¥–∞—Ç–µ–ª—è –∫–ª–∞–Ω–∞
									updateUserWcoin(userId, amount)
										.then(() => resolve())
										.catch(reject)
								}
							}
						)
					}
				)
			})
			.catch(reject)
	})
}

async function listClanMembers(clanId) {
	return new Promise((resolve, reject) => {
		db.all(
			'SELECT u.vk_id, u.nickname FROM users u JOIN clan_members cm ON u.vk_id = cm.user_id WHERE cm.clan_id = ?',
			[clanId],
			(err, rows) => {
				if (err) {
					reject('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.')
				} else {
					resolve(rows)
				}
			}
		)
	})
}

async function handleClanList(context, clanId) {
	const members = await listClanMembers(clanId)
	const formattedList = members
		.map(member => `[id${member.vk_id}|${member.nickname}]`)
		.join('\n')
	context.send(`üõ° –£—á–∞—Å—Ç–Ω–∏–∫–∏ –∫–ª–∞–Ω–∞:\n${formattedList}`, {disable_mentions: 1})
}

async function kickMember(creatorId, member) {
	return new Promise((resolve, reject) => {
		getClanByUserId(creatorId)
			.then(clan => {
				if (!clan || clan.creator_id !== creatorId) {
					reject('üò° –í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º –∫–ª–∞–Ω–∞.')
					return
				}

				let memberIdPromise
				if (isNaN(parseInt(member))) {
					memberIdPromise = resolveUserId(member) // –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é resolveUserId –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è ID
				} else {
					memberIdPromise = Promise.resolve(parseInt(member))
				}

				memberIdPromise
					.then(memberId => {
						db.get(
							'SELECT * FROM clan_members WHERE user_id = ? AND clan_id = ?',
							[memberId, clan.id],
							(err, existingMember) => {
								if (err) {
									reject('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞.')
									return
								}
								if (!existingMember) {
									reject('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–ª–∞–Ω–µ.')
								} else {
									db.run(
										'DELETE FROM clan_members WHERE user_id = ? AND clan_id = ?',
										[memberId, clan.id],
										err => {
											if (err) {
												reject(err)
											} else {
												resolve('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∫–∏–∫–Ω—É—Ç –∏–∑ –∫–ª–∞–Ω–∞.')
											}
										}
									)
								}
							}
						)
					})
					.catch(reject)
			})
			.catch(reject)
	})
}

async function attackEnemy(userId, itemName = null) {
	return new Promise((resolve, reject) => {
		getClanByUserId(userId)
			.then(clan => {
				if (!clan) {
					reject('‚ùå –í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –∫–ª–∞–Ω–µ.')
					return
				}
				db.get(
					'SELECT * FROM clan_battles WHERE clan_id = ?',
					[clan.id],
					(err, battle) => {
						if (err || !battle) {
							reject('‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –±–∏—Ç–≤—ã.')
							return
						}
						const enemyDamage = Math.floor(Math.random() * 36) + 15 // —É—Ä–æ–Ω –æ—Ç 15 –¥–æ 50
						const remainingClanHealth = Math.max(
							battle.clan_health - enemyDamage,
							0
						)

						if (itemName) {
							db.get(
								'SELECT quantity FROM user_items WHERE user_id = ? AND item_name = ?',
								[userId, itemName],
								(err, row) => {
									if (err || !row || row.quantity < 1) {
										reject('‚ùå –£ –≤–∞—Å –Ω–µ—Ç —Ç–∞–∫–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞.')
										return
									}
									const damage = itemDamageCalculator(
										itemName,
										battle.enemy_name
									)
									const remainingHealth = Math.max(
										battle.enemy_health - damage,
										0
									)

									db.run(
										'UPDATE clan_battles SET enemy_health = ?, clan_health = ? WHERE clan_id = ?',
										[remainingHealth, remainingClanHealth, clan.id],
										async err => {
											if (err) {
												reject(err)
											} else {
												db.run(
													'UPDATE user_items SET quantity = quantity - 1 WHERE user_id = ? AND item_name = ?',
													[userId, itemName],
													async err => {
														if (err) {
															reject(err)
														} else {
															let result = {
																damage,
																remainingHealth,
																remainingClanHealth,
																enemyDefeated: remainingHealth <= 0,
																clanDefeated: remainingClanHealth <= 0,
																enemyDamage,
															}

															if (result.clanDefeated) {
																const penalty = await handleBattleLoss(clan.id)
																result.penalty = penalty
															} else if (result.enemyDefeated) {
																const reward = await claimReward(userId)
																result.reward = reward
															}

															resolve(result)
														}
													}
												)
											}
										}
									)
								}
							)
						} else {
							const damage = 30
							const remainingHealth = Math.max(battle.enemy_health - damage, 0)

							db.run(
								'UPDATE clan_battles SET enemy_health = ?, clan_health = ? WHERE clan_id = ?',
								[remainingHealth, remainingClanHealth, clan.id],
								async err => {
									if (err) {
										reject(err)
									} else {
										let result = {
											damage,
											remainingHealth,
											remainingClanHealth,
											enemyDefeated: remainingHealth <= 0,
											clanDefeated: remainingClanHealth <= 0,
											enemyDamage,
										}

										if (result.clanDefeated) {
											const penalty = await handleBattleLoss(clan.id)
											result.penalty = penalty
										} else if (result.enemyDefeated) {
											const reward = await claimReward(userId)
											result.reward = reward
										}

										resolve(result)
									}
								}
							)
						}
					}
				)
			})
			.catch(reject)
	})
}

async function handleBattleLoss(clanId) {
	return new Promise((resolve, reject) => {
		db.get('SELECT balance FROM clans WHERE id = ?', [clanId], (err, clan) => {
			if (err || !clan) {
				reject('‚ùå –ö–ª–∞–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω.')
				return
			}

			const penaltyAmount = 1800 // —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —à—Ç—Ä–∞—Ñ
			const newBalance = clan.balance - penaltyAmount

			// –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –∫–ª–∞–Ω–∞
			db.run(
				'UPDATE clans SET balance = ? WHERE id = ?',
				[newBalance, clanId],
				err => {
					if (err) {
						reject('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –±–∞–ª–∞–Ω—Å –∫–ª–∞–Ω–∞.')
					} else {
						// –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å –æ –±–∏—Ç–≤–µ, —á—Ç–æ–±—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å –±–∏—Ç–≤—É
						db.run(
							'DELETE FROM clan_battles WHERE clan_id = ?',
							[clanId],
							err => {
								if (err) {
									reject('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≤–µ—Ä—à–∏—Ç—å –±–∏—Ç–≤—É.')
								} else {
									resolve(penaltyAmount) // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—É–º–º—É —à—Ç—Ä–∞—Ñ–∞
								}
							}
						)
					}
				}
			)
		})
	})
}

function getRemainingTime(lastBattleTimestamp) {
	const now = Date.now()
	const remainingTime = Math.max(
		0,
		6 * 60 * 60 * 1000 - (now - lastBattleTimestamp)
	)
	const hours = Math.floor(remainingTime / (1000 * 60 * 60))
	const minutes = Math.floor((remainingTime % (1000 * 60 * 60)) / (1000 * 60))
	return `${hours} —á–∞—Å–æ–≤ ${minutes} –º–∏–Ω—É—Ç`
}

function itemDamageCalculator(itemName, enemyName) {
	const itemDamageMap = {
		'–ó–æ–ª–æ—Ç–æ–π –º–µ—á': '–¢–µ–º–Ω—ã–π —Ä—ã—Ü–∞—Ä—å',
		'–í–µ–¥—Ä–æ –≤–æ–¥—ã': '–û–≥–Ω–µ–Ω–Ω—ã–π –º–∞–≥',
		'–ü–ª–∞—Ç–∏–Ω–æ–≤–∞—è —Å—Ç—Ä–µ–ª–∞': '–ö—Ä–∞—Å–Ω—ã–π –¥—Ä–∞–∫–æ–Ω',
		'–ó–µ–ª—å–µ –æ–≥–Ω—è': '–õ–µ–¥—è–Ω–∞—è –≤–∞–ª—å–∫–∏—Ä–∏—è',
	}
	return itemDamageMap[itemName] === enemyName ? 50 : 30
}

async function healClan(userId, itemType) {
	const healAmount = itemType === '–ë–æ–ª—å—à–∞—è –∞–ø—Ç–µ—á–∫–∞' ? 15 : 10

	return new Promise((resolve, reject) => {
		getClanByUserId(userId)
			.then(async clan => {
				if (!clan) {
					reject('‚ùå –í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –∫–ª–∞–Ω–µ.')
					return
				}

				// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–∫—Ç–∏–≤–Ω—É—é –±–∏—Ç–≤—É
				db.get(
					'SELECT * FROM clan_battles WHERE clan_id = ?',
					[clan.id],
					async (err, battle) => {
						if (err || !battle) {
							reject('‚ùå –í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –±–∏—Ç–≤—ã –¥–ª—è –≤–∞—à–µ–≥–æ –∫–ª–∞–Ω–∞.')
							return
						}

						// –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥–º–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
						const userItems = await listUserItems(userId)

						// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞—è –∞–ø—Ç–µ—á–∫–∞
						if (!userItems[itemType] || userItems[itemType] < 1) {
							reject(`‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–µ–¥–º–µ—Ç–∞ "${itemType}".`)
							return
						}

						// –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–æ–≤–æ–µ –∑–¥–æ—Ä–æ–≤—å–µ –∫–ª–∞–Ω–∞, –Ω–µ –ø—Ä–µ–≤—ã—à–∞—é—â–µ–µ 1000
						const newClanHealth = Math.min(
							battle.clan_health + healAmount,
							1000
						)

						// –û–±–Ω–æ–≤–ª—è–µ–º –∑–¥–æ—Ä–æ–≤—å–µ –∫–ª–∞–Ω–∞ –≤ –∞–∫—Ç–∏–≤–Ω–æ–π –±–∏—Ç–≤–µ
						db.run(
							'UPDATE clan_battles SET clan_health = ? WHERE clan_id = ?',
							[newClanHealth, clan.id],
							async err => {
								if (err) {
									reject('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ª–µ—á–µ–Ω–∏–∏ –∫–ª–∞–Ω–∞.')
								} else {
									// –°–ø–∏—Å—ã–≤–∞–µ–º –∞–ø—Ç–µ—á–∫—É –∏–∑ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
									await updateUserItems(userId, itemType, -1)
									resolve(
										`üõ° –ö–ª–∞–Ω –≤—ã–ª–µ—á–µ–Ω –Ω–∞ ${healAmount} –µ–¥–∏–Ω–∏—Ü –∑–¥–æ—Ä–æ–≤—å—è. –¢–µ–∫—É—â–µ–µ –∑–¥–æ—Ä–æ–≤—å–µ –∫–ª–∞–Ω–∞: ${newClanHealth}.`
									)
								}
							}
						)
					}
				)
			})
			.catch(reject)
	})
}

async function claimReward(userId) {
	return new Promise((resolve, reject) => {
		getClanByUserId(userId)
			.then(clan => {
				if (!clan) {
					reject('‚ùå –í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –∫–ª–∞–Ω–µ.')
					return
				}
				db.get(
					'SELECT * FROM clan_battles WHERE clan_id = ?',
					[clan.id],
					(err, battle) => {
						if (err || !battle) {
							reject('‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –±–∏—Ç–≤—ã.')
							return
						}
						if (battle.enemy_health > 0) {
							reject('–í—Ä–∞–≥ –Ω–µ –ø–æ–±–µ–∂–¥–µ–Ω.')
							return
						}
						const reward = Math.floor(Math.random() * 400) + 1500
						db.run(
							'UPDATE clans SET balance = balance + ?, wins = wins + 1 WHERE id = ?',
							[reward, clan.id],
							err => {
								if (err) {
									reject(err)
								} else {
									db.run(
										'DELETE FROM clan_battles WHERE clan_id = ?',
										[clan.id],
										err => {
											if (err) {
												reject(err)
											} else {
												resolve(reward)
											}
										}
									)
								}
							}
						)
					}
				)
			})
			.catch(reject)
	})
}

//Wclan —É–ª—É—á—à–µ–Ω–∏—è

async function upgradeClan(userId) {
	return new Promise((resolve, reject) => {
		getClanByUserId(userId)
			.then(async clan => {
				if (!clan || clan.creator_id !== userId) {
					reject('üò° –í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º –∫–ª–∞–Ω–∞.')
					return
				}

				const itemsRequired = JSON.parse(clan.required_items)
				const currentLevel = clan.level
				let upgradeCost, nextLevelItems

				if (currentLevel === 1) {
					nextLevelItems = itemsRequired.level2
					upgradeCost = 4000
				} else if (currentLevel === 2) {
					nextLevelItems = itemsRequired.level3
					upgradeCost = 7000
				} else {
					reject('üîù –í–∞—à –∫–ª–∞–Ω —É–∂–µ –¥–æ—Å—Ç–∏–≥ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è.')
					return
				}

				// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
				const userItems = await listUserItems(userId)

				console.log('–ü—Ä–µ–¥–º–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userItems) // –î–ª—è –æ—Ç–ª–∞–¥–∫–∏
				console.log('–ù–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è:', nextLevelItems) // –î–ª—è –æ—Ç–ª–∞–¥–∫–∏

				const hasAllItems = Object.keys(nextLevelItems).every(item => {
					const requiredQuantity = nextLevelItems[item]
					const userQuantity = userItems[item] || 0
					return userQuantity >= requiredQuantity
				})

				if (!hasAllItems) {
					reject(
						`‚ùå –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è.\n–î–ª—è 2-–≥–æ —É—Ä–æ–≤–Ω—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ:\n${itemsRequired.level2['–≠–±–æ–Ω–∏—Ç–æ–≤—ã–π –º–µ—á']}—à—Ç. –≠–±–æ–Ω–∏—Ç–æ–≤—ã–π –º–µ—á\n${itemsRequired.level2['–≠–±–æ–Ω–∏—Ç–æ–≤–∞—è –±—Ä–æ–Ω—è']}—à—Ç. –≠–±–æ–Ω–∏—Ç–æ–≤–∞—è –±—Ä–æ–Ω—è\n${itemsRequired.level2['–ü–æ—Å–æ—Ö Wayne']}—à—Ç. –ü–æ—Å–æ—Ö Wayne\n4000 WCoin\n\n–î–ª—è 3-–≥–æ —É—Ä–æ–≤–Ω—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ:\n${itemsRequired.level3['–≠–±–æ–Ω–∏—Ç–æ–≤—ã–π –º–µ—á']}—à—Ç. –≠–±–æ–Ω–∏—Ç–æ–≤—ã–π –º–µ—á\n${itemsRequired.level3['–≠–±–æ–Ω–∏—Ç–æ–≤–∞—è –±—Ä–æ–Ω—è']}—à—Ç. –≠–±–æ–Ω–∏—Ç–æ–≤–∞—è –±—Ä–æ–Ω—è\n${itemsRequired.level3['–ü–æ—Å–æ—Ö Wayne']}—à—Ç. –ü–æ—Å–æ—Ö Wayne\n7000 WCoin`
					)
					return
				}

				// –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –∫–ª–∞–Ω–∞
				if (clan.balance < upgradeCost) {
					reject(
						'üò° –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –≤ –æ–±—â–∞–∫–µ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è.\n–î–ª—è 2-–≥–æ —É—Ä–æ–≤–Ω—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ: 4000 WCoin\n–î–ª—è 3-–≥–æ —É—Ä–æ–≤–Ω—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ: 7000 WCoin\n'
					)
					return
				}

				// –°–ø–∏—Å—ã–≤–∞–µ–º –ø—Ä–µ–¥–º–µ—Ç—ã –∏ —Å—Ä–µ–¥—Å—Ç–≤–∞
				db.run(
					'UPDATE clans SET balance = balance - ?, level = level + 1 WHERE id = ?',
					[upgradeCost, clan.id],
					err => {
						if (err) {
							reject('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–ª—É—á—à–µ–Ω–∏–∏ –∫–ª–∞–Ω–∞.')
							return
						}

						// –°–ø–∏—Å—ã–≤–∞–µ–º –ø—Ä–µ–¥–º–µ—Ç—ã
						const itemUpdates = Object.keys(nextLevelItems).map(item => {
							return new Promise((itemResolve, itemReject) => {
								db.run(
									'UPDATE user_items SET quantity = quantity - ? WHERE user_id = ? AND item_name = ?',
									[nextLevelItems[item], userId, item],
									err => {
										if (err) {
											itemReject('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–ø–∏—Å–∞–Ω–∏–∏ –ø—Ä–µ–¥–º–µ—Ç–æ–≤.')
										} else {
											itemResolve()
										}
									}
								)
							})
						})

						Promise.all(itemUpdates)
							.then(() => {
								resolve(
									'‚úÖ –ö–ª–∞–Ω —É—Å–ø–µ—à–Ω–æ —É–ª—É—á—à–µ–Ω –¥–æ —É—Ä–æ–≤–Ω—è ' +
										(currentLevel + 1) +
										'!'
								)
							})
							.catch(reject)
					}
				)
			})
			.catch(reject)
	})
}

// Wclan villages

async function getVillageByName(name) {
	return new Promise((resolve, reject) => {
		db.get('SELECT * FROM villages WHERE name = ?', [name], (err, row) => {
			if (err) reject(err)
			else resolve(row)
		})
	})
}

async function getVillageByClanId(clanId) {
	return new Promise((resolve, reject) => {
		db.get('SELECT * FROM villages WHERE clan_id = ?', [clanId], (err, row) => {
			if (err) reject(err)
			else resolve(row)
		})
	})
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ä–µ–≤–Ω–∏ –≤ –∞–∫—Ç–∏–≤–Ω–æ–π –±–∏—Ç–≤–µ –ø–æ id –∫–ª–∞–Ω–∞
async function getVillageInBattleByClanId(clanId) {
	return new Promise((resolve, reject) => {
		// –ò—â–µ–º –¥–µ—Ä–µ–≤–Ω—é, –≥–¥–µ attacking_clan_id —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å clanId –∞—Ç–∞–∫—É—é—â–µ–≥–æ –∫–ª–∞–Ω–∞
		db.get(
			'SELECT * FROM villages WHERE attacking_clan_id = ? AND is_in_battle = 1',
			[clanId],
			(err, row) => {
				if (err) reject(err)
				else resolve(row)
			}
		)
	})
}

async function updateVillageHealth(villageId, health) {
	return new Promise((resolve, reject) => {
		db.run(
			'UPDATE villages SET health = ? WHERE id = ?',
			[health, villageId],
			err => {
				if (err) reject(err)
				else resolve()
			}
		)
	})
}

async function updateClanHealth(clanId, health) {
	return new Promise((resolve, reject) => {
		db.run(
			'UPDATE clans SET health = ? WHERE id = ?',
			[health, clanId],
			err => {
				if (err) reject(err)
				else resolve()
			}
		)
	})
}

async function captureVillage(clanId, villageId) {
	const currentTime = Math.floor(Date.now() / 1000) // –¢–µ–∫—É—â–∞—è –º–µ—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
	return new Promise((resolve, reject) => {
		db.run(
			'UPDATE villages SET clan_id = ?, health = 1300, is_in_battle = 0, last_join_timestamp = ? WHERE id = ?',
			[clanId, currentTime, villageId],
			err => {
				if (err) reject(err)
				else resolve()
			}
		)
	})
}

async function setVillageBattleStatus(villageId, isInBattle) {
	return new Promise((resolve, reject) => {
		db.run(
			'UPDATE villages SET is_in_battle = ? WHERE id = ?',
			[isInBattle, villageId],
			err => {
				if (err) reject(err)
				else resolve()
			}
		)
	})
}

async function getVillagesByClanId(clanId) {
	return new Promise((resolve, reject) => {
		db.all(
			'SELECT name FROM villages WHERE clan_id = ?',
			[clanId],
			(err, rows) => {
				if (err) reject(err)
				else resolve(rows)
			}
		)
	})
}

async function updateVillageClan(villageId, clanId) {
	return db.run(`UPDATE villages SET clan_id = ? WHERE id = ?`, [
		clanId,
		villageId,
	])
}

async function setAttackingClan(villageId, clanId) {
	await db.run('UPDATE villages SET attacking_clan_id = ? WHERE id = ?', [
		clanId,
		villageId,
	])
}

async function startBattleWithVillage(userId, village, context) {
	const clan = await getClanByUserId(userId)

	if (!clan) {
		context.send('‚ùå –í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –∫–ª–∞–Ω–µ.')
		return
	}

	// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–∫—Ç–∏–≤–Ω—É—é –±–∏—Ç–≤—É
	if (village.is_in_battle) {
		context.send('‚ùå –≠—Ç–∞ –¥–µ—Ä–µ–≤–Ω—è —É–∂–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –±–∏—Ç–≤–µ.')
		return
	}

	// –ï—Å–ª–∏ –¥–µ—Ä–µ–≤–Ω—è –Ω–∏–∫–µ–º –Ω–µ –∑–∞—Ö–≤–∞—á–µ–Ω–∞, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–ª–∞–Ω –∫–∞–∫ –∞—Ç–∞–∫—É—é—â–∏–π
	if (village.clan_id === null) {
		await updateVillageClan(village.id, clan.id) // –ó–∞—Ö–≤–∞—Ç—ã–≤–∞–µ–º –¥–µ—Ä–µ–≤–Ω—é –¥–ª—è –∫–ª–∞–Ω–∞
	}

	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–µ—Ä–µ–≤–Ω—é –∫–∞–∫ –Ω–∞—Ö–æ–¥—è—â—É—é—Å—è –≤ –±–∏—Ç–≤–µ –∏ —Ñ–∏–∫—Å–∏—Ä—É–µ–º –∞—Ç–∞–∫—É—é—â–∏–π –∫–ª–∞–Ω
	await setVillageBattleStatus(village.id, 1)
	await setAttackingClan(village.id, clan.id)

	// –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∑–¥–æ—Ä–æ–≤—å–µ –¥–µ—Ä–µ–≤–Ω–∏ –∏ –∫–ª–∞–Ω–∞
	await updateVillageHealth(village.id, 1300)
	await updateClanHealth(clan.id, 1000)

	context.send(`üî• –ù–∞—á–∞–ª–∞—Å—å –±–∏—Ç–≤–∞ —Å –¥–µ—Ä–µ–≤–Ω–µ–π "${village.name}"!\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /wclan –∞—Ç–∞–∫–∞ [–Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞] –∏–ª–∏ /wclan –∞—Ç–∞–∫–∞\n/wclan healv [–õ–µ–≥–∫–∞—è –∞–ø—Ç–µ—á–∫–∞ –∏–ª–∏ –ë–æ–ª—å—à–∞—è –∞–ø—Ç–µ—á–∫–∞]`)
}

async function initializeVillageIncome() {
	db.run('UPDATE villages SET income_per_min = ? WHERE name = ?', [
		0.83,
		'–¢–∞–ª–æ—Ä–∏–Ω',
	])
	db.run('UPDATE villages SET income_per_min = ? WHERE name = ?', [
		0.90,
		'Waynes City',
	])
	db.run('UPDATE villages SET income_per_min = ? WHERE name = ?', [
		0.79,
		'–°—Ç–∞—Ä—ã–π –•–µ–ª—å–º–¥–æ—Ä—Ñ',
	])
	console.log('–î–æ—Ö–æ–¥—ã –¥–µ—Ä–µ–≤–µ–Ω—å –±—ã–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã.')
}

// –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–æ—Ö–æ–¥–∞ –¥–µ—Ä–µ–≤–µ–Ω—å
initializeVillageIncome()

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –∫–ª–∞–Ω–æ–≤
async function getAllClans() {
	return new Promise((resolve, reject) => {
		db.all(
			'SELECT id, name, balance FROM clans',
			[],
			(err, rows) => {
				if (err) reject(err)
				else resolve(rows)
			}
		)
	})
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –∫–ª–∞–Ω–∞
async function updateClanBalance(clanId, amount) {
	return new Promise((resolve, reject) => {
		db.run(
			'UPDATE clans SET balance = balance + ? WHERE id = ?',
			[amount, clanId],
			(err) => {
				if (err) reject(err)
				else resolve()
			}
		)
	})
}

async function getVillagesByClanIdWithIncome(clanId) {
	return new Promise((resolve, reject) => {
		db.all(
			'SELECT name, income_per_min FROM villages WHERE clan_id = ?',
			[clanId],
			(err, rows) => {
				if (err) reject(err)
				else resolve(rows)
			}
		)
	})
}

async function addIncomeToClanFunds() {
	const clans = await getAllClans()

	for (const clan of clans) {
		const villages = await getVillagesByClanIdWithIncome(clan.id)
		const totalIncomePerMinute = villages.reduce(
			(acc, v) => acc + v.income_per_min,
			0
		)

		if (totalIncomePerMinute > 0) {
			await updateClanBalance(clan.id, totalIncomePerMinute)
		}
	}
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
setInterval(addIncomeToClanFunds, 60 * 1000)

// wclan battle_clans
/*
async function getActiveBattleByClanId(clanId) {
	return new Promise((resolve, reject) => {
		db.get(
			`SELECT * FROM active_clan_wars WHERE clan1_id = ? OR clan2_id = ?`,
			[clanId, clanId],
			(err, row) => {
				if (err) {
					reject(err)
				} else {
					resolve(row)
				}
			}
		)
	})
}
*/
// fund

async function depositToFund(userId, amount) {
	try {
		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ WCoin —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
		const userWcoin = await getUserWcoin(userId)
		if (userWcoin < amount) {
			return '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ WCoin –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ–æ–Ω–¥–∞.'
		}

		// –û–±–Ω–æ–≤–ª—è–µ–º WCoin –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
		await updateUserWcoin(userId, -amount)

		// –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å —Ñ–æ–Ω–¥–∞
		const fund = await new Promise((resolve, reject) => {
			db.get('SELECT balance FROM fund', (err, row) => {
				if (err) reject(err)
				else resolve(row ? row.balance : null)
			})
		})

		// –ï—Å–ª–∏ —Ñ–æ–Ω–¥–∞ –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å —Å –±–∞–ª–∞–Ω—Å–æ–º 0
		if (fund === null) {
			await new Promise((resolve, reject) => {
				db.run('INSERT INTO fund (balance) VALUES (0)', function (err) {
					if (err) reject(err)
					else resolve()
				})
			})
		}

		// –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–æ–Ω–¥
		await new Promise((resolve, reject) => {
			db.run('UPDATE fund SET balance = balance + ?', [amount], function (err) {
				if (err) reject(err)
				else resolve()
			})
		})

		// –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π
		await new Promise((resolve, reject) => {
			db.run(
				'INSERT INTO fund_contributions (user_id, amount) VALUES (?, ?)',
				[userId, amount],
				function (err) {
					if (err) reject(err)
					else resolve()
				}
			)
		})

		return `–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–ø–æ–ª–Ω–∏–ª–∏ —Ñ–æ–Ω–¥ –Ω–∞ ${amount} WCoin.`
	} catch (error) {
		console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ñ–æ–Ω–¥–∞:', error)
		return '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ñ–æ–Ω–¥–∞.'
	}
}

async function showFund(context) {
	try {
		const fundBalance = await new Promise((resolve, reject) => {
			db.get('SELECT balance FROM fund', (err, row) => {
				if (err) reject(err)
				else resolve(row ? row.balance : 0)
			})
		})

		const topContributors = await new Promise((resolve, reject) => {
			db.all(
				'SELECT user_id, SUM(amount) as total_amount FROM fund_contributions GROUP BY user_id ORDER BY total_amount DESC LIMIT 10',
				(err, rows) => {
					if (err) reject(err)
					else resolve(rows)
				}
			)
		})

		let response = `üí∞ –ë–∞–ª–∞–Ω—Å —Ñ–æ–Ω–¥–∞: ${fundBalance} WCoin\n\n–•–æ—á–µ—à—å –±—ã—Ç—å –≤ —Ç–æ–ø–µ? –ü–∏—à–∏ /—Ñ–æ–Ω–¥ –ø–æ–ø–æ–ª–Ω–∏—Ç—å [—Å—É–º–º–∞]\n\n–¢–æ–ø 10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –ø–æ–ø–æ–ª–Ω–∏–≤—à–∏—Ö —Ñ–æ–Ω–¥:\n`

		for (const contributor of topContributors) {
			const user = await getUser(contributor.user_id)
			const nickname = user ? user.nickname : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
			response += `‚Ä¢ [id${contributor.user_id}|${nickname}] - ${contributor.total_amount} WCoin\n`
		}

		context.send(response, { disable_mentions: 1 }) // –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ disable_mentions
	} catch (error) {
		console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Ñ–æ–Ω–¥–∞:', error)
		context.send('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Ñ–æ–Ω–¥–∞.', {
			disable_mentions: 1,
		})
	}
}

let currentQuest = null
let quests = {}
const lastAttackTime = {}
const allowedIds = [252840773, 422202607]

vk.updates.on('message_new', async context => {
	const message = context.text ? context.text : ''
	const userId = context.senderId
	const userNickname = await getUserNickname(userId) // –ø–æ–ª—É—á–∞–µ–º –Ω–∏–∫–Ω–µ–π–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
	const user = await getUser(userId)

	if (user) {
		// –ù–∞—á–∏—Å–ª—è–µ–º —Ä–µ–π—Ç–∏–Ω–≥ –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
		await updateUserRating(userId, 1)

		// –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
		const updatedUser = await getUser(userId)

		// –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å –ø–µ—Ä–µ–¥–∞—á–µ–π context
		const newStatus = await updateUserStatus(
			userId,
			updatedUser.rating,
			context
		)

		// –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–∏–ª—Å—è, —É–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
		if (newStatus !== updatedUser.status) {
			await context.send(`üéâ –í–∞—à –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å: ${newStatus}!`)
		}
	}

	if (message === '/–ø–∞–Ω–µ–ª—å' || message === '/–ø') {
		await context.send({
			message: '–û—Ç–∫—Ä—ã—Ç–∞ –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:',
			keyboard: Keyboard.builder()
				.textButton({
					label: '–ë–æ–Ω—É—Å',
					color: Keyboard.POSITIVE_COLOR,
					payload: { command: 'bonus' },
				})
				.textButton({
					label: '–õ–æ–ø–∞—Ç—ã',
					color: Keyboard.POSITIVE_COLOR,
					payload: { command: 'shovels' },
				})
				.row()
				.textButton({
					label: '–°–æ–±—ã—Ç–∏–µ',
					color: Keyboard.POSITIVE_COLOR,
					payload: { command: 'quest' },
				})
				.textButton({
					label: '–ö–ª–∞–¥—ã',
					color: Keyboard.POSITIVE_COLOR,
					payload: { command: 'treasures' },
				})
				.row()
				.textButton({
					label: '–ú–∏–Ω–∏ –∏–≥—Ä—ã',
					color: Keyboard.PRIMARY_COLOR,
					payload: { command: 'games' },
				})
				.textButton({
					label: '–ö–æ–º–∞–Ω–¥—ã',
					color: Keyboard.PRIMARY_COLOR,
					payload: { command: 'commands' },
				})
				.row()
				.textButton({
					label: '–ò–≤–µ–Ω—Ç',
					color: Keyboard.SECONDARY_COLOR,
					payload: { command: 'event' },
				})
				.row()
				.textButton({
					label: '–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞',
					color: Keyboard.SECONDARY_COLOR,
					payload: { command: 'ref' },
				})
				.inline(false)
				.oneTime(false),
		})
		return
	}

	// –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –±—ã–ª–æ –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É
	if (context.messagePayload) {
		const command = context.messagePayload.command

		// –û–±—Ä–∞–±–æ—Ç–∫–∞ –±–æ–Ω—É—Å–∞
		if (command === 'bonus') {
			await handleBonusCommand(context)
		} // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–õ–æ–ø–∞—Ç—ã"
		else if (command === 'shovels') {
			await context.send({
				message:
					'–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –ª–æ–ø–∞—Ç–∞–º:\n–û–±—ã—á–Ω–∞—è: 20 WCoin\n–°–µ—Ä–µ–±—Ä—è–Ω–∞—è: 50 WCoin\n–ó–æ–ª–æ—Ç–∞—è: 100 WCoin\n–ü–ª–∞—Ç–∏–Ω–æ–≤–∞—è: 300 WCoin\nWayne–ª–æ–ø–∞—Ç–∞: 700 WCoin\n\n–°–ø–∏—Å–æ–∫ –∫—É–ø–ª–µ–Ω–Ω—ã—Ö –ª–æ–ø–∞—Ç: /–ª–æ–ø–∞—Ç—ã',
				keyboard: Keyboard.builder()
					.textButton({
						label: '/–∫—É–ø–∏—Ç—å –ª–æ–ø–∞—Ç—É –æ–±—ã—á–Ω–∞—è',
						color: Keyboard.POSITIVE_COLOR,
						payload: { command: 'buy_shovel_common' },
					})
					.row()
					.textButton({
						label: '/–∫—É–ø–∏—Ç—å –ª–æ–ø–∞—Ç—É —Å–µ—Ä–µ–±—Ä—è–Ω–∞—è',
						color: Keyboard.POSITIVE_COLOR,
						payload: { command: 'buy_shovel_silver' },
					})
					.row()
					.textButton({
						label: '/–∫—É–ø–∏—Ç—å –ª–æ–ø–∞—Ç—É –∑–æ–ª–æ—Ç–∞—è',
						color: Keyboard.POSITIVE_COLOR,
						payload: { command: 'buy_shovel_gold' },
					})
					.row()
					.textButton({
						label: '/–∫—É–ø–∏—Ç—å –ª–æ–ø–∞—Ç—É –ø–ª–∞—Ç–∏–Ω–æ–≤–∞—è',
						color: Keyboard.POSITIVE_COLOR,
						payload: { command: 'buy_shovel_platinum' },
					})
					.row()
					.textButton({
						label: '/–∫—É–ø–∏—Ç—å –ª–æ–ø–∞—Ç—É wayne–ª–æ–ø–∞—Ç–∞',
						color: Keyboard.POSITIVE_COLOR,
						payload: { command: 'buy_shovel_wayne' },
					})
					.inline(true) // –ò–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏
					.oneTime(false),
			})
			return
		} // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω–ª–∞–π–Ω-–∫–æ–º–∞–Ω–¥—ã –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –ª–æ–ø–∞—Ç—ã
		else if (command.startsWith('buy_shovel_')) {
			// –ú–∞–ø–ø–∏–Ω–≥ –¥–ª—è —Ç–∏–ø–∞ –ª–æ–ø–∞—Ç
			const shovelTypeMap = {
				common: '–æ–±—ã—á–Ω–∞—è',
				silver: '—Å–µ—Ä–µ–±—Ä—è–Ω–∞—è',
				gold: '–∑–æ–ª–æ—Ç–∞—è',
				platinum: '–ø–ª–∞—Ç–∏–Ω–æ–≤–∞—è',
				wayne: 'wayne–ª–æ–ø–∞—Ç–∞',
			}

			// –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–∏–ø–∞ –ª–æ–ø–∞—Ç—ã
			const shovelKey = command.split('_')[2]
			const shovelType = shovelTypeMap[shovelKey]

			if (!shovelType) {
				await context.send('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –ª–æ–ø–∞—Ç—ã.')
				return
			}

			const user = await getUser(userId)

			if (!user) {
				await context.send(
					`üîé ${await getUserMention(userId)}, –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.`
				)
				return
			}

			// –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∑–∞–ø–∏—Å—å –æ –ª–æ–ø–∞—Ç–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
			await ensureUserShovels(userId)

			const currentTimestamp = await getTimestampNow()
			const lastPurchaseTimestamp = user.last_shovel_purchase_timestamp || 0

			if (currentTimestamp < lastPurchaseTimestamp + twoHours) {
				const secondsUntilNextPurchase =
					lastPurchaseTimestamp + twoHours - currentTimestamp
				const minutesUntilNextPurchase = Math.ceil(
					secondsUntilNextPurchase / 60
				)
				await context.send(
					`${await getUserMention(
						userId
					)}, ‚ùå –í—ã —É–∂–µ –ø–æ–∫—É–ø–∞–ª–∏ –ª–æ–ø–∞—Ç—É. –°–ª–µ–¥—É—é—â—É—é –ª–æ–ø–∞—Ç—É –º–æ–∂–Ω–æ –∫—É–ø–∏—Ç—å —á–µ—Ä–µ–∑ ${minutesUntilNextPurchase} –º–∏–Ω—É—Ç.`
				)
				return
			}

			// –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞
			const shovelPrice = shovelPrices[shovelType]

			if (user.wcoin < shovelPrice) {
				await context.send(
					`${await getUserMention(
						userId
					)}, ‚ùå –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ WCoin –¥–ª—è –ø–æ–∫—É–ø–∫–∏ —ç—Ç–æ–π –ª–æ–ø–∞—Ç—ã.`
				)
				return
			}

			// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ WCoin –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ª–æ–ø–∞—Ç—ã
			await updateUserWcoin(userId, -shovelPrice)
			await updateUserShovels(userId, shovelType, 1)
			await updateLastShovelPurchaseTimestamp(userId, currentTimestamp)

			// –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–∫—É–ø–∫–∏
			await context.send(
				`${await getUserMention(
					userId
				)}, ‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∫—É–ø–∏–ª–∏ ${shovelType} –ª–æ–ø–∞—Ç—É –∑–∞ ${shovelPrice} WCoin.\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /–∫–æ–ø–∞—Ç—å –∫–ª–∞–¥ [–Ω–∞–∑–≤–∞–Ω–∏–µ –ª–æ–ø–∞—Ç—ã].`
			)
		} // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–ö–ª–∞–¥—ã"
		else if (command === 'treasures') {
			await context.send({
				message: '–í—ã–±–µ—Ä–∏—Ç–µ –ª–æ–ø–∞—Ç—É –¥–ª—è –∫–æ–ø–∞–Ω–∏—è –∫–ª–∞–¥–∞:',
				keyboard: Keyboard.builder()
					.textButton({
						label: '/–∫–æ–ø–∞—Ç—å –∫–ª–∞–¥ –æ–±—ã—á–Ω–∞—è',
						color: Keyboard.POSITIVE_COLOR,
						payload: { command: '–∫–æ–ø–∞—Ç—å_–∫–ª–∞–¥_common' },
					})
					.row()
					.textButton({
						label: '/–∫–æ–ø–∞—Ç—å –∫–ª–∞–¥ —Å–µ—Ä–µ–±—Ä—è–Ω–∞—è',
						color: Keyboard.POSITIVE_COLOR,
						payload: { command: '–∫–æ–ø–∞—Ç—å_–∫–ª–∞–¥_silver' },
					})
					.row()
					.textButton({
						label: '/–∫–æ–ø–∞—Ç—å –∫–ª–∞–¥ –∑–æ–ª–æ—Ç–∞—è',
						color: Keyboard.POSITIVE_COLOR,
						payload: { command: '–∫–æ–ø–∞—Ç—å_–∫–ª–∞–¥_gold' },
					})
					.row()
					.textButton({
						label: '/–∫–æ–ø–∞—Ç—å –∫–ª–∞–¥ –ø–ª–∞—Ç–∏–Ω–æ–≤–∞—è',
						color: Keyboard.POSITIVE_COLOR,
						payload: { command: '–∫–æ–ø–∞—Ç—å_–∫–ª–∞–¥_platinum' },
					})
					.row()
					.textButton({
						label: '/–∫–æ–ø–∞—Ç—å –∫–ª–∞–¥ wayne–ª–æ–ø–∞—Ç–∞',
						color: Keyboard.POSITIVE_COLOR,
						payload: { command: '–∫–æ–ø–∞—Ç—å_–∫–ª–∞–¥_wayne' },
					})
					.inline(true) // –ò–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏
					.oneTime(false),
			})
			return
		}

		// –û–±—Ä–∞–±–æ—Ç–∫–∞ payload –æ—Ç –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫ –¥–ª—è –∫–æ–ø–∞–Ω–∏—è –∫–ª–∞–¥–∞
		else if (
			context.messagePayload &&
			context.messagePayload.command.startsWith('–∫–æ–ø–∞—Ç—å_–∫–ª–∞–¥_')
		) {
			const shovelKey = context.messagePayload.command.split('_')[2] // –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–ª—é—á —Ç–∏–ø–∞ –ª–æ–ø–∞—Ç—ã (common, silver –∏ —Ç.–¥.)
			const shovelType = getShovelType(shovelKey) // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫–æ–º–∞–Ω–¥—É –≤ —Ç–∏–ø –ª–æ–ø–∞—Ç—ã

			console.log('Command from payload:', context.messagePayload.command)
			console.log('shovelType:', shovelType)

			// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ç–∏–ø–∞ –ª–æ–ø–∞—Ç—ã –≤ –Ω–∞–≥—Ä–∞–¥–∞—Ö
			if (!shovelType || !shovelRewards[shovelType]) {
				await context.send(
					`‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –ª–æ–ø–∞—Ç—ã. –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏–ø—ã: –æ–±—ã—á–Ω–∞—è, —Å–µ—Ä–µ–±—Ä—è–Ω–∞—è, –∑–æ–ª–æ—Ç–∞—è, –ø–ª–∞—Ç–∏–Ω–æ–≤–∞—è, wayne–ª–æ–ø–∞—Ç–∞.`
				)
				return
			}

			const user = await getUser(userId)
			if (!user) {
				await context.send(
					`üîé ${await getUserMention(userId)}, –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.`
				)
				return
			}

			await ensureUserShovels(userId)

			const userShovels = await getUserShovels(userId)
			console.log('Retrieved user shovels:', userShovels)

			// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ª–æ–ø–∞—Ç—ã —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É, —á—Ç–æ–±—ã —É—á–∏—Ç—ã–≤–∞—Ç—å —Å–ª—É—á–∞–π —Å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º
			if (
				!userShovels ||
				!userShovels[shovelType] ||
				userShovels[shovelType] <= 0
			) {
				await context.send(
					`${await getUserMention(
						userId
					)}, ‚ùå –ö–æ–º–∞–Ω–¥–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç –Ω–∏–∂–µ –∏ –≤–º–µ—Å—Ç–æ –±—É–∫–≤—ã "–Ω" –≤—Å—Ç–∞–≤–∏—Ç—å –≤–∞—à—É –∫—É–ø–ª–µ–Ω–Ω—É—é –ª–æ–ø–∞—Ç—É.`
				)
				await context.send(`/–∫–æ–ø–∞—Ç—å –∫–ª–∞–¥ –Ω`)
				return
			}

			// –ü–æ–ª—É—á–∞–µ–º –Ω–∞–≥—Ä–∞–¥—É –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ –ª–æ–ø–∞—Ç—ã
			const shovel = shovelRewards[shovelType]
			if (!shovel) {
				console.error(
					`‚ùå –õ–æ–ø–∞—Ç–∞ —Å —Ç–∏–ø–æ–º "${shovelType}" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ shovelRewards.`
				)
				await context.send(
					`${await getUserMention(userId)}, ‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –ª–æ–ø–∞—Ç—ã.`
				)
				return
			}

			// –í—ã–ø–æ–ª–Ω—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –ø–æ –∫–æ–ø–∞–Ω–∏—é
			const reward = calculateReward(shovel)
			const randomItem = itemList[Math.floor(Math.random() * itemList.length)]
			const quantity = Math.floor(Math.random() * 3) + 1

			// –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
			await updateUserItems(userId, randomItem, quantity)

			// –ü—Ä–æ–≤–µ—Ä–∫–∞: –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–æ–ø–∞—Ç —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∏—Ö –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–æ–ª—å—à–µ 0
			if (userShovels[shovelType] > 0) {
				await updateUserShovels(userId, shovelType, -1) // –£–º–µ–Ω—å—à–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–æ–ø–∞—Ç –Ω–∞ 1
			} else {
				console.log(
					`–û—à–∏–±–∫–∞: —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç ${shovelType} –ª–æ–ø–∞—Ç—ã –¥–ª—è —É–º–µ–Ω—å—à–µ–Ω–∏—è.`
				)
				await context.send(
					`${await getUserMention(
						userId
					)}, ‚ùå –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–æ–ø–∞—Ç –¥–ª—è –∫–æ–ø–∞–Ω–∏—è.`
				)
				return
			}

			// –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞–≥—Ä–∞–¥—ã
			await updateUserRewards(userId, reward)

			// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞–≥—Ä–∞–¥–µ
			await context.send(
				`${await getUserMention(
					userId
				)}, ü§ë –í—ã –Ω–∞—à–ª–∏ –∫–ª–∞–¥! –í–∞—à –ø—Ä–∏–∑: ${reward} WCoin –∏ ${quantity} —à—Ç. ${randomItem}!`
			)
		} else if (command === 'some_command') {
			try {
				// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞
				const user = await new Promise((resolve, reject) => {
					db.get(
						'SELECT * FROM users WHERE vk_id = ?',
						[context.senderId],
						(err, row) => {
							if (err) reject(err)
							else resolve(row)
						}
					)
				})

				if (!user) {
					await context.send('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.')
					return
				}

				// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
				if (!user.referral_code) {
					await generateReferralCodeOld(user.vk_id)
				}

				// –í–∞—à –∫–æ–¥ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã
				await context.send('–í–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!')
			} catch (error) {
				console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã:', error)
				await context.send('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã.')
			}
		} else if (command === 'ref') {
			try {
				console.log('Executing db.get query for user:', context.senderId)

				// –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
				const user = await new Promise((resolve, reject) => {
					db.get(
						'SELECT * FROM users WHERE vk_id = ?',
						[context.senderId],
						(err, row) => {
							if (err) reject(err)
							else resolve(row)
						}
					)
				})

				if (!user) {
					await context.send('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.')
					return
				}

				console.log('Executing db.all query for referred users...')

				// –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥
				const referredUsers = await new Promise((resolve, reject) => {
					db.all(
						'SELECT u.nickname FROM users u JOIN referrals r ON u.vk_id = r.referred_vk_id WHERE r.referrer_vk_id = ?',
						[context.senderId],
						(err, rows) => {
							if (err) reject(err)
							else resolve(rows)
						}
					)
				})

				const referredCount = referredUsers.length // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã—Ö
				const referredList =
					referredUsers.map(user => user.nickname).join(', ') || '–Ω–∏–∫–æ–≥–æ'
				const referralCode = user.referral_code || '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –Ω–∞–ø–∏—à–∏ /reg'

				// –ü–æ–ª—É—á–∞–µ–º –Ω–∏–∫ –ø—Ä–∏–≥–ª–∞—Å–∏–≤—à–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
				const referrer = await new Promise((resolve, reject) => {
					db.get(
						'SELECT nickname FROM users WHERE vk_id = ?',
						[user.referred_by],
						(err, row) => {
							if (err) reject(err)
							else resolve(row)
						}
					)
				})
				const referredBy = referrer ? referrer.nickname : '–ù–∏–∫—Ç–æ'

				// –£—Ä–æ–≤–µ–Ω—å —Ä–µ—Ñ–µ—Ä–∞–ª–∞ –∏ –Ω–∞–≥—Ä–∞–¥–∞
				const referralLevel = user.referral_level
				let task, reward
				const completedTasks = [] // –°–æ–∑–¥–∞–µ–º –º–∞—Å—Å–∏–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π

				// –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —É—Ä–æ–≤–Ω—è
				if (referralLevel >= 1) {
					completedTasks.push('–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å 1 —á–µ–ª')
				}
				if (referralLevel >= 2) {
					completedTasks.push('–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å 3 —á–µ–ª')
				}
				if (referralLevel >= 3) {
					completedTasks.push('–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å 6 —á–µ–ª')
				}
				if (referralLevel >= 4) {
					completedTasks.push('–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å 8 —á–µ–ª')
				}

				// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â—É—é –∑–∞–¥–∞—á—É –∏ –Ω–∞–≥—Ä–∞–¥—É
				switch (referralLevel) {
					case 1:
						task = '‚ö† –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å 1 —á–µ–ª'
						reward = '150WCoin'
						break
					case 2:
						task = '‚ö† –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å 3 —á–µ–ª'
						reward = '300WCoin'
						break
					case 3:
						task = '‚ö† –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å 6 —á–µ–ª'
						reward = '600WCoin'
						break
					case 4:
						task = '‚ö† –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å 8 —á–µ–ª'
						reward = '1000WCoin'
						break
					default:
						task = '–ó–∞–≤–µ—Ä—à–µ–Ω—ã –≤—Å–µ –∑–∞–¥–∞–Ω–∏—è'
						reward = '–ù–µ—Ç –Ω–∞–≥—Ä–∞–¥—ã'
				}

				// –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π
				const completedTasksList = completedTasks.length
					? completedTasks.map(t => `‚úÖ ${t}`).join('\n')
					: '–ù–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π'

				// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
				await context.send({
					message: `–í—ã –ø—Ä–∏–≥–ª–∞—Å–∏–ª–∏: ${referredCount} —á–µ–ª.\n–û—Ç–ø—Ä–∞–≤—å –∫–æ–¥ –¥—Ä—É–≥—É: /–≤–≤–µ—Å—Ç–∏ –∫–æ–¥ ${referralCode}\n–í–∞—Å –ø—Ä–∏–≥–ª–∞—Å–∏–ª: ${referredBy}\n\n–í–∞—à —É—Ä–æ–≤–µ–Ω—å —Ä–µ—Ñ–µ—Ä–∞–ª–∞: ${referralLevel}\n${task}\n–ù–∞–≥—Ä–∞–¥–∞: ${reward}\n\n–°–ø–∏—Å–æ–∫ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã—Ö: ${referredList}\n\n‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è:\n${completedTasksList}`,
				})
			} catch (error) {
				console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞:', error)
				await context.send('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞.')
			}
		} else if (command === 'quest') {
			if (currentQuest) {
				await context.send(
					`${await getUserMention(userId)}, üî• –¢–µ–∫—É—â–µ–µ —Å–æ–±—ã—Ç–∏–µ: ${currentQuest}`
				)
			} else {
				await context.send(
					`${await getUserMention(
						userId
					)}, üôÅ –í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π, –Ω–æ –æ–Ω–∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–æ—è–≤—è—Ç—Å—è!`
				)
			}
		} else if (command === 'games') {
			await context.send(
				`${await getUserMention(
					userId
				)}, üéÆ –ò–≥—Ä–∞–π –≤ –º–∏–Ω–∏-–∏–≥—Ä—ã –∏ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π –±–æ–ª—å—à–µ WCoin!\n\n/wbar - —Å–æ–∑–¥–∞–≤–∞–π –∫–æ–º–Ω–∞—Ç—ã –∏–ª–∏ –ø—Ä–∏–Ω–∏–º–∞–π —Å—Ç–∞–≤–∫–∏. –û—Å—Ç–æ—Ä–æ–∂–Ω–æ, –º–æ–∂–Ω–æ —É–≤–ª–µ—á—å—Å—è.\n\n/—Ç–∞–ø - –ø—Ä–æ—Å—Ç–æ –ø–∏—à–∏ –∫–æ–º–∞–Ω–¥—É, –ø—Ä–æ–∫–∞—á–∏–≤–∞–π –µ—ë –∏ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π WCoin (–∑–∞–ø—Ä–µ—â–µ–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤ –±–µ—Å–µ–¥–∞—Ö!)\n\n–°–∫–æ—Ä–æ –±—É–¥–µ—Ç –±–æ–ª—å—à–µ –∏–≥—Ä...`
			)
		} else if (command === 'commands') {
			await context.send(
				`${await getUserMention(
					userId
				)}, ‚öô –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã: –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ "/".\n\nüèÜ–ê–∫–∫–∞—É–Ω—Ç:\nüë§"–ø—Ä–æ—Ñ–∏–ª—å"\nüí∏"–ø–µ—Ä–µ–¥–∞—Ç—å"\nüí∞"usepromo"\nüìù"—Å–º–µ–Ω–∏—Ç—å –Ω–∏–∫"\nüìà"—Ä–µ—Ñ–µ—Ä–∞–ª–∫–∞"\n"ref".\n\nüè™WShop:\nüõç"–†—ã–Ω–æ–∫[wmarkets]"\n"–°—Ç–∞—Ç—É—Å—ã" [NEW]\nüì¶–ö–µ–π—Å—ã:\nüéí"–∫–µ–π—Å—ã"\nüí≥"–∫—É–ø–∏—Ç—å –∫–µ–π—Å"\nüé∞"–æ—Ç–∫—Ä—ã—Ç—å –∫–µ–π—Å [–Ω–∞–∑–≤–∞–Ω–∏–µ]"\nü•Ñ–õ–æ–ø–∞—Ç—ã:\nüéí"–ª–æ–ø–∞—Ç—ã"\nüí≥"–∫—É–ø–∏—Ç—å –ª–æ–ø–∞—Ç—É [–Ω–∞–∑–≤–∞–Ω–∏–µ_–ª–æ–ø–∞—Ç—ã]"\n\nüé±–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è:\nüõ°"–ö–ª–∞–Ω[wclan]"\nüé≤"–±–∞—Ä [wbar]"\nüíé"–±–æ–Ω—É—Å"\nüçÄ"–∫–ª–∞–¥—ã"\nüî•"—Å–æ–±—ã—Ç–∏–µ"\nüëâ"—Ç–∞–ø–∞–ª–∫–∞" [NEW]\nüè¶"—Ñ–æ–Ω–¥"\nüìà"winvest"\n\nüõ†–ü—Ä–æ—á–µ–µ:\nüíª"–ø–∞–Ω–µ–ª—å(/–ø)"\nüëë"—Ç–æ–ø"\n‚õî"–ø—Ä–∞–≤–∏–ª–∞"\nüí¨"–∫–æ–º–∞–Ω–¥—ã"\nüÜò"–ø–æ–º–æ—â—å"\n\nüîÆVIPüîÆ\nüëò"–º–µ—Ä—á"\nü•á"vip"`
			)
		} else if (command === 'event') {
			let questList = '–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–≤–µ—Å—Ç–æ–≤:\n'

			for (const taskId in quests) {
				const quest = quests[taskId]
				const taskStatus = await getUserTaskStatus(userId, taskId)
				const statusIcon = taskStatus.completed ? '‚úÖ' : '‚ùå'
				questList += `-- ${quest.text}. –ù–∞–≥—Ä–∞–¥–∞: ${quest.reward} WCoin [${statusIcon}]\n`
			}

			if (questList === '–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–≤–µ—Å—Ç–æ–≤:\n') {
				questList += '–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π.'
			}

			await context.send(questList)
			return
		}
	}

	if (message.startsWith('/—Ñ–æ–Ω–¥ –ø–æ–ø–æ–ª–Ω–∏—Ç—å')) {
		const amount = parseInt(message.split(' ')[2], 10)
		if (isNaN(amount) || amount <= 0) {
			return context.send('–£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è.')
		}
		const response = await depositToFund(userId, amount)
		return context.send(response, { disable_mention: true })
	}

	// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ñ–æ–Ω–¥–∞
	if (message.startsWith('/—Ñ–æ–Ω–¥')) {
		return showFund(context)
	}

	if (message.startsWith('/wclan –∏–Ω—Ñ–æ')) {
		const clan = await getClanByUserId(userId)

		if (clan) {
			const villages = await getVillagesByClanIdWithIncome(clan.id)

			let totalIncomePerMinute = 0
			let villageInfo

			if (villages.length > 0) {
				villageInfo = villages
					.map(v => {
						totalIncomePerMinute += v.income_per_min
						return `${v.name}: ${v.income_per_min.toFixed(2)} WCoin/–º–∏–Ω`
					})
					.join('\n')
			} else {
				villageInfo = '–ù–µ—Ç –≤–ª–∞–¥–µ–Ω–∏–π'
			}

			// –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–∏–π –¥–æ—Ö–æ–¥ –≤ —á–∞—Å –∏ –æ–∫—Ä—É–≥–ª—è–µ–º –¥–æ 2 –∑–Ω–∞–∫–æ–≤
			const totalIncomePerHour = (totalIncomePerMinute * 60).toFixed(2)

			// –û–∫—Ä—É–≥–ª—è–µ–º –±–∞–ª–∞–Ω—Å –æ–±—â–∞–∫–∞ –¥–æ 2 –∑–Ω–∞–∫–æ–≤
			const formattedBalance = parseFloat(clan.balance).toFixed(2)

			context.send(
				`üõ° –ù–∞–∑–≤–∞–Ω–∏–µ –∫–ª–∞–Ω–∞: ${clan.name}\n` +
					`üëë –°–æ–∑–¥–∞—Ç–µ–ª—å: ${clan.creator_nickname}\n` +
					`üí∞ –û–±—â–∞–∫: ${formattedBalance}\n` + // –û–∫—Ä—É–≥–ª–µ–Ω–Ω—ã–π –±–∞–ª–∞–Ω—Å
					`ü•≥ –ü–æ–±–µ–¥—ã: ${clan.wins}\n` +
					`ü§í –ü–æ—Ä–∞–∂–µ–Ω–∏—è: ${clan.losses}\n` +
					`üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏: ${clan.member_count}\n` +
					`‚≠ê –£—Ä–æ–≤–µ–Ω—å: ${clan.level}\n` +
					`üè∞ –í–ª–∞–¥–µ–Ω–∏—è:\n${villageInfo}\n` +
					`–û–±—â–∏–π –¥–æ—Ö–æ–¥ –≤ —á–∞—Å: ${totalIncomePerHour} WCoin`
			)
		} else {
			context.send('‚ùå –í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –∫–ª–∞–Ω–µ.')
		}
	} /* 
	else if (
		typeof message === 'string' &&
		message.startsWith('/wclan –±–∏—Ç–≤–∞')
	) {
		const args = message.split(' ')
		const item = args[2] || null

		console.log(
			`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID ${userId} –≤—ã–∑—ã–≤–∞–µ—Ç /wclan –±–∏—Ç–≤–∞. –ü–æ–ª—É—á–∞–µ–º –∫–ª–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...`
		)

		const clan = await getClanByUserId(userId)
		console.log(`–ü–æ–ª—É—á–µ–Ω –∫–ª–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:`, clan)

		if (!clan) {
			return context.send('–í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –∫–ª–∞–Ω–µ.')
		}

		console.log(`–ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –±–∏—Ç–≤—É –¥–ª—è –∫–ª–∞–Ω–∞ —Å ID ${clan.id}...`)

		const battle = await getActiveBattleByClanId(clan.id)
		console.log(`–ü–æ–ª—É—á–µ–Ω–∞ –∞–∫—Ç–∏–≤–Ω–∞—è –±–∏—Ç–≤–∞:`, battle)

		if (!battle) {
			return context.send('–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –±–∏—Ç–≤—ã.')
		}

		const opponentClanId =
			battle.clan1_id === clan.id ? battle.clan2_id : battle.clan1_id
		const damage = item ? 50 : 10

		db.run(
			`
        UPDATE active_clan_wars 
        SET ${
					battle.clan1_id === clan.id ? 'clan2_health' : 'clan1_health'
				} = ${battle.clan1_id === clan.id ? 'clan2_health' : 'clan1_health'} - ?
        WHERE id = ?
        `,
			[damage, battle.id],
			err => {
				if (err) {
					console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–∏—Ç–≤—ã:', err)
					return context.send('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–∏—Ç–≤—ã.')
				}

				// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–±–µ–¥—ã
				db.get(
					`SELECT * FROM active_clan_wars WHERE id = ?`,
					[battle.id],
					(err, updatedBattle) => {
						if (err) {
							console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–π –±–∏—Ç–≤—ã:', err)
							return context.send('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–∏—Ç–≤—ã.')
						}

						console.log('–û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –±–∏—Ç–≤–∞:', updatedBattle)

						if (
							updatedBattle.clan1_health <= 0 ||
							updatedBattle.clan2_health <= 0
						) {
							const winnerClanId =
								updatedBattle.clan1_health > 0
									? updatedBattle.clan1_id
									: updatedBattle.clan2_id
							const loserClanId =
								winnerClanId === updatedBattle.clan1_id
									? updatedBattle.clan2_id
									: updatedBattle.clan1_id

							// –ü–µ—Ä–µ–≤–æ–¥ —Å—É–º–º—ã –ø–æ–±–µ–¥–∏—Ç–µ–ª—é
							db.run(`UPDATE clans SET balance = balance + ? WHERE id = ?`, [
								updatedBattle.amount,
								winnerClanId,
							])

							context.send(
								`–ö–ª–∞–Ω ${
									winnerClanId === updatedBattle.clan1_id
										? battle.clan1_name
										: battle.clan2_name
								} –ø–æ–±–µ–¥–∏–ª –∏ –ø–æ–ª—É—á–∏–ª ${updatedBattle.amount} WCoin!`
							)

							// –£–¥–∞–ª—è–µ–º –±–∏—Ç–≤—É
							db.run(`DELETE FROM active_clan_wars WHERE id = ?`, [battle.id])
						} else {
							context.send(
								`–í—ã –Ω–∞–Ω–µ—Å–ª–∏ ${damage} —É—Ä–æ–Ω–∞ –∫–ª–∞–Ω—É –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞. –ó–¥–æ—Ä–æ–≤—å–µ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞: ${
									updatedBattle.clan1_id === clan.id
										? updatedBattle.clan2_health
										: updatedBattle.clan1_health
								}.`
							)
						}
					}
				)
			}
		)
	} else if (typeof message === 'string' && message.startsWith('/wclan –≤—ã–∑–æ–≤')) {
		console.log(
			`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID ${userId} –≤—ã–∑—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /wclan –≤—ã–∑–æ–≤. –ü–æ–ª—É—á–∞–µ–º –∫–ª–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...`
		)

		const args = message.split(' ')
		const target = args[2] // ID –∏–ª–∏ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
		const amount = parseInt(args[3], 10)

		const opponentId = await resolveUserId(target)
		console.log(`–ü–æ–ª—É—á–µ–Ω ID –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞: ${opponentId}`)

		const clan = await getClanByUserId(userId)
		console.log(`–ü–æ–ª—É—á–µ–Ω –∫–ª–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:`, clan)

		if (!clan) {
			return context.send('–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º –∫–ª–∞–Ω–∞.')
		}

		const opponentClan = await getClanByUserId(opponentId)
		console.log(`–ü–æ–ª—É—á–µ–Ω –∫–ª–∞–Ω –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞:`, opponentClan)

		if (!opponentClan) {
			return context.send('–≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º –∫–ª–∞–Ω–∞.')
		}

		// –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –±–æ–π
		db.run(
			`
        INSERT INTO clan_battle_requests (challenger_clan_id, opponent_clan_id, amount, challenger_id)
        VALUES (?, ?, ?, ?)
    `,
			[clan.id, opponentClan.id, amount, userId],
			err => {
				if (err) {
					console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –±–æ–π:', err)
					return context.send('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≤—ã–∑–æ–≤–∞.')
				}

				context.send(
					`–í—ã –≤—ã–∑–≤–∞–ª–∏ –∫–ª–∞–Ω ${opponentClan.name} –Ω–∞ –±–æ–π –Ω–∞ —Å—É–º–º—É ${amount} WCoin.`
				)

				vk.api.messages.send({
					peer_id: opponentId,
					message: `–ö–ª–∞–Ω ${clan.name} –≤—ã–∑–≤–∞–ª –≤–∞—Å –Ω–∞ –±–æ–π –Ω–∞ —Å—É–º–º—É ${amount} WCoin. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /wclan –≤—ã–∑–æ–≤ –ø—Ä–∏–Ω—è—Ç—å [ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è] –¥–ª—è –Ω–∞—á–∞–ª–∞ –±–æ—è.`,
				})
			}
		)
	} else if (
		typeof message === 'string' &&
		message.startsWith('/wclan –≤—ã–∑–æ–≤ –ø—Ä–∏–Ω—è—Ç—å')
	) {
		console.log(
			`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID ${userId} –≤—ã–∑—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /wclan –≤—ã–∑–æ–≤. –ü–æ–ª—É—á–∞–µ–º –∫–ª–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...`
		)

		const args = message.split(' ')
		const target = args[2] // ID –∏–ª–∏ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
		console.log(`–ü–æ–ª—É—á–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è target: ${target}`) // –õ–æ–≥–∏—Ä—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ target –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ target –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–∞–Ω–Ω—ã–µ
		if (!target) {
			return context.send(
				'–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥. –£–∫–∞–∂–∏—Ç–µ ID –∏–ª–∏ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.'
			)
		}

		// –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
		const opponentId = await resolveUserId(target)
		console.log(`–ü–æ–ª—É—á–µ–Ω ID –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞: ${opponentId}`)

		// –ï—Å–ª–∏ opponentId –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑—Ä–µ—à–∏—Ç—å, –≤—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
		if (!opponentId) {
			return context.send(
				'–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–µ–¥—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.'
			)
		}

		const clan = await getClanByUserId(userId)
		console.log(`–ü–æ–ª—É—á–µ–Ω –∫–ª–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:`, clan)

		if (!clan) {
			return context.send('–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º –∫–ª–∞–Ω–∞.')
		}

		const opponentClan = await getClanByUserId(opponentId)
		console.log(`–ü–æ–ª—É—á–µ–Ω –∫–ª–∞–Ω –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞:`, opponentClan)

		if (!opponentClan) {
			return context.send('–≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º –∫–ª–∞–Ω–∞.')
		}

		// –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã–∑–æ–≤–∞ –Ω–∞ –±–æ–π
		db.get(
			`
        SELECT * FROM clan_battle_requests 
        WHERE opponent_clan_id = ? AND challenger_id = ?`,
			[clan.id, opponentId],
			(err, request) => {
				if (err || !request) {
					console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –±–æ–π:', err)
					return context.send('–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞ –Ω–∞ –±–æ–π.')
				}

				// –ù–∞—á–∞–ª–æ –±–∏—Ç–≤—ã
				db.run(
					`
                INSERT INTO active_clan_wars (clan1_id, clan2_id, clan1_health, clan2_health, amount)
                VALUES (?, ?, 1000, 1000, ?)`,
					[clan.id, opponentClan.id, request.amount],
					err => {
						if (err) {
							console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±–∏—Ç–≤—ã:', err)
							return context.send('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±–∏—Ç–≤—ã.')
						}

						context.send(
							`–ë–∏—Ç–≤–∞ –Ω–∞—á–∞–ª–∞—Å—å –º–µ–∂–¥—É –∫–ª–∞–Ω–∞–º–∏ ${clan.name} –∏ ${opponentClan.name}! –£ –∫–∞–∂–¥–æ–≥–æ –∫–ª–∞–Ω–∞ –ø–æ 1000 –∑–¥–æ—Ä–æ–≤—å—è.`
						)
					}
				)

				// –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –±–æ–π
				db.run(
					`
                DELETE FROM clan_battle_requests WHERE challenger_id = ? AND opponent_clan_id = ?`,
					[opponentId, clan.id]
				)
			}
		)
	} */ else if (message.startsWith('/wclan —Å–æ–∑–¥–∞—Ç—å')) {
		const parts = message.split(' ')
		if (parts.length < 3) {
			context.send(
				'‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /wclan —Å–æ–∑–¥–∞—Ç—å <–Ω–∞–∑–≤–∞–Ω–∏–µ_–∫–ª–∞–Ω–∞>.'
			)
			return
		}

		const clanName = parts.slice(2).join(' ')
		const user = await getUser(userId)

		if (user && user.wcoin >= 4000) {
			try {
				await createClan(userId, clanName)
				db.run('UPDATE users SET wcoin = wcoin - 4000 WHERE vk_id = ?', [
					userId,
				])
				context.send(`ü•≥ –ö–ª–∞–Ω ${clanName} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!`)
			} catch (error) {
				context.send('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–ª–∞–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.')
			}
		} else {
			context.send('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ WCoin –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–Ω–∞.')
		}
	} else if (message.startsWith('/wclan —É–ª—É—á—à–∏—Ç—å')) {
		try {
			const response = await upgradeClan(userId)
			context.send(response)
		} catch (error) {
			console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /wclan —É–ª—É—á—à–∏—Ç—å:', error) // –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
			context.send(error)
		}
	} else if (message.startsWith('/wclan —É–¥–∞–ª–∏—Ç—å')) {
		try {
			await deleteClan(userId)
			context.send('üî® –ö–ª–∞–Ω —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.')
		} catch (error) {
			context.send(error)
		}
	} else if (message.startsWith('/wclan —Å–ø–∏—Å–æ–∫')) {
		const clan = await getClanByUserId(userId)
		if (clan) {
			await handleClanList(context, clan.id)
		} else {
			context.send('‚ùå –í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –∫–ª–∞–Ω–µ.')
		}
	} else if (message.startsWith('/wclan –ø–æ–∫–∏–Ω—É—Ç—å')) {
		try {
			const response = await leaveClan(userId)
			context.send(response)
		} catch (error) {
			context.send(error)
		}
	} else if (message.startsWith('/wclan –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å')) {
		const parts = message.split(' ')
		if (parts.length < 3) {
			context.send(
				'‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /wclan –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å <–∏–º—è_–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è>.'
			)
			return
		}

		const invitee = parts.slice(2).join(' ')
		try {
			await inviteMember(userId, invitee)
			context.send(`‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≥–ª–∞—Å–∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–ª–∞–Ω.`)
		} catch (error) {
			context.send(error)
		}
	} else if (message.startsWith('/wclan –ø–æ–∏—Å–∫ –≤—Ä–∞–≥–∞–µ–∫')) {
		try {
			const enemyName = await startBattle(userId)
			context.send(
				`‚öî –í—ã –Ω–∞—à–ª–∏ –≤—Ä–∞–≥–∞: ${enemyName}!\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /wclan —É–¥–∞—Ä [–Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞] –∏–ª–∏ /wclan —É–¥–∞—Ä.\n/wclan –ª–µ—á–∏—Ç—å [–õ–µ–≥–∫–∞—è –∞–ø—Ç–µ—á–∫–∞ –∏–ª–∏ –ë–æ–ª—å—à–∞—è –∞–ø—Ç–µ—á–∫–∞]`
			)
		} catch (error) {
			console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã /wclan –ø–æ–∏—Å–∫ –≤—Ä–∞–≥–∞:', error)
			context.send(error)
		}
	} else if (message.startsWith('/wclan –ø—Ä–∏–Ω—è—Ç—å')) {
		const clanName = message.split(' ')[2]
		try {
			await joinClan(userId, clanName)
			context.send(`–í—ã –≤—Å—Ç—É–ø–∏–ª–∏ –≤ –∫–ª–∞–Ω ${clanName}!`)
		} catch (error) {
			context.send(error)
		}
	} else if (message.startsWith('/wclan —Å–Ω—è—Ç—å')) {
		const parts = message.split(' ')
		const amount = parseInt(parts[2], 10)

		if (isNaN(amount) || amount <= 0) {
			context.send('‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É –¥–ª—è —Å–Ω—è—Ç–∏—è.')
			return
		}

		// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –¥–µ—Å—è—Ç–∏—á–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
		if (amount.toString().includes('.')) {
			context.send('‚ùå –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –±–µ–∑ –¥–µ—Å—è—Ç—ã—Ö.')
			return
		}

		try {
			await withdrawFromClan(userId, amount)
			context.send(`‚úÖ –°–Ω—è—Ç–æ ${amount} WCoin –∏–∑ –æ–±—â–∞–∫–∞ –∫–ª–∞–Ω–∞.`)
		} catch (error) {
			context.send(`–û—à–∏–±–∫–∞: ${error}`)
		}
	} else if (message.startsWith('/wclan –∫–∏–∫–Ω—É—Ç—å')) {
		const parts = message.split(' ')
		if (parts.length < 3) {
			context.send(
				'‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /wclan –∫–∏–∫–Ω—É—Ç—å <–∏–º—è_–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è>.'
			)
			return
		}

		const member = parts.slice(2).join(' ')
		try {
			await kickMember(userId, member)
			// –ü–æ–ª—É—á–∏—Ç–µ –Ω–∏–∫–Ω–µ–π–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–æ—Ç–∞ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
			const memberNickname = await getUserNickname(userId)
			context.send(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∏—Å–∫–ª—é—á–µ–Ω –∏–∑ –∫–ª–∞–Ω–∞.`)
		} catch (error) {
			context.send(error)
		}
	} else if (message.startsWith('/wclan —É–¥–∞—Ä')) {
		const parts = message.split(' ')
		const itemName = parts.length > 2 ? parts.slice(2).join(' ') : null

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –≤—Ä–µ–º–µ–Ω–∏
		const now = Date.now()
		if (lastAttackTime[userId] && now - lastAttackTime[userId] < 2000) {
			context.send('‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∞—Ç–∞–∫–æ–≤–∞—Ç—å —á–∞—â–µ, —á–µ–º —Ä–∞–∑ –≤ —Å–µ–∫—É–Ω–¥—É.')
			return
		}
		lastAttackTime[userId] = now

		try {
			const {
				damage,
				remainingHealth,
				remainingClanHealth,
				enemyDefeated,
				clanDefeated,
				reward,
				penalty,
			} = await attackEnemy(userId, itemName)
			let response = `‚öî –í—ã –Ω–∞–Ω–µ—Å–ª–∏ —É–¥–∞—Ä${
				itemName ? ` –ø—Ä–µ–¥–º–µ—Ç–æ–º "${itemName}"` : ''
			}. –£—Ä–æ–Ω: ${damage}.\nüë∫ –ó–¥–æ—Ä–æ–≤—å–µ –≤—Ä–∞–≥–∞: ${remainingHealth}.\nüõ° –ó–¥–æ—Ä–æ–≤—å–µ –∫–ª–∞–Ω–∞: ${remainingClanHealth}.`

			if (enemyDefeated) {
				response += ` ü•≥ –í—Ä–∞–≥ –ø–æ–≤–µ—Ä–∂–µ–Ω! –í—ã –ø–æ–ª—É—á–∏–ª–∏ –Ω–∞–≥—Ä–∞–¥—É: ${reward} WCoin.`
			}

			if (clanDefeated) {
				response += ` ü§í –í–∞—à –∫–ª–∞–Ω –±—ã–ª –ø–æ–≤–µ—Ä–∂–µ–Ω! –®—Ç—Ä–∞—Ñ: ${penalty} WCoin.`
			}

			context.send(response)
		} catch (error) {
			context.send(error)
		}
	} else if (message.startsWith('/wclan –ª–µ—á–∏—Ç—å')) {
		const parts = message.split(' ')
		if (parts.length < 3) {
			context.send(
				'‚ùå –£–∫–∞–∂–∏—Ç–µ —Ç–∏–ø –∞–ø—Ç–µ—á–∫–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ "–õ–µ–≥–∫–∞—è –∞–ø—Ç–µ—á–∫–∞" –∏–ª–∏ "–ë–æ–ª—å—à–∞—è –∞–ø—Ç–µ—á–∫–∞".'
			)
			return
		}

		const itemType = parts.slice(2).join(' ')
		if (!['–õ–µ–≥–∫–∞—è –∞–ø—Ç–µ—á–∫–∞', '–ë–æ–ª—å—à–∞—è –∞–ø—Ç–µ—á–∫–∞'].includes(itemType)) {
			context.send(
				'‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –∞–ø—Ç–µ—á–∫–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ "–õ–µ–≥–∫–∞—è –∞–ø—Ç–µ—á–∫–∞" –∏–ª–∏ "–ë–æ–ª—å—à–∞—è –∞–ø—Ç–µ—á–∫–∞".'
			)
		} else {
			try {
				const response = await healClan(userId, itemType)
				context.send(response)
			} catch (error) {
				context.send(error)
			}
		}
	} else if (message.startsWith('/wclan –∏–∑–º–µ–Ω–∏—Ç—å')) {
		const parts = message.split(' ')
		if (parts.length < 3) {
			context.send(
				'‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /wclan –∏–∑–º–µ–Ω–∏—Ç—å <–Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ>.'
			)
			return
		}

		const newName = parts.slice(2).join(' ')
		const clan = await getClanByUserId(userId)

		if (clan) {
			if (clan.creator_id !== userId) {
				context.send('‚ùå –¢–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å –∫–ª–∞–Ω–∞ –º–æ–∂–µ—Ç –∏–∑–º–µ–Ω–∏—Ç—å –µ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏–µ.')
				return
			}

			if (clan.balance < 200) {
				context.send(
					'‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –≤ –æ–±—â–∞–∫–µ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –∫–ª–∞–Ω–∞.'
				)
				return
			}

			try {
				await new Promise((resolve, reject) => {
					db.run(
						'UPDATE clans SET name = ?, balance = balance - 200 WHERE id = ?',
						[newName, clan.id],
						err => {
							if (err) {
								reject(err)
							} else {
								resolve()
							}
						}
					)
				})
				context.send(`‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ –∫–ª–∞–Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ ${newName}.`)
			} catch (error) {
				context.send('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–ª–∞–Ω–∞.')
			}
		} else {
			context.send('‚ùå –í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –∫–ª–∞–Ω–µ.')
		}
	} else if (message.startsWith('/wclan –∞—Ö–∏—Ç—ã–∞–≤—ã–ø–∑–∞—Ö–≤–∞—Ç')) {
		const villageName = message.split(' ').slice(2).join(' ')

		const village = await getVillageByName(villageName)
		const clan = await getClanByUserId(userId)

		if (!village) {
			context.send(`‚ùå –î–µ—Ä–µ–≤–Ω—è —Å –∏–º–µ–Ω–µ–º "${villageName}" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.`)
			return
		}

		if (clan.creator_id !== userId) {
			context.send('‚ùå –¢–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å –∫–ª–∞–Ω–∞ –º–æ–∂–µ—Ç –Ω–∞—á–∞—Ç—å –∑–∞—Ö–≤–∞—Ç –¥–µ—Ä–µ–≤–Ω–∏.')
			return
		}

		if (!clan) {
			context.send('‚ùå –í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –∫–ª–∞–Ω–µ.')
			return
		}

		if (village.is_in_battle) {
			context.send(`‚ùå –î–µ—Ä–µ–≤–Ω—è "${villageName}" —É–∂–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –±–æ—é.`)
			return
		}

		// –ï—Å–ª–∏ –¥–µ—Ä–µ–≤–Ω—è —É–∂–µ –∑–∞—Ö–≤–∞—á–µ–Ω–∞, –∑–∞–ø—É—Å–∫–∞–µ–º –±–∏—Ç–≤—É
		if (village.clan_id !== null && village.clan_id !== clan.id) {
			await startBattleWithVillage(userId, village, context)
		} else if (village.clan_id === null) {
			await startBattleWithVillage(userId, village, context)
		} else {
			context.send(`‚ùå –î–µ—Ä–µ–≤–Ω—è "${villageName}" —É–∂–µ –∑–∞—Ö–≤–∞—á–µ–Ω–∞ –≤–∞—à–∏–º –∫–ª–∞–Ω–æ–º.`)
		}
	} else if (message.startsWith('/wclan healv')) {
		const args = message.split(' ').slice(2) // –ü–æ–ª—É—á–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã
		const itemName = args.length ? args.join(' ') : null // –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞

		const clan = await getClanByUserId(userId)

		if (!clan) {
			context.send('‚ùå –í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –∫–ª–∞–Ω–µ.')
			return
		}

		// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ–π –±–∏—Ç–≤—ã
		const village = await getVillageInBattleByClanId(clan.id) // –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ä–µ–≤–Ω—é, –Ω–∞—Ö–æ–¥—è—â—É—é—Å—è –≤ –±–∏—Ç–≤–µ

		if (!village) {
			context.send('‚ùå –í–∞—à –∫–ª–∞–Ω –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç –≤ –±–∏—Ç–≤–µ —Å –¥–µ—Ä–µ–≤–Ω–µ–π.')
			return
		}

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É–∫–∞–∑–∞–Ω –ª–∏ –ø—Ä–µ–¥–º–µ—Ç
		if (!itemName) {
			context.send(
				'‚ùå –£–∫–∞–∂–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∑–¥–æ—Ä–æ–≤—å—è (–ë–æ–ª—å—à–∞—è –∞–ø—Ç–µ—á–∫–∞ –∏–ª–∏ –õ–µ–≥–∫–∞—è –∞–ø—Ç–µ—á–∫–∞).'
			)
			return
		}

		// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º–æ–≥–æ –∑–¥–æ—Ä–æ–≤—å—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø—Ä–µ–¥–º–µ—Ç–∞
		let healAmount
		if (itemName === '–ë–æ–ª—å—à–∞—è –∞–ø—Ç–µ—á–∫–∞') {
			healAmount = 30
		} else if (itemName === '–õ–µ–≥–∫–∞—è –∞–ø—Ç–µ—á–∫–∞') {
			healAmount = 15
		} else {
			context.send(
				'‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç. –í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ "–ë–æ–ª—å—à–∞—è –∞–ø—Ç–µ—á–∫–∞" –∏–ª–∏ "–õ–µ–≥–∫–∞—è –∞–ø—Ç–µ—á–∫–∞".'
			)
			return
		}

		// –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
		const userItems = await listUserItems(userId)

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ç—Ä–µ–±—É–µ–º—ã–π –ø—Ä–µ–¥–º–µ—Ç –∏ –≤ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ
		if (!userItems[itemName] || userItems[itemName] < 1) {
			context.send(
				`‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–µ–¥–º–µ—Ç–∞ "${itemName}" –∏–ª–∏ –µ–≥–æ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∑–¥–æ—Ä–æ–≤—å—è.`
			)
			return
		}

		// –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–¥–æ—Ä–æ–≤—å–µ –∫–ª–∞–Ω–∞
		clan.health += healAmount

		// –°–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
		await updateUserItems(userId, itemName, -1) // –£–º–µ–Ω—å—à–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥–º–µ—Ç–∞ –Ω–∞ 1

		// –û–±–Ω–æ–≤–ª—è–µ–º –∑–¥–æ—Ä–æ–≤—å–µ –∫–ª–∞–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
		await updateClanHealth(clan.id, clan.health)

		// –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–¥–æ—Ä–æ–≤—å—è
		context.send(
			`‚úÖ –ó–¥–æ—Ä–æ–≤—å–µ –∫–ª–∞–Ω–∞ —É–≤–µ–ª–∏—á–µ–Ω–æ –Ω–∞ ${healAmount}. –¢–µ–∫—É—â–µ–µ –∑–¥–æ—Ä–æ–≤—å–µ –∫–ª–∞–Ω–∞: ${clan.health}. –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ –±–∏—Ç–≤—É –∏–ª–∏ –ø–æ–ø–æ–ª–Ω–∏—Ç–µ –∑–¥–æ—Ä–æ–≤—å–µ –µ—â–µ —Ä–∞–∑.`
		)
	}

	// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –∞—Ç–∞–∫–∏
	else if (message.startsWith('/wclan –∞—Ç–∞–∫–∞')) {
		const clan = await getClanByUserId(userId)

		if (!clan) {
			context.send('‚ùå –í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –∫–ª–∞–Ω–µ.')
			return
		}

		const village = await getVillageInBattleByClanId(clan.id)

		if (!village || village.attacking_clan_id !== clan.id) {
			context.send('‚ùå –í–∞—à –∫–ª–∞–Ω –Ω–µ –∞—Ç–∞–∫—É–µ—Ç –Ω–∏ –æ–¥–Ω—É –¥–µ—Ä–µ–≤–Ω—é.')
			return
		}

		const forbiddenItems = [
			'–õ–µ–≥–∫–∞—è –∞–ø—Ç–µ—á–∫–∞',
			'–ë–æ–ª—å—à–∞—è –∞–ø—Ç–µ—á–∫–∞',
			'–§—Ä–∞–≥–º–µ–Ω—Ç—ã WCoin',
		]

		let itemName = message.split(' ').slice(2).join(' ')

		if (!itemName) {
			itemName = null
		}

		const updatedClan = { ...clan }

		// –õ–æ–≥–∏—Ä—É–µ–º –∞—Ç–∞–∫—É –±–µ–∑ –ø—Ä–µ–¥–º–µ—Ç–∞ –∏–ª–∏ —Å –ø—Ä–µ–¥–º–µ—Ç–æ–º
		if (!itemName) {
			console.log('–ê—Ç–∞–∫–∞ –±–µ–∑ –ø—Ä–µ–¥–º–µ—Ç–∞.')
			village.health -= 10
			updatedClan.health -= Math.floor(Math.random() * 21) + 30
		} else {
			if (forbiddenItems.includes(itemName)) {
				console.log(`–ó–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç: ${itemName}`)
				context.send(
					`‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–µ–¥–º–µ—Ç "${itemName}" –¥–ª—è –∞—Ç–∞–∫–∏.`
				)
				return
			}

			const userItems = await listUserItems(userId)

			if (!userItems[itemName] || userItems[itemName] < 1) {
				context.send(
					`‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–µ–¥–º–µ—Ç–∞ "${itemName}" –∏–ª–∏ –µ–≥–æ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª—è –∞—Ç–∞–∫–∏.`
				)
				return
			}

			const damage = Math.floor(Math.random() * 21) + 30
			village.health -= 50
			updatedClan.health -= damage

			await updateUserItems(userId, itemName, -1)
		}

		await updateVillageHealth(village.id, village.health)
		await updateClanHealth(updatedClan.id, updatedClan.health)

		if (updatedClan.health <= 0) {
			context.send('ü§í –í–∞—à –∫–ª–∞–Ω –ø—Ä–æ–∏–≥—Ä–∞–ª –±–∏—Ç–≤—É.')
			await setVillageBattleStatus(village.id, 0)
			await setAttackingClan(village.id, null)
		} else if (village.health <= 0) {
			await captureVillage(updatedClan.id, village.id)
			context.send(
				`ü•≥ –ö–ª–∞–Ω "${updatedClan.name}" –∑–∞—Ö–≤–∞—Ç–∏–ª –¥–µ—Ä–µ–≤–Ω—é "${village.name}"!`
			)
			await setVillageBattleStatus(village.id, 0)
			await setAttackingClan(village.id, null)
		} else {
			context.send(
				`‚öî –ê—Ç–∞–∫–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∞! üè∞ –ó–¥–æ—Ä–æ–≤—å–µ –¥–µ—Ä–µ–≤–Ω–∏: ${village.health}\nüèπ –ó–¥–æ—Ä–æ–≤—å–µ –≤–∞—à–µ–≥–æ –∫–ª–∞–Ω–∞: ${updatedClan.health}.`
			)
		}
	} else if (message.startsWith('/wclan –∫–ª–∞–Ω—ã')) {
		db.all(
			`
        SELECT c.id, c.name, u.nickname AS creator_nickname, 
               (SELECT COUNT(*) FROM clan_members cm WHERE cm.clan_id = c.id) AS member_count,
               c.level, c.wins, c.losses
        FROM clans c
        JOIN users u ON c.creator_id = u.vk_id
        `,
			(err, rows) => {
				if (err) {
					context.send('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∫–ª–∞–Ω–æ–≤.')
					return
				}

				if (rows.length === 0) {
					context.send('‚ùå –ö–ª–∞–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.')
					return
				}

				let response = 'üìú –°–ø–∏—Å–æ–∫ –∫–ª–∞–Ω–æ–≤:\n'
				rows.forEach(clan => {
					response += `\nüõ° –ù–∞–∑–≤–∞–Ω–∏–µ: ${clan.name}\nüëë –°–æ–∑–¥–∞—Ç–µ–ª—å: ${clan.creator_nickname}\nüë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: ${clan.member_count}\n‚≠ê –£—Ä–æ–≤–µ–Ω—å: ${clan.level}\nü•≥ –ü–æ–±–µ–¥—ã: ${clan.wins}\nü§í –ü–æ—Ä–∞–∂–µ–Ω–∏—è: ${clan.losses}\n`
				})
				context.send(response)
			}
		)
	} else if (message.startsWith('/wclan –≤—Ä–∞–≥–∏')) {
		context.send(
			`üë∫ –í—Ä–∞–≥–∏, —Å –∫–æ—Ç–æ—Ä—ã–º–∏ –≤—ã –±—É–¥–µ—Ç–µ —Å—Ä–∞–∂–∞—Ç—å—Å—è –∏ –ø–æ–ª—É—á–∞—Ç—å –±–æ–ª—å—à–æ–π –∫—É—à. –í–∞—à–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –Ω—É–∂–Ω–∞ –∂–∏—Ç–µ–ª—è–º!\n\n` +
				`–¢–µ–º–Ω—ã–π —Ä—ã—Ü–∞—Ä—å: –≤—ã—Å–æ–∫–∏–π, —Ç–µ–º–Ω—ã–π –∏ –æ—Å—Ç—Ä—ã–º –º–µ—á–µ–º, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–æ–Ω–∑–∏—Ç —Å –æ–¥–Ω–æ–≥–æ —É–¥–∞—Ä–∞. –ï–≥–æ —Å–ª–∞–±–æ—Å—Ç—å - –ó–æ–ª–æ—Ç–æ–π –º–µ—á.\n` +
				`–û–≥–µ–Ω–Ω—ã–π –º–∞–≥: –Ω–∞—Å—Ç–æ–ª—å–∫–æ —Ö–æ—Ä–æ—à–æ –≤–ª–∞–¥–µ–µ—Ç –æ–≥–Ω–µ–º, —á—Ç–æ –º–æ–∂–µ—Ç –∑–∂–µ—á—å –≤—Å–µ –Ω–∞ —Å–≤–æ–µ–º –ø—É—Ç–∏. –ï–≥–æ —Å–ª–∞–±–æ—Å—Ç—å - –í–µ–¥—Ä–æ –≤–æ–¥—ã.\n` +
				`–õ–µ–¥—è–Ω–∞—è –≤–∞–ª—å–∫–∏—Ä–∏—è: —Å–µ—Å—Ç—Ä–∞ –û–≥–Ω–µ–Ω–Ω–æ–≥–æ –º–∞–≥–∞, –Ω–æ –¥–∞–≤–Ω–æ –Ω–µ –¥—Ä—É–∂–∞—Ç. –£–±–∏–≤–∞–µ—Ç —Å–≤–æ–µ–π –∫—Ä–æ—Å–æ—Ç–æ–π –∏–ª–∏ –ª–µ–¥—è–Ω—ã–º–∏ –∏–≥–ª–∞–º–∏. –ï—ë —Å–ª–∞–±–æ—Å—Ç—å - –ó–µ–ª—å–µ –æ–≥–Ω—è.\n` +
				`–ö—Ä–∞—Å–Ω—ã–π –¥—Ä–∞–∫–æ–Ω: –µ–≥–æ —Ç—É'–º –Ω–∞–≤–æ–¥–∏—Ç —Å—Ç—Ä–∞—Ö –Ω–∞ –≤—Å–µ—Ö –∂–∏—Ç–µ–ª–µ–π –º–∏—Ä–∞. –°–∞–º—ã–π –±–µ—Å–ø–æ—â–∞–¥–Ω—ã–π –∏ –æ–ø–∞—Å–Ω—ã–π –≤—Ä–∞–≥ –¥–ª—è –∫–ª–∞–Ω–æ–≤–æ–¥–æ–≤. –ï–≥–æ —Å–ª–∞–±–æ—Å—Ç—å - –ü–ª–∞—Ç–∏–Ω–æ–≤–∞—è —Å—Ç—Ä–µ–ª–∞.`
		)
	} else if (message.startsWith('/wclan')) {
		context.send(
			`‚öô –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –∫–ª–∞–Ω–∞:\n\n` +
				`/wclan –∏–Ω—Ñ–æ - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—à–µ–º –∫–ª–∞–Ω–µ\n` +
				`/wclan —Å–ø–∏—Å–æ–∫ - —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤–∞—à–µ–≥–æ –∫–ª–∞–Ω–∞\n` +
				`/wclan —Å–æ–∑–¥–∞—Ç—å <–Ω–∞–∑–≤–∞–Ω–∏–µ> - —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∫–ª–∞–Ω 4000 WCoin\n` +
				`/wclan –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å <ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è> - –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–ª–∞–Ω\n` +
				`/wclan –ø–æ–∫–∏–Ω—É—Ç—å - –≤—ã–π—Ç–∏ –∏–∑ –∫–ª–∞–Ω–∞\n` +
				`/wclan —Å–Ω—è—Ç—å <—Å—É–º–º–∞> - —Å–Ω—è—Ç—å —Å—Ä–µ–¥—Å—Ç–≤–∞ –∏–∑ –æ–±—â–∞–∫–∞ –∫–ª–∞–Ω–∞ (—Ç–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å)\n` +
				`/wclan –∫–∏–∫–Ω—É—Ç—å <ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è> - –∏—Å–∫–ª—é—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∫–ª–∞–Ω–∞ (—Ç–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å)\n` +
				`/wclan –∏–∑–º–µ–Ω–∏—Ç—å [–Ω–∞–∑–≤–∞–Ω–∏–µ –∫–ª–∞–Ω–∞] - –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–ª–∞–Ω–∞ –Ω–∞ –Ω–æ–≤–æ–µ 200 WCoin\n` +
				`/wclan —É–¥–∞–ª–∏—Ç—å - —É–¥–∞–ª–∏—Ç—å –∫–ª–∞–Ω (—Ç–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å)\n` +
				`/wclan –∫–ª–∞–Ω—ã - —Å–ø–∏—Å–æ–∫ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –∫–ª–∞–Ω–æ–≤\n` +
				`\n` +
				`–ë–∏—Ç–≤–∞ —Å –≤—Ä–∞–≥–∞–º–∏:\n` +
				`/wclan –ø–æ–∏—Å–∫ –≤—Ä–∞–≥–∞ - –Ω–∞—á–∞—Ç—å –ø–æ–∏—Å–∫ –≤—Ä–∞–≥–∞ (—Ç–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å)\n` +
				`/wclan —É–¥–∞—Ä - –Ω–∞–Ω–µ—Å—Ç–∏ —É–¥–∞—Ä –≤—Ä–∞–≥—É\n` +
				`/wclan —É–¥–∞—Ä [–Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞] - –Ω–∞–Ω–µ—Å—Ç–∏ —É–¥–∞—Ä –≤—Ä–∞–≥—É —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–º –ø—Ä–µ–¥–º–µ—Ç–æ–º\n` +
				`/wclan –ª–µ—á–∏—Ç—å <—Ç–∏–ø –∞–ø—Ç–µ—á–∫–∏> - –≤—ã–ª–µ—á–∏—Ç—å –∫–ª–∞–Ω\n` +
				`/wclan –≤—Ä–∞–≥–∏ - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—Ä–∞–≥–∞—Ö –∏ –∏—Ö —Å–ª–∞–±–æ—Å—Ç–µ–π\n` +
				`\n` +
				`–ó–∞—Ö–≤–∞—Ç –¥–µ—Ä–µ–≤–µ–Ω—å:\n` +
				`/wclan –∑–∞—Ö–≤–∞—Ç [–¢–∞–ª–æ—Ä–∏–Ω, –°—Ç–∞—Ä—ã–π –•–µ–ª—å–º–¥–æ—Ä—Ñ, Waynes City] (—Ç–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å)\n` +
				`/wclan –∞—Ç–∞–∫–∞ [–Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞]\n` +
				`/wclan –∞—Ç–∞–∫–∞\n` +
				`/wclan healv [–õ–µ–≥–∫–∞—è –∞–ø—Ç–µ—á–∫–∞ –∏–ª–∏ –ë–æ–ª—å—à–∞—è –∞–ø—Ç–µ—á–∫–∞]`
		)
	} else if (message.startsWith('/–∫—Ä–∞—Ñ—Ç')) {
		await handleCraftCommand(context)
	}

	if (message.startsWith('/wmarkets –≤—ã—Å—Ç–∞–≤–∏—Ç—å')) {
		const parts = message.split(' ').slice(2)
		const quantityStr = parts[parts.length - 2]
		const priceStr = parts[parts.length - 1]
		const itemName = parts.slice(0, -2).join(' ') // –û–±—ä–µ–¥–∏–Ω–∏—Ç–µ –≤—Å–µ, –∫—Ä–æ–º–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –¥–≤—É—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤

		const quantity = parseInt(quantityStr, 10)
		const price = parseInt(priceStr, 10)

		const response = await listMarketItem(userId, itemName, quantity, price)
		await context.send(`${await getUserMention(userId)}, ${response}`)
	} else if (message.startsWith('/wmarkets —Å–Ω—è—Ç—å')) {
		const itemName = message.split(' ').slice(2).join(' ') // –°–æ–±–∏—Ä–∞–µ–º –≤—Å—ë, —á—Ç–æ –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ –ø—Ä–æ–±–µ–ª–∞
		const response = await removeMarketItem(userId, itemName)
		await context.send(`${await getUserMention(userId)}, ${response}`)
	} else if (message.startsWith('/wmarkets —Ä—ã–Ω–æ–∫')) {
		const marketList = await showMarket()
		await context.send(marketList, { disable_mentions: 1 })
	} else if (message.startsWith('/wmarkets –∫—É–ø–∏—Ç—å')) {
		const parts = message.split(' ').slice(2)
		const sellerId = await resolveUserId(parts[0])
		const itemName = parts.slice(1).join(' ')

		const response = await buyMarketItem(userId, sellerId, itemName)
		await context.send(`${await getUserMention(userId)}, ${response}`)
	} else if (message.startsWith('/–ø—Ä–µ–¥–º–µ—Ç—ã')) {
		const userItems = await listUserItems(userId)
		const craftedItems = await listCraftedItems(userId)

		// –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –æ–±—ä–µ–∫—Ç userItems –≤ —Å—Ç—Ä–æ–∫—É
		const userItemsMessage = Object.entries(userItems)
			.map(([item, quantity]) => `${item}: ${quantity} —à—Ç.`)
			.join('\n')

		await context.send(
			`${await getUserMention(
				userId
			)}, üíº –í–∞—à–∏ –ø—Ä–µ–¥–º–µ—Ç—ã:\n${userItemsMessage}\n\n${craftedItems}`
		)
	} else if (message.startsWith('/wmarkets')) {
		await context.send(
			`${await getUserMention(
				userId
			)}, üõç –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ —Ä—ã–Ω–∫–∞:\n/wmarkets –≤—ã—Å—Ç–∞–≤–∏—Ç—å [–ø—Ä–µ–¥–º–µ—Ç] [–∫–æ–ª-–≤–æ] [—Ü–µ–Ω–∞ –∑–∞ —à—Ç.]\n/wmarkets —Å–Ω—è—Ç—å [–ø—Ä–µ–¥–º–µ—Ç]\n/wmarkets –∫—É–ø–∏—Ç—å [ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è] [–ø—Ä–µ–¥–º–µ—Ç]\n/wmarkets —Ä—ã–Ω–æ–∫\n/–ø—Ä–µ–¥–º–µ—Ç—ã`
		)
	}

	if (message.startsWith('/creatquest')) {
		if (userId === 252840773) {
			const questText = message.slice(12).trim()
			currentQuest = questText
			await context.send(
				`${await getUserMention(userId)}, ‚úÖ –°–æ–±—ã—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ.`
			)
		} else {
			await context.send(
				`${await getUserMention(
					userId
				)}, üò° –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.`
			)
		}
	} else if (message.startsWith('/delquest')) {
		if (userId === 252840773) {
			currentQuest = null
			await context.send(
				`${await getUserMention(userId)}, üóë –°–æ–±—ã—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ.`
			)
		} else {
			await context.send(
				`${await getUserMention(
					userId
				)}, üò° –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.`
			)
		}
	} else if (message.startsWith('/—Å–æ–±—ã—Ç–∏–µ')) {
		if (currentQuest) {
			await context.send(
				`${await getUserMention(userId)}, üî• –¢–µ–∫—É—â–µ–µ —Å–æ–±—ã—Ç–∏–µ: ${currentQuest}`
			)
		} else {
			await context.send(
				`${await getUserMention(
					userId
				)}, üôÅ –í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π, –Ω–æ –æ–Ω–∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–æ—è–≤—è—Ç—Å—è!`
			)
		}
	} else if (message.startsWith('/–∫—É–ø–∏—Ç—å –∫–µ–π—Å –Ω–æ–≤–∏—á–æ–∫')) {
		await context.send(
			`${await getUserMention(
				userId
			)}, üéâ –í—ã —É—Å–ø–µ—à–Ω–æ –∫—É–ø–∏–ª–∏ –Ω–æ–≤–∏—á–æ–∫ –∫–µ–π—Å!\n\n–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /–æ—Ç–∫—Ä—ã—Ç—å –∫–µ–π—Å [–Ω–∞–∑–≤–∞–Ω–∏–µ]`
		)
	} else if (message.startsWith('/–æ—Ç–∫—Ä—ã—Ç—å –∫–µ–π—Å –Ω–æ–≤–∏—á–æ–∫')) {
		await context.send(
			`${await getUserMention(
				userId
			)}, üéâ –í—ã –æ—Ç–∫—Ä—ã–ª–∏ –∫–µ–π—Å "–Ω–æ–≤–∏—á–æ–∫" –∏ –ø–æ–ª—É—á–∏–ª–∏ –ø—Ä–µ–¥–º–µ—Ç "15.000$", 1—à—Ç. –ó–æ–ª–æ—Ç–æ–π –º–µ—á!`
		)
	}

	if (message.startsWith('/–∫—É–ø–∏—Ç—å –ª–æ–ø–∞—Ç—É ')) {
		const shovelType = message.split(' ')[2]

		if (!shovelPrices[shovelType]) {
			await context.send(
				`‚ùå ${await getUserMention(
					userId
				)}, –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –ª–æ–ø–∞—Ç—ã.\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å –æ–∫–æ–Ω—á–∞–Ω–∏–µ–º "–∞—è".`
			)
			return
		}

		const user = await getUser(userId)

		if (!user) {
			await context.send(
				`üîé ${await getUserMention(userId)}, –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.`
			)
			return
		}

		// –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∑–∞–ø–∏—Å—å –æ –ª–æ–ø–∞—Ç–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
		await ensureUserShovels(userId)

		const currentTimestamp = await getTimestampNow()
		const lastPurchaseTimestamp = user.last_shovel_purchase_timestamp || 0

		if (currentTimestamp < lastPurchaseTimestamp + twoHours) {
			const secondsUntilNextPurchase =
				lastPurchaseTimestamp + twoHours - currentTimestamp
			const minutesUntilNextPurchase = Math.ceil(secondsUntilNextPurchase / 60)
			await context.send(
				`${await getUserMention(
					userId
				)}, ‚ùå –í—ã —É–∂–µ –ø–æ–∫—É–ø–∞–ª–∏ –ª–æ–ø–∞—Ç—É. –°–ª–µ–¥—É—é—â—É—é –ª–æ–ø–∞—Ç—É –º–æ–∂–Ω–æ –∫—É–ø–∏—Ç—å —á–µ—Ä–µ–∑ ${minutesUntilNextPurchase} –º–∏–Ω—É—Ç.`
			)
			return
		}

		const shovelPrice = shovelPrices[shovelType]

		if (user.wcoin < shovelPrice) {
			await context.send(
				`${await getUserMention(
					userId
				)}, ‚ùå –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ WCoin –¥–ª—è –ø–æ–∫—É–ø–∫–∏ —ç—Ç–æ–π –ª–æ–ø–∞—Ç—ã.`
			)
			return
		}

		await updateUserWcoin(userId, -shovelPrice)
		await updateUserShovels(userId, shovelType, 1)
		await updateLastShovelPurchaseTimestamp(userId, currentTimestamp)
		await context.send(
			`${await getUserMention(
				userId
			)}, ‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∫—É–ø–∏–ª–∏ ${shovelType} –ª–æ–ø–∞—Ç—É –∑–∞ ${shovelPrice} WCoin.\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /–∫–æ–ø–∞—Ç—å –∫–ª–∞–¥ [–Ω–∞–∑–≤–∞–Ω–∏–µ –ª–æ–ø–∞—Ç—ã]`
		)
	}

	if (message.startsWith('/–ª–æ–ø–∞—Ç—ã')) {
		const userShovels = await getUserShovels(userId)

		if (!userShovels) {
			await context.send(
				`${await getUserMention(
					userId
				)}, –í—ã –µ—â–µ –Ω–µ –∫—É–ø–∏–ª–∏ –ª–æ–ø–∞—Ç—É. –ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É: –∫—É–ø–∏—Ç—å –ª–æ–ø–∞—Ç—É [–Ω–∞–∑–≤–∞–Ω–∏–µ_–ª–æ–ø–∞—Ç—ã].\n\n–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –ª–æ–ø–∞—Ç–∞–º:\n–û–±—ã—á–Ω–∞—è: 20 WCoin\n–°–µ—Ä–µ–±—Ä—è–Ω–∞—è: 50 WCoin\n–ó–æ–ª–æ—Ç–∞—è: 100 WCoin\n–ü–ª–∞—Ç–∏–Ω–æ–≤–∞—è: 300 WCoin\nWayne–ª–æ–ø–∞—Ç–∞: 700 WCoin.`
			)
			return
		}

		const userShovelsDisplay = `
        ü•Ñ –û–±—ã—á–Ω—ã–µ: ${userShovels.common}
        üíç –°–µ—Ä–µ–±—Ä—è–Ω—ã–µ: ${userShovels.silver}
        üî± –ó–æ–ª–æ—Ç—ã–µ: ${userShovels.gold}
        üî± –ü–ª–∞—Ç–∏–Ω–æ–≤—ã–µ: ${userShovels.platinum}
        üëë Wayne: ${userShovels.wayne}
    `

		await context.send(
			`${await getUserMention(
				userId
			)}, ü•Ñ –í–∞—à–∏ –ª–æ–ø–∞—Ç—ã:\n${userShovelsDisplay}\n\n–î–ª—è –ø–æ–∫—É–ø–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π: /–∫—É–ø–∏—Ç—å –ª–æ–ø–∞—Ç—É [–Ω–∞–∑–≤–∞–Ω–∏–µ_–ª–æ–ø–∞—Ç—ã].\n\n–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –ª–æ–ø–∞—Ç–∞–º:\n–û–±—ã—á–Ω–∞—è: 20 WCoin\n–°–µ—Ä–µ–±—Ä—è–Ω–∞—è: 50 WCoin\n–ó–æ–ª–æ—Ç–∞—è: 100 WCoin\n–ü–ª–∞—Ç–∏–Ω–æ–≤–∞—è: 300 WCoin\nWayne–ª–æ–ø–∞—Ç–∞: 700 WCoin.`
		)
	}

	if (message.startsWith('/–∫–æ–ø–∞—Ç—å –∫–ª–∞–¥ ')) {
		const shovelType = message.split(' ')[2]
		const shovel = shovelRewards[shovelType]

		if (!shovel) {
			await context.send(
				`${await getUserMention(userId)}, ‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –ª–æ–ø–∞—Ç—ã.`
			)
			return
		}

		// –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ª–æ–ø–∞—Ç–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
		const userShovels = await getUserShovels(userId)
		if (!userShovels || userShovels[shovelTypes[shovelType]] <= 0) {
			await context.send(
				`${await getUserMention(userId)}, ‚ùå –£ –≤–∞—Å –Ω–µ—Ç ${shovelType} –ª–æ–ø–∞—Ç—ã.`
			)
			return
		}

		// –í—ã–ø–æ–ª–Ω—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –ø–æ –∫–æ–ø–∞–Ω–∏—é
		const reward = calculateReward(shovel)
		const randomItem = itemList[Math.floor(Math.random() * itemList.length)]
		const quantity = Math.floor(Math.random() * 3) + 1
		await updateUserItems(userId, randomItem, quantity)
		await context.send(
			`${await getUserMention(
				userId
			)}, ü§ë –í—ã –Ω–∞—à–ª–∏ –∫–ª–∞–¥! –í–∞—à –ø—Ä–∏–∑: ${reward} WCoin –∏ ${quantity} —à—Ç. ${randomItem}!`
		)

		// –£–º–µ–Ω—å—à–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö –ª–æ–ø–∞—Ç –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
		await updateUserShovels(userId, shovelType, -1)
		await updateUserRewards(userId, reward)
	}

	if (message.startsWith('/wbar')) {
		const parts = message.split(' ')
		const command = parts[1]
		const params = parts.slice(2)

		await handleWBarCommand(context, command, params)
	}

	if (typeof next === 'function') {
		await next()
	}

	if (registrationStates[userId]) {
		// –õ–æ–≥–∏–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
		if (registrationStates[userId].step === 'nickname') {
			registrationStates[userId].nickname = message
			registrationStates[userId].step = 'promoCode'
			await context.send(
				`${await getUserMention(
					userId
				)}, ‚Ü™ –í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥ (–Ω–∞—á–∏–Ω–∞—è —Å #, –ø—Ä–æ–º–æ –º–∞–ª–µ–Ω—å–∫–∏–º–∏ –±—É–∫–≤–∞–º–∏), –µ—Å–ª–∏ –æ–Ω —É –≤–∞—Å –µ—Å—Ç—å:`
			)
		} else if (registrationStates[userId].step === 'promoCode') {
			const nickname = registrationStates[userId].nickname
			const promoCode = message.trim().toLowerCase()

			let status = '–Ø—Ä–∫–∏–π'
			let wcoin = 0

			if (promoCode === '#waynes' || userId === 252840773) {
				wcoin = 400 // –ü—Ä–æ–º–æ–∫–æ–¥ –¥–∞—ë—Ç 400 WCoin
			}

			// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞ –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
			const referralCode = generateReferralCode()

			// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
			const existingUser = await getUser(userId)

			if (!existingUser) {
				// –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ
				await addUser(userId, nickname, status, wcoin, referralCode)
				await context.send(
					`${await getUserMention(
						userId
					)}, üéâ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!\n\n–ü–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º, –ø—Ä–æ–π–¥–∏ –ø—É—Ç—å –Ω–æ–≤–∏—á–∫–∞, —Ç–∞–∫ —Ç–µ–±–µ –±—É–¥–µ—Ç –ø—Ä–æ—â–µ –≤—ã–≤–æ–¥–∏—Ç—å –ø—Ä–∏–∑—ã —Å –∫–µ–π—Å–æ–≤ –∏–ª–∏ —É–∑–Ω–∞—Ç—å, –∫–∞–∫ –æ–±–º–µ–Ω—è—Ç—å WCoin –Ω–∞ Telegram Premium –Ø–Ω–¥–µ–∫—Å –ø–ª—é—Å –∏ –¥—Ä. –ü–µ—Ä–µ–π–¥–∏ –≤ –Ω–∞—à—É –≥—Ä—É–ø–ø—É –∏ –Ω–∞–∂–º–∏ "–°–æ–æ–±—â–µ–Ω–∏–µ", –ø–æ—Ç–æ–º –Ω–∞–ø–∏—à–∏ –∫–æ–º–∞–Ω–¥—É /–Ω–∞—á–∞—Ç—å –ø—É—Ç—å –ù–∞—à–∞ –≥—Ä—É–ø–ø–∞: [https://vk.com/waynes_family|Waynes Family ONLINE RP]`
				)
			} else {
				await context.send(
					`${await getUserMention(userId)}, üóø –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.`
				)
			}

			delete registrationStates[userId] // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
		}
	} else if (message === '/reg') {
		const user = await getUser(userId)

		if (user) {
			if (!user.referral_code) {
				const newReferralCode = generateReferralCode()
				await db.run('UPDATE users SET referral_code = ? WHERE vk_id = ?', [
					newReferralCode,
					userId,
				])
			}
			await context.send(
				`${await getUserMention(userId)}, üóø –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.`
			)
		} else {
			registrationStates[userId] = { step: 'nickname' }
			await context.send(`${await getUserMention(userId)}, ‚Ü™ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–∏–∫:`)
		}
	} else if (message === '/–ø—Ä–æ—Ñ–∏–ª—å') {
		const user = await getUser(userId)

		if (user) {
			// –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–≥–ª–∞—à—ë–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
			const referredCount = await new Promise((resolve, reject) => {
				db.get(
					'SELECT COUNT(*) as count FROM referrals WHERE referrer_vk_id = ?',
					[user.vk_id],
					(err, row) => {
						if (err) reject(err)
						else resolve(row.count)
					}
				)
			})

			const clanInfo = user.clan_name
				? `üèπ –ö–ª–∞–Ω: ${user.clan_name}`
				: 'üèπ –ö–ª–∞–Ω: –ù–µ —Å–æ—Å—Ç–æ–∏—Ç'
			await context.send(
				`${await getUserMention(userId)}, –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\nüóøID: ${
					user.vk_id
				}\nüíé–ù–∏–∫: ${user.nickname}\nüí∏WCoin: ${user.wcoin}\nüëë–†–µ–π—Ç–∏–Ω–≥: ${
					user.rating
				}\n${clanInfo}\nüèÜ–°—Ç–∞—Ç—É—Å: ${
					user.status
				}\nüéÅ –ü—Ä–∏–≥–ª–∞—Å–∏–ª: ${referredCount} —á–µ–ª.`
			)
		} else {
			await context.send(
				`${await getUserMention(
					userId
				)}, üóø –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ù–∞–ø–∏—à–∏—Ç–µ "/reg", —á—Ç–æ–±—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è.`
			)
		}
	} else if (message.startsWith('/–≤—ã–¥–∞—Ç—å')) {
		if (allowedIds.includes(userId)) {
			// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
			const [_, targetId, wcoinAmount] = message.split(' ')
			await handleGrantWcoin(context, targetId, wcoinAmount)
		} else {
			await context.send(
				`${await getUserMention(
					userId
				)}, üò° –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.`
			)
		}
	} else if (message.startsWith('/creatpromo')) {
		if (allowedIds.includes(userId)) {
			const [_, promoCode, wcoinAmount] = message.split(' ')
			const wcoin = parseInt(wcoinAmount, 10)

			if (isNaN(wcoin) || !promoCode) {
				await context.send(
					`${await getUserMention(
						userId
					)}, –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /creatpromo [–∫–æ–¥] [—Å—É–º–º–∞]`
				)
			} else {
				await addPromocode(promoCode, wcoin)
				await context.send(
					`${await getUserMention(
						userId
					)}, –ü—Ä–æ–º–æ–∫–æ–¥ ${promoCode} —Å–æ–∑–¥–∞–Ω —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º WCoin: ${wcoin}.`
				)
			}
		} else {
			await context.send(
				`${await getUserMention(
					userId
				)}, üò° –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.`
			)
		}
	} // –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞ —Å –∞–∫—Ç–∏–≤–∞—Ü–∏—è–º–∏
	else if (message.startsWith('/ccreatpromo')) {
		const [_, promoCode, wcoinAmount, activationCount] = message.split(' ')
		const wcoin = parseInt(wcoinAmount, 10)
		const activations = parseInt(activationCount, 10)

		if (allowedIds.includes(userId)) {
			if (isNaN(wcoin) || isNaN(activations) || !promoCode) {
				await context.send(
					`${await getUserMention(
						userId
					)}, –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /ccreatpromo [–∫–æ–¥] [—Å—É–º–º–∞] [–∫–æ–ª-–≤–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–π]`
				)
			} else {
				// –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–º–æ–∫–æ–¥ –≤ –ø–∞–º—è—Ç—å
				promoCodes[promoCode] = {
					wcoin,
					activations,
					usedUsers: new Set(), // –ú–Ω–æ–∂–µ—Å—Ç–≤–æ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
				}
				await context.send(
					`${await getUserMention(
						userId
					)}, –ü—Ä–æ–º–æ–∫–æ–¥ ${promoCode} —Å–æ–∑–¥–∞–Ω —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º WCoin: ${wcoin} –∏ ${activations} –∞–∫—Ç–∏–≤–∞—Ü–∏—è–º–∏.`
				)
			}
		} else {
			await context.send(
				`${await getUserMention(
					userId
				)}, üò° –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.`
			)
		}
	} else if (message.startsWith('/usepromo')) {
		const [_, promoCode] = message.split(' ')

		if (!promoCode) {
			await context.send(
				`${await getUserMention(
					userId
				)}, ‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /usepromo [–∫–æ–¥]`
			)
		} else {
			const promo = promoCodes[promoCode] || (await getPromocode(promoCode)) // –ò—â–µ–º –≤ –ø–∞–º—è—Ç–∏ –∏–ª–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö

			if (promo) {
				// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º–æ–≥–æ –ø—Ä–æ–º–æ–∫–æ–¥–∞
				if (promoCodes[promoCode]) {
					const alreadyUsed = promo.usedUsers.has(userId)
					if (alreadyUsed) {
						await context.send(
							`${await getUserMention(
								userId
							)}, üóø –í—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ —ç—Ç–æ—Ç –ø—Ä–æ–º–æ–∫–æ–¥.`
						)
					} else if (promo.activations <= 0) {
						await context.send(
							`${await getUserMention(
								userId
							)}, üóø –ü—Ä–æ–º–æ–∫–æ–¥ ${promoCode} –±–æ–ª—å—à–µ –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω.`
						)
					} else {
						// –ù–∞—á–∏—Å–ª—è–µ–º WCoin
						await updateUserWcoin(userId, promo.wcoin)
						promo.usedUsers.add(userId) // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ø–∏—Å–æ–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–≤—à–∏—Ö –ø—Ä–æ–º–æ–∫–æ–¥
						promo.activations -= 1 // –£–º–µ–Ω—å—à–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–∫—Ç–∏–≤–∞—Ü–∏–π

						const updatedUser = await getUser(userId) // –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
						await context.send(
							`${await getUserMention(
								userId
							)}, üéâ –ü—Ä–æ–º–æ–∫–æ–¥ ${promoCode} —É—Å–ø–µ—à–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω. –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ ${
								promo.wcoin
							} WCoin.\n–¢–µ–ø–µ—Ä—å —É –≤–∞—Å ${updatedUser.wcoin} WCoin.`
						)

						// –ï—Å–ª–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å, –º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥ –∏–∑ –ø–∞–º—è—Ç–∏
						if (promo.activations <= 0) {
							delete promoCodes[promoCode]
						}
					}
				} else {
					// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω–æ–≥–æ –ø—Ä–æ–º–æ–∫–æ–¥–∞
					const alreadyUsed = await hasUsedPromocode(userId, promoCode)
					if (alreadyUsed) {
						await context.send(
							`${await getUserMention(
								userId
							)}, üóø –í—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ —ç—Ç–æ—Ç –ø—Ä–æ–º–æ–∫–æ–¥.`
						)
					} else {
						await updateUserWcoin(userId, promo.wcoin) // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å WCoin –Ω–∞ –∑–Ω–∞—á–µ–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞
						await markPromocodeAsUsed(userId, promoCode)
						const updatedUser = await getUser(userId) // –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
						await context.send(
							`${await getUserMention(
								userId
							)}, üéâ –ü—Ä–æ–º–æ–∫–æ–¥ ${promoCode} —É—Å–ø–µ—à–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω. –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ ${
								promo.wcoin
							} WCoin.\n–¢–µ–ø–µ—Ä—å —É –≤–∞—Å ${updatedUser.wcoin} WCoin.`
						)
					}
				}
			} else {
				await context.send(
					`${await getUserMention(userId)}, üóø –ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω.`
				)
			}
		}
	} else if (message.startsWith('/delpromo')) {
		if (allowedIds.includes(userId)) {
			const [_, promoCode] = message.split(' ')

			if (!promoCode) {
				await context.send(
					`${await getUserMention(
						userId
					)}, –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /delpromo [–∫–æ–¥]`
				)
			} else {
				await deletePromocode(promoCode)
				await context.send(
					`${await getUserMention(userId)}, –ü—Ä–æ–º–æ–∫–æ–¥ ${promoCode} —É–¥–∞–ª–µ–Ω.`
				)
			}
		} else {
			await context.send(
				`${await getUserMention(
					userId
				)}, üò° –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.`
			)
		}
	} else if (message === '/—Ç–æ–ø') {
		// –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É
		const topUsersByRating = await getTopUsersByRating(15)
		let response = `${await getUserMention(
			userId
		)}, üëë –¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É:\n`
		topUsersByRating.forEach((user, index) => {
			response += `${index + 1}. [id${user.vk_id}|${user.nickname}] - ${
				user.rating
			} —Ä–µ–π—Ç–∏–Ω–≥–∞\n`
		})

		// –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ WCoin
		const topUsersByWcoin = await getTopUsersByWcoin(15)
		response += `\nüí∞ –¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ WCoin:\n`
		topUsersByWcoin.forEach((user, index) => {
			response += `${index + 1}. [id${user.vk_id}|${user.nickname}] - ${
				user.wcoin
			} WCoin\n`
		})

		await context.send({
			message: response,
			disable_mentions: 1,
		})
	} else if (message === '/–±–æ–Ω—É—Å') {
		await handleBonusCommand(context)
	}
	if (message === '/–∫—É–ø–∏—Ç—å –∫–µ–π—Å') {
		await sendCaseList(context)
	} else if (message === '/–∫—É–ø–∏—Ç—å –∫–µ–π—Å –æ–±—ã—á–Ω—ã–π') {
		await handleBuyCaseCommand(context, 'common', 1000)
	} else if (message === '/–∫—É–ø–∏—Ç—å –∫–µ–π—Å —Å–µ—Ä–µ–±—Ä—è–Ω—ã–π') {
		await handleBuyCaseCommand(context, 'silver', 4000)
	} else if (message === '/–∫—É–ø–∏—Ç—å –∫–µ–π—Å –∑–æ–ª–æ—Ç–æ–π') {
		await handleBuyCaseCommand(context, 'gold', 8000)
	} else if (message === '/–∫—É–ø–∏—Ç—å –∫–µ–π—Å –ø–ª–∞—Ç–∏–Ω–æ–≤—ã–π') {
		await handleBuyCaseCommand(context, 'platinum', 10000)
	} else if (message === '/–∫—É–ø–∏—Ç—å –∫–µ–π—Å waynecase') {
		await handleBuyCaseCommand(context, 'wayne', 20000)
	} else if (message === '/–∫–µ–π—Å—ã') {
		const userCases = await getUserCases(userId)

		if (!userCases) {
			await context.send(
				`${await getUserMention(
					userId
				)}, üóø —É –≤–∞—Å –µ—â–µ –Ω–µ—Ç –∫—É–ø–ª–µ–Ω–Ω—ã—Ö –∫–µ–π—Å–æ–≤.\n\n–°–ø–∏—Å–æ–∫ –ø—Ä–∏–∑–æ–≤: /–∫–µ–π—Å—ã –Ω–∞–≥—Ä–∞–¥—ã`
			)
		} else {
			await context.send(`${await getUserMention(userId)}, üì¶ –í–∞—à–∏ –∫–µ–π—Å—ã:
                üì¶–û–±—ã—á–Ω—ã–π: ${userCases.common}
                üì¶–°–µ—Ä–µ–±—Ä—è–Ω—ã–π: ${userCases.silver}
                üéÅ–ó–æ–ª–æ—Ç–æ–π: ${userCases.gold}
                üéÅ–ü–ª–∞—Ç–∏–Ω–æ–≤—ã–π: ${userCases.platinum}
                üíºWayneCase: ${
									userCases.wayne
								}\n\n–°–ø–∏—Å–æ–∫ –ø—Ä–∏–∑–æ–≤: /–∫–µ–π—Å—ã –Ω–∞–≥—Ä–∞–¥—ã`)
		}
	}
	if (message === '/–æ—Ç–∫—Ä—ã—Ç—å –∫–µ–π—Å –æ–±—ã—á–Ω—ã–π') {
		await handleCaseOpenCommand(context, '–æ–±—ã—á–Ω—ã–π')
	} else if (message === '/–æ—Ç–∫—Ä—ã—Ç—å –∫–µ–π—Å —Å–µ—Ä–µ–±—Ä—è–Ω—ã–π') {
		await handleCaseOpenCommand(context, '—Å–µ—Ä–µ–±—Ä—è–Ω—ã–π')
	} else if (message === '/–æ—Ç–∫—Ä—ã—Ç—å –∫–µ–π—Å –∑–æ–ª–æ—Ç–æ–π') {
		await handleCaseOpenCommand(context, '–∑–æ–ª–æ—Ç–æ–π')
	} else if (message === '/–æ—Ç–∫—Ä—ã—Ç—å –∫–µ–π—Å –ø–ª–∞—Ç–∏–Ω–æ–≤—ã–π') {
		await handleCaseOpenCommand(context, '–ø–ª–∞—Ç–∏–Ω–æ–≤—ã–π')
	} else if (message === '/–æ—Ç–∫—Ä—ã—Ç—å –∫–µ–π—Å waynecase') {
		await handleCaseOpenCommand(context, 'wayne')
	} else if (message.startsWith('/—Å–º–µ–Ω–∏—Ç—å –Ω–∏–∫')) {
		const parts = message.split(' ')
		if (parts.length < 3) {
			await context.send(
				`${await getUserMention(
					userId
				)}, ‚úè –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã "—Å–º–µ–Ω–∏—Ç—å –Ω–∏–∫ [–Ω–æ–≤—ã–π –Ω–∏–∫]".`
			)
		} else {
			const newNickname = parts.slice(2).join(' ').trim()
			if (newNickname.length === 0) {
				await context.send('üò° –ù–∏–∫ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.')
			} else {
				const user = await getUser(userId)
				if (user) {
					await updateUserNickname(userId, newNickname)
					await context.send(
						`${await getUserMention(
							userId
						)}, üéâ –í–∞—à –Ω–∏–∫ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ ${newNickname}.`
					)
				} else {
					await context.send(
						`${await getUserMention(
							userId
						)}, üóø –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ù–∞–ø–∏—à–∏—Ç–µ "reg", —á—Ç–æ–±—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è.`
					)
				}
			}
		}
	} else if (message.startsWith('/–ø–µ—Ä–µ–¥–∞—Ç—å')) {
		const [_, targetId, wcoinAmount] = message.split(' ')
		await handleTransferWcoin(context, targetId, wcoinAmount)
	} else if (message.startsWith('/–∫–æ–º–∞–Ω–¥—ã')) {
		await context.send(
			`${await getUserMention(
				userId
			)}, ‚öô –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã: –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ "/".\n\nüèÜ–ê–∫–∫–∞—É–Ω—Ç:\nüë§"–ø—Ä–æ—Ñ–∏–ª—å"\nüí∏"–ø–µ—Ä–µ–¥–∞—Ç—å"\nüí∞"usepromo"\nüìù"—Å–º–µ–Ω–∏—Ç—å –Ω–∏–∫"\nüìà"—Ä–µ—Ñ–µ—Ä–∞–ª–∫–∞"\n"ref".\n\nüè™WShop:\nüõç"–†—ã–Ω–æ–∫[wmarkets]"\nüì¶–ö–µ–π—Å—ã:\nüéí"–∫–µ–π—Å—ã"\nüí≥"–∫—É–ø–∏—Ç—å –∫–µ–π—Å"\nüé∞"–æ—Ç–∫—Ä—ã—Ç—å –∫–µ–π—Å [–Ω–∞–∑–≤–∞–Ω–∏–µ]"\nü•Ñ–õ–æ–ø–∞—Ç—ã:\nüéí"–ª–æ–ø–∞—Ç—ã"\nüí≥"–∫—É–ø–∏—Ç—å –ª–æ–ø–∞—Ç—É [–Ω–∞–∑–≤–∞–Ω–∏–µ_–ª–æ–ø–∞—Ç—ã]"\n\nüé±–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è:\nüõ°"–ö–ª–∞–Ω[wclan]"\nüé≤"–±–∞—Ä [wbar]"\nüíé"–±–æ–Ω—É—Å"\nüçÄ"–∫–ª–∞–¥—ã"\nüî•"—Å–æ–±—ã—Ç–∏–µ"\nüëâ"—Ç–∞–ø–∞–ª–∫–∞"\nüè¶"—Ñ–æ–Ω–¥"\nüìà"winvest"\n\nüõ†–ü—Ä–æ—á–µ–µ:\n–ø–∞–Ω–µ–ª—å(/–ø)\nüëë"—Ç–æ–ø"\n‚õî"–ø—Ä–∞–≤–∏–ª–∞"\nüí¨"–∫–æ–º–∞–Ω–¥—ã"\nüÜò"–ø–æ–º–æ—â—å"\n\nüîÆVIPüîÆ\nüëò"–º–µ—Ä—á"\nü•á"vip"`
		)
	} else if (message.startsWith('/–Ω–∞–≥—Ä–∞–¥—ã –∫–µ–π—Å–æ–≤')) {
		await context.send(`${await getUserMention(userId)}, –í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.`)
	} else if (message.startsWith('/–ø—Ä–∞–≤–∏–ª–∞')) {
		await context.send(
			`${await getUserMention(
				userId
			)}, ‚Äº –Ω–µ –∑–Ω–∞–Ω–∏–µ –ø—Ä–∞–≤–∏–ª - –Ω–µ –æ—Å–≤–æ–±–æ–∂–¥–∞–µ—Ç –æ—Ç –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏. –õ—é–±—ã–µ –≤–∞—à–∏ –¥–µ–π—Å—Ç–≤–∏—è, –Ω–∞—Ä—É—à–∞—é—â–∏–µ –ø—Ä–∞–≤–∏–ª–∞ –∞–∫—Ü–∏–∏/–±–æ—Ç–∞/–∫–æ–Ω–∫—É—Ä—Å–∞ –ø—Ä–æ–µ–∫—Ç–∞ Waynes, –ø–æ–≤–ª–µ—á–µ—Ç —Å–æ–±–æ–π: –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ, –æ–±–Ω—É–ª–µ–Ω–∏–µ, –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –∞–∫–∫–∞—É–Ω—Ç–∞.\n\nüìå1.1 –ó–∞–ø—Ä–µ—â–µ–Ω–æ —Å–ø–∞–º–∏—Ç—å/—Ñ–ª—É–¥–∏—Ç—å –∏ –ø–∏—Å–∞—Ç—å –±–µ—Å–º—ã—Å–ª–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –∏–º–µ—é—Ç —Ü–µ–ª—å, –Ω–∞–∫—Ä—É—Ç–∏—Ç—å –∏–≥—Ä–æ–≤—É—é –≤–∞–ª—é—Ç—É.\nüìå1.2 –ó–∞–ø—Ä–µ—â–µ–Ω–æ –æ–±–º–∞–Ω—ã–≤–∞—Ç—å, –ø—Ä–∏–∫—Ä–µ–ø–ª—è—Ç—å —Ñ–æ—Ç–æ—à–æ–ø–ª–µ–Ω–Ω—ã–µ, —Å—Ç–∞—Ä—ã–µ –¥–æ–∫-–≤–∞ –≤—ã–∏–≥—Ä—ã—à–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∏–∑–∞.\nüìå1.3 –ó–∞–ø—Ä–µ—â–µ–Ω–æ –≤–≤–æ–¥–∏—Ç—å –≤ –∑–∞–±–ª—É–∂–¥–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–æ–≤, –ø—Ä–æ—Å–∏—Ç—å –¥–∞–Ω–Ω—ã–µ, –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –ø—Ä–æ–µ–∫—Ç–æ–º Waynes –≤ —Å–≤–æ–∏—Ö —Ü–µ–ª—è—Ö.\n\n‚õî–ó–ê–ü–û–ú–ù–ò–¢–ï‚õî - –º–æ–¥–µ—Ä–∞—Ü–∏—è Waynes –Ω–µ –Ω–∞–ø–∏—à–µ—Ç –≤–∞–º –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –≤—ã–∏–≥—Ä—ã—à–∞ –ø—Ä–∏–∑–∞ –∏–ª–∏ —Ä–∞–∑–¥–∞—á–∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞. üìñ–í—Å—è –∞–∫—Ç—É–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤—ã—Å—ã–ª–∞–µ—Ç—Å—è –∏–∑ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤, –ª–∏–±–æ –ø–∏—Å—å–º–æ–º –≤ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—É—é –≥—Ä—É–ø–ø—É. –ú–æ–¥–µ—Ä–∞—Ü–∏—è –Ω–µ –ø—Ä–æ—Å–∏—Ç –≤–∞—à–∏ –ª–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ/–∞–∫–∫–∞—É–Ω—Ç–∞ –æ—Ç ORP, —á—Ç–æ–±—ã –≤—ã–ø–ª–∞—Ç–∏—Ç—å –ø—Ä–∏–∑.`
		)
	} else if (message.startsWith('/winvest')) {
		await context.send(
			`${await getUserMention(
				userId
			)}, –ê–∫—Ü–∏–∏\n–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞\n–ë–∞–ª–∞–Ω—Å\n–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ`
		)
	} else if (message.startsWith('/–ø–æ–º–æ—â—å')) {
		await context.send(
			`${await getUserMention(
				userId
			)}, üí¨ —è –ø–æ–¥—Å–∫–∞–∂—É, –∫–∞–∫ –º–æ–∂–Ω–æ –æ–±—â–∞—Ç—å—Å—è –≤ –Ω–∞—à–µ–º —á–∞—Ç–µ –∏ –ø–æ–ª—É—á–∞—Ç—å –ø—Ä–∏–∑—ã, –æ—Ç–∫—Ä—ã–≤–∞—è –∫–µ–π—Å—ã, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥—ã –∏ –ø—Ä–æ—á–µ–µ.\n\n–ö–∞–∫ –º–æ–∂–Ω–æ –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å WCoin?\n–û–±—â–∞–π—Å—è –≤ —á–∞—Ç–µ –∞–∫—Ç–∏–≤–Ω–µ–µ, WCoin –∏ —Ä–µ–π—Ç–∏–Ω–≥ –±—É–¥–µ—Ç –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å—Å—è —Ç–æ–ª—å–∫–æ –æ—Ç —Ç–≤–æ–µ–≥–æ –æ–±—â–µ–Ω–∏—è, –≥–ª–∞–≤–Ω–æ–µ –Ω–µ –Ω–∞—Ä—É—à–∞–π –ø—Ä–∞–≤–∏–ª–∞.\n–°—Ç–∞–≤—å –ª–∞–π–∫ = 10WCoin, –∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π = 15WCoin, —Ä–µ–ø–æ—Å—Ç–∏ = 50WCoin –∫–∞–∂–¥—ã–π –ø–æ—Å—Ç –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–π –≥—Ä—É–ø–ø—ã.\n\n–ö–∞–∫ –º–Ω–µ –¥–æ–∫–∞–∑–∞—Ç—å, —á—Ç–æ —è –≤—ã–ø–æ–ª–Ω—è—é —É—Å–ª–æ–≤–∏—è –ø—Ä–æ–≥—Ä–∞–º–º—ã?\n–í —Å–ª—É—á–∞–µ –ø–æ—Å—Ç–æ–≤: —Ç—ã –æ—Ç–ø—Ä–∞–≤–ª—è–µ—à—å —Å–∫—Ä–∏–Ω—à–æ—Ç –ª–∞–π–∫–∞/–∫–æ–º–º–µ–Ω—Ç–∞/—Ä–µ–ø–æ—Å—Ç–∞ –∑–∞–ø–∏—Å–∏ –≤ –≥—Ä—É–ø–ø–µ, –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≥—Ä—É–ø–ø—ã –ø–æ —Ñ–æ—Ä–º–µ(–±—É–¥–µ—Ç —Å–Ω–∏–∑—É).\n–í —Å–ª—É—á–∞–µ –∫–µ–π—Å–∞: –ø–µ—Ä–µ—Å—ã–ª–∞–µ—à—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –±–æ—Ç–∞ –∏ —Å–∫—Ä–∏–Ω—à–æ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞ –≤ —á–∞—Ç–µ(–Ω–∏—á–µ–≥–æ –Ω–µ –∑–∞–º–∞–∑–∞–Ω–æ/–Ω–µ —Å—Ä–µ–∑–∞–Ω–æ) –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–π –≥—Ä—É–ø–ø—ã.\n\n–ö–∞–∫–∏–µ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –∏ –∫–æ–º—É –¥–æ–≤–µ—Ä—è—Ç—å?\n–ù–∞—à–∞ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–∞—è –≥—Ä—É–ø–ø–∞: @club199010052 (Waynes Family ONLINE RP)\n–ë–ª–æ–≥ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏: @club223891915 (–ë–ª–æ–≥ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ | Waynes Family).\n\n–ù–µ –ø–∏—à–∏—Ç–µ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞–º/–æ—Å–Ω–æ–≤–∞—Ç–µ–ª—è–º/–º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º –ø—Ä–æ–µ–∫—Ç–∞, –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã —Ä–µ—à–∞—é—Ç—Å—è —á–µ—Ä–µ–∑ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—É—é –≥—Ä—É–ø–ø—É. –ú—ã –Ω–µ –∑–∞–Ω–∏–º–∞–µ–º—Å—è –ø—Ä–æ–∫–∞—á–∫–æ–π –∞–∫–∫–∞—É–Ω—Ç–æ–≤, –º—ã –Ω–µ –ø–∏—à–µ–º —Å–∞–º–∏!(–∏—Å–∫–ª. –Ω–∞–ø–∏—Å–∞–ª–æ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ).\n\n–§–æ—Ä–º–∞ –¥–ª—è –≤—ã–ø–ª–∞—Ç—ã:\n–í—ã–ø–ª–∞—Ç–∞ —Å –ø–æ—Å—Ç–∞/–∫–µ–π—Å–∞:\n–ù–∏–∫:\n–ë–∞–Ω–∫.—Å—á–µ—Ç:\n–î–æ–∫-–≤–∞:\n\n–Ø –∑–∞–º–µ—Ç–∏–ª –±–∞–≥, —á—Ç–æ –¥–µ–ª–∞—Ç—å? –ü–∏—à–∏—à—å —Ç–∞–∫–∂–µ –≤ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—É—é –≥—Ä—É–ø–ø—É —Å –ø–æ–ª–Ω—ã–º –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ–º –±–∞–≥–∞, –∫–∞–∫ —ç—Ç–æ –ø—Ä–æ–∏–∑–æ—à–ª–æ –∏ –±—ã–ª–∏ –ª–∏ —É—Ç–µ—Ä–∏, –¥–ª—è –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–∏.`
		)
	} else if (message.startsWith('/–æ—Ç–∫—Ä—ã—Ç—å –∫–µ–π—Å')) {
		await context.send(
			`${await getUserMention(
				userId
			)}, ‚úÇ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –∫–µ–π—Å–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É: –æ—Ç–∫—Ä—ã—Ç—å –∫–µ–π—Å [–Ω–∞–∑–≤–∞–Ω–∏–µ —Å –º–∞–ª–µ–Ω—å–∫–æ–π –±—É–∫–≤—ã]`
		)
	} else if (message.startsWith('/-v')) {
		await context.send(`1.1.6`)
	} else if (message.startsWith('/–∫–µ–π—Å—ã –Ω–∞–≥—Ä–∞–¥—ã')) {
		await context.send(
			`${await getUserMention(
				userId
			)}, –°–ø–∏—Å–æ–∫ –Ω–∞–≥—Ä–∞–¥ –∏–∑ –∫–µ–π—Å–æ–≤\n–û–±—ã—á–Ω—ã–π: 150WCoin, 200WCoin, 250WCoin,'40.000$','50.000$','60.000$','–ì–∏—Ç–∞—Ä–∞ –Ω–∞ —Å–ø–∏–Ω—É','–ë–∞–Ω–∞–Ω–∫–∞ "Supreme"\n\n–°–µ—Ä–µ–±—Ä—è–Ω—ã–π: 450WCoin, 550WCoin, 700WCoin, '60.000$', '80.000$', '110.000$', '–©–µ–ª–∫—É–Ω—á–∏–∫ –Ω–∞ —Å–ø–∏–Ω—É', '–ö—Ä–µ—Å—Ç –Ω–∞ —Å–ø–∏–Ω—É'\n\n–ó–æ–ª–æ—Ç–æ–π: 450WCoin, 500WCoin, 750WCoin, 800WCoin, '130.000$', '150.000$', '190.000$', '–ú–∏—à–∫–∞ –Ω–∞ —Å–ø–∏–Ω—É', '–ö–æ–Ω—Ñ–µ—Ç–∞ –Ω–∞ —Å–ø–∏–Ω—É', '–ü–æ–¥–∞—Ä–æ–∫ –Ω–∞ —Å–ø–∏–Ω—É'\n\n–ü–ª–∞—Ç–∏–Ω–æ–≤—ã–π: 1700WCoin, 1900WCoin, 2200WCoin, '200.000$', '300.000$', '400.000$', '–§—Ä–µ–¥–¥–∏', '–ê–π—Å–º–µ–Ω', '–ê—Ä–∞–±—Å–∫–∏–π –®–µ–π—Ö', '–ë—É—Å—Ç–µ—Ä'\n\nWayneCase: 2500WCoin, 2900WCoin, 3200WCoin,'700.000$', '820.000$', '900.000$', '1.200.000$' '–î—Ä–µ–π–∫', '–õ–∏—Ç–≤–∏–Ω', '–ò–ª–æ–Ω –ú–∞—Å–∫']`
		)
	} else if (message.startsWith('/vip')) {
		await context.send(
			`${await getUserMention(
				userId
			)}, –í–∞—à –∫–æ—à–µ–ª–µ–∫: 0‚≠êWStars\n\n–°–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫:\nTelegram Premium: 0‚≠êWStars\n–Ø–Ω–¥–µ–∫—Å –ü–ª—é—Å: 0‚≠êWStars\n–í–ö: 0‚≠êWStars\n–ó–≤–µ–∑–¥–æ—á–∫–∏ Telegram: 0‚≠êWStars\n–°—Ç–∏–∫–µ—Ä—ã –í–ö: 0‚≠êWStars\n–°–±–µ—Ä –ü—Ä–µ–º–∏—É–º: 0‚≠êWStars\n\n–°–∫–æ—Ä–æ –±—É–¥–µ—Ç –±–æ–ª—å—à–µ –ø–æ–¥–ø–∏—Å–æ–∫...\n\n–ü–æ–∫—É–ø–∫–∏: ‚≠ê\n–û–±–º–µ–Ω WCoin –Ω–∞ ‚≠êWStars\n–ü—Ä–∞–≤–∏–ª–∞: ...\n–ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–π –æ—Ç–±–æ—Ä: \n\n–°—Ç–∞—Ç—É—Å: –¢–æ–ø–æ–≤—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª = –ü–æ–¥–ø–∏—Å–∫–∞ + ‚≠êWStars\n–°—Ç–∞—Ç—É—Å: –ú–∏–ª–ª–∏–æ–Ω–µ—Ä = –ü–æ–¥–ø–∏—Å–∫–∞ + ‚≠êWStars\n...\n\n–ú–∏–Ω–∏–≥—Ä—ã: –ü–æ–¥–ø–∏—Å–∫–∞ + ‚≠êWStars\n...\n\nEvent: –ü–æ–¥–ø–∏—Å–∫–∞ + ‚≠êWStars\n...`
		)
	} else if (message.startsWith('/—Ä–µ—Ñ–µ—Ä–∞–ª–∫–∞') || message.startsWith('/ref')) {
		const user = await getUser(userId)

		if (user) {
			// –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–≥–ª–∞—à—ë–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
			const referredCount = await new Promise((resolve, reject) => {
				db.get(
					'SELECT COUNT(*) as count FROM referrals WHERE referrer_vk_id = ?',
					[user.vk_id],
					(err, row) => {
						if (err) reject(err)
						else resolve(row.count)
					}
				)
			})

			await context.send(
				`${await getUserMention(
					userId
				)}, –í—ã –ø—Ä–∏–≥–ª–∞—Å–∏–ª–∏ ${referredCount} —á–µ–ª. üéÅ\n\n–ó–æ–≤–∏—Ç–µ —Å–≤–æ–∏—Ö –¥—Ä—É–∑–µ–π –∏–≥—Ä–∞—Ç—å –≤ –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞, –æ—Ç–∫—Ä—ã–≤–∞—Ç—å –∫–µ–π—Å—ã, —Ä–∞–∑–≤–ª–µ–∫–∞—Ç—å—Å—è —Å –Ω–æ–≤—ã–º–∏ –¥—Ä—É–∑—å—è–º–∏ –∏ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å WCoin!\n–û–±–º–µ–Ω–∏–≤–∞–π WCoin –ø—Ä–æ—â–µ –Ω–∞ VIP —Ä–∞–∑–¥–µ–ª–µ\n\n–ó–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ, –º—ã –≤–∞–º –¥–∞–µ–º 800WCoin, –∞ –≤–∞—à–µ–º—É –¥—Ä—É–≥—É 600WCoin!\n\n–û—Ç–ø–∏—à–∏—Ç–µ –Ω–∞–º –≤ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—É—é –≥—Ä—É–ø–ø—É -- [https://vk.com/waynes_family|Waynes Family ONLINE RP] –∏ —Å–æ–æ–±—â–∏—Ç–µ, —á—Ç–æ –∏–º–µ–Ω–Ω–æ –≤—ã –µ–≥–æ –ø—Ä–∏–≥–ª–∞—Å–∏–ª–∏.`
			)
		} else {
			await context.send(
				`${await getUserMention(
					userId
				)}, üóø –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ù–∞–ø–∏—à–∏—Ç–µ "/reg", —á—Ç–æ–±—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è.`
			)
		}
	} else if (message.startsWith('/–≤–≤–µ—Å—Ç–∏ –∫–æ–¥')) {
		// –ü–æ–ª—É—á–∞–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥ –∏–∑ –∫–æ–º–∞–Ω–¥—ã
		const args = message.split(' ')
		const refCode = args[2] // –ö–æ–¥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ç—Ä–µ—Ç—å–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç–æ–º (–∏–Ω–¥–µ–∫—Å 2)

		function getAsync(query, params) {
			return new Promise((resolve, reject) => {
				db.get(query, params, (err, row) => {
					if (err) reject(err)
					else resolve(row)
				})
			})
		}

		function runAsync(query, params) {
			return new Promise((resolve, reject) => {
				db.run(query, params, function (err) {
					if (err) reject(err)
					else resolve(this)
				})
			})
		}

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥ –±—ã–ª –≤–≤–µ–¥—ë–Ω
		if (!refCode) {
			await context.send(
				'–í—ã –Ω–µ –≤–≤–µ–ª–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –µ–≥–æ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã.'
			)
			return
		}

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
		const user = await getAsync('SELECT * FROM users WHERE vk_id = ?', [
			context.senderId,
		])
		if (!user) {
			await context.send('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.')
			return
		}

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—â–µ –Ω–µ –≤–≤–æ–¥–∏–ª —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥
		if (user.referred_by) {
			await context.send('–í—ã —É–∂–µ –≤–≤–µ–ª–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥.')
			return
		}

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–∞–∫–æ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥
		const referrer = await getAsync(
			'SELECT * FROM users WHERE referral_code = ?',
			[refCode]
		)
		if (!referrer) {
			await context.send('–î–∞–Ω–Ω—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.')
			return
		}

		// –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–º, –∫—Ç–æ –ø—Ä–∏–≥–ª–∞—Å–∏–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
		await runAsync('UPDATE users SET referred_by = ? WHERE vk_id = ?', [
			referrer.vk_id,
			context.senderId,
		])

		// –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ —Ç–∞–±–ª–∏—Ü—É —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
		await runAsync(
			'INSERT INTO referrals (referrer_vk_id, referred_vk_id) VALUES (?, ?)',
			[referrer.vk_id, context.senderId]
		)

		// –ù–∞–≥—Ä–∞–∂–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 200 WCoin
		await runAsync('UPDATE users SET wcoin = wcoin + ? WHERE vk_id = ?', [
			200,
			context.senderId,
		])

		// –ù–∞–≥—Ä–∞–∂–¥–∞–µ–º —Ä–µ—Ñ–µ—Ä–µ—Ä–∞ 200 WCoin
		await runAsync('UPDATE users SET wcoin = wcoin + ? WHERE vk_id = ?', [
			200,
			referrer.vk_id,
		])

		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
		const referrerNickname = referrer.nickname || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'
		await context.send(
			`–í—ã —É—Å–ø–µ—à–Ω–æ –≤–≤–µ–ª–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥! –í–∞—Å –ø—Ä–∏–≥–ª–∞—Å–∏–ª ${referrerNickname} –µ–º—É –Ω–∞—á–∏—Å–ª–µ–Ω–æ 150 WCoin. –í—ã –ø–æ–ª—É—á–∏–ª–∏ 200 WCoin –≤ –∫–∞—á–µ—Å—Ç–≤–µ –Ω–∞–≥—Ä–∞–¥—ã!`
		)

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–∫–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —É–∂–µ –ø—Ä–∏–≥–ª–∞—Å–∏–ª —Ä–µ—Ñ–µ—Ä–µ—Ä
		const referredCount = await new Promise((resolve, reject) => {
			db.get(
				'SELECT COUNT(*) as count FROM referrals WHERE referrer_vk_id = ?',
				[referrer.vk_id],
				(err, row) => {
					if (err) reject(err)
					else resolve(row.count)
				}
			)
		})

		let newReferralLevel = user.referral_level
		let rewardAmount = 0

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è —Ä–µ—Ñ–µ—Ä–µ—Ä–∞
		if (referrer.referral_level === 1 && referredCount >= 1) {
			newReferralLevel = 2
			rewardAmount = 150 // –ù–∞–≥—Ä–∞–¥–∞ –∑–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è 2
		} else if (referrer.referral_level === 2 && referredCount >= 3) {
			newReferralLevel = 3
			rewardAmount = 300 // –ù–∞–≥—Ä–∞–¥–∞ –∑–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è 3
		} else if (referrer.referral_level === 3 && referredCount >= 6) {
			newReferralLevel = 4
			rewardAmount = 600 // –ù–∞–≥—Ä–∞–¥–∞ –∑–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è 4
		} else if (referrer.referral_level === 4 && referredCount >= 8) {
			newReferralLevel = 5
			rewardAmount = 1000 // –ù–∞–≥—Ä–∞–¥–∞ –∑–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è 5
		}

		// –ï—Å–ª–∏ —É—Ä–æ–≤–µ–Ω—å –ø–æ–≤—ã—Å–∏–ª—Å—è, –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –ë–î –¥–ª—è —Ä–µ—Ñ–µ—Ä–µ—Ä–∞
		if (newReferralLevel > referrer.referral_level) {
			await db.run(
				'UPDATE users SET referral_level = ?, wcoin = wcoin + ? WHERE vk_id = ?',
				[newReferralLevel, rewardAmount, referrer.vk_id]
			)

			// –ü–æ–ª—É—á–∞–µ–º –Ω–∏–∫ –∏ —Å—Å—ã–ª–∫—É –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å –ø—Ä–∏–≥–ª–∞—Å–∏–≤—à–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
			const referrerUser = await getAsync(
				'SELECT nickname, vk_id FROM users WHERE vk_id = ?',
				[referrer.vk_id]
			)

			if (!referrerUser) {
				await context.send(
					'–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–∏–≥–ª–∞—Å–∏–≤—à–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ.'
				)
				return
			}

			const referrerNick = referrerUser.nickname
			const referrerProfileLink = `@id${referrerUser.vk_id}`

			// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º —Ä–µ—Ñ–µ—Ä–µ—Ä–∞
			await context.send(
				`${referrerProfileLink} (${referrerNick}) –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í–∞—à —É—Ä–æ–≤–µ–Ω—å —Ä–µ—Ñ–µ—Ä–∞–ª–∞ –ø–æ–≤—ã—Å–∏–ª—Å—è –¥–æ ${newReferralLevel}. –í—ã –ø–æ–ª—É—á–∏–ª–∏ ${rewardAmount} WCoin!`
			)
		}
	} else if (message.startsWith('/–º–µ—Ä—á')) {
		await context.send(
			`${await getUserMention(
				userId
			)}, –£ –Ω–∞—Å –µ—Å—Ç—å —Å–≤–æ–π –º–µ—Ä—á! –ü–æ–∫—É–ø–∞–π —Ö—É–¥–∏ –ø–æ —Ü–µ–Ω–µ –Ω–∏–∂–µ —Ä—ã–Ω–∫–∞ –∏ –ø–æ–ª—É—á–∞–π —è—Ä–∫–∏–µ —ç–º–æ—Ü–∏–∏ –ø–æ —É–ª–∏—á–Ω–æ–π –ø—Ä–æ–≥—É–ª–∫–µ –∏–ª–∏ –ø–æ –¥–æ—Ä–æ–≥–µ –¥–æ–º–æ–π. –í—ã–¥–µ–ª—è–π—Å—è —Å —Ç–æ–ª–ø—ã –≤–º–µ—Å—Ç–µ —Å –Ω–∞–º–∏!\n\n–£ –≤–∞—Å –µ—Å—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∫—É–ø–∏—Ç—å –¥–∞–∂–µ –∑–∞ WCoin = 65.000, –∞ –µ—Å–ª–∏ –Ω–µ —Ö–æ—Ç–∏—Ç–µ –¥–æ–ª–≥–æ –∂–¥–∞—Ç—å = 2799—Ä!\n\n–ü–æ–¥—Ä–æ–±–Ω–µ–µ –≤ –Ω–∞—à–µ–π –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–π –≥—Ä—É–ø–ø–µ.`
		)
	} else if (message.startsWith('/–∫–ª–∞–¥—ã')) {
		await context.send(
			`${await getUserMention(
				userId
			)}, –ü–æ –º–∏—Ä—É –Ω–∞–π–¥–µ–Ω–æ –º–Ω–æ–≥–æ –∫–ª–∞–¥–æ–≤, –ø–æ–∫—É–ø–∞–π –ª–æ–ø–∞—Ç—É –∏ —Å–∫–æ—Ä–µ–π –∑–∞ —Ä–∞–±–æ—Ç—É!\n–ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É: /–∫–æ–ø–∞—Ç—å –∫–ª–∞–¥ [–Ω–∞–∑–≤–∞–Ω–∏–µ_–ª–æ–ø–∞—Ç—ã].`
		)
	} else if (message.startsWith('/—Ç–∞–ø')) {
		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∫–æ–º–∞–Ω–¥—É –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö
		if (context.isChat) {
			return context.send('–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö.')
		}

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —ç–Ω–µ—Ä–≥–∏—è
		if (!userEnergy[userId]) {
			userEnergy[userId] = { energy: 10, lastTap: Date.now() }
		}

		const currentTime = Date.now()
		const userData = userEnergy[userId]

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–æ—à–µ–ª –ª–∏ —á–∞—Å —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
		if (currentTime - userData.lastTap >= cooldownTime) {
			userData.energy = 10 // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —ç–Ω–µ—Ä–≥–∏—é
			userData.lastTap = currentTime // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
		}

		if (userData.energy > 0) {
			// –£–º–µ–Ω—å—à–∞–µ–º —ç–Ω–µ—Ä–≥–∏—é –∏ –Ω–∞—á–∏—Å–ª—è–µ–º WCoin
			userData.energy -= 1
			await updateUserWcoin(userId, 1)

			// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–µ–∫—É—â–µ–π —ç–Ω–µ—Ä–≥–∏–∏
			return context.send(
				`–¢—ã —Ç–∞–ø–Ω—É–ª –ø–æ –º–æ–µ–π –ª–∏–º–∏—Ç–∫–µ. –≠–Ω–µ—Ä–≥–∏—è: ${userData.energy}/10`
			)
		} else {
			// –ï—Å–ª–∏ —ç–Ω–µ—Ä–≥–∏—è 0, —Å–æ–æ–±—â–∞–µ–º –æ–± —ç—Ç–æ–º
			return context.send('–ù—É –≤—Å–µ —Ö–≤–∞—Ç–∏—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–π—Å—è —á–µ—Ä–µ–∑ 1 —á–∞—Å.')
		}
	} else if (message.startsWith('/ahelp')) {
		const allowedIds = [252840773, 422202607] // –°–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã—Ö ID

		if (allowedIds.includes(userId)) {
			await context.send(
				`–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n/–≤—ã–¥–∞—Ç—å [ID/@—É–ø–æ–º–∏–Ω–∞–Ω–∏–µ] [–∫–æ–ª-–≤–æ WCoin - –∏–ª–∏ +]\n/givestatus [ID/—Å—Å—ã–ª–∫–∞/—É–ø–æ–º–∏–Ω–∞–Ω–∏–µ] [–°—Ç–∞—Ç—É—Å]\n/givemd [ID/—É–ø–æ–º–∏–Ω–∞–Ω–∏–µ]\n/delmd [ID/—É–ø–æ–º–∏–Ω–∞–Ω–∏–µ]\n/ccreatpromo [–∫–æ–¥] [—Å—É–º–º–∞] [–∫–æ–ª-–≤–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–π]\n/creatpromo [—Ç–µ–∫—Å—Ç] [—Å—É–º–º–∞]\n/delpromo [—Ç–µ–∫—Å—Ç]\n/—Ä–∞—Å—Å—ã–ª–∫–∞ [—Ç–µ–∫—Å—Ç]\n/creatquest [—Ç–µ–∫—Å—Ç]\n/delquest\n/creativent [–Ω–æ–º–µ—Ä –∑–∞–¥–∞–Ω–∏—è] [–∑–∞–¥–∞–Ω–∏–µ] [–∫–æ–ª-–≤–æ WCoin]\n/checkivent [–Ω–æ–º–µ—Ä –∑–∞–¥–∞–Ω–∏—è] [@—É–ø–æ–º–∏–Ω–∞–Ω–∏–µ_–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è]\n/delivent [–Ω–æ–º–µ—Ä –∑–∞–¥–∞–Ω–∏—è]\n/clearvillage [–Ω–∞–∑–≤–∞–Ω–∏–µ –¥–µ—Ä–µ–≤–Ω–∏]\n/clearwarvillage\n/villagesinfo`
			)
		} else {
			await context.send(
				`${await getUserMention(
					userId
				)}, üò° –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.`
			)
		}
	} else if (message.startsWith('/mhelp')) {
		const status = await getUserStatus(userId)

		if (
			status === '–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä' ||
			status === '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä' ||
			allowedIds.includes(userId)
		) {
			await context.send(
				`–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞:\n/—à—Ç—Ä–∞—Ñ [ID/—É–ø–æ–º–∏–Ω–∞–Ω–∏–µ]\n/checkivent [–Ω–æ–º–µ—Ä –∑–∞–¥–∞–Ω–∏—è] [@—É–ø–æ–º–∏–Ω–∞–Ω–∏–µ_–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è]\n/—á–∏—Å–ª–æ cleargame\n/—á–∏—Å–ª–æ –∫–∏–∫ [ID/—É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è]`
			)
		} else {
			await context.send(
				`${await getUserMention(
					userId
				)}, üò° –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.`
			)
		}
	}
	if (message.startsWith('/—à—Ç—Ä–∞—Ñ')) {
		const status = await getUserStatus(userId)

		// –ü—Ä–æ–≤–µ—Ä–∫–∞, –∏–º–µ–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∞–≤–∞ (–º–æ–¥–µ—Ä–∞—Ç–æ—Ä –∏–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä)
		if (
			status !== '–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä' &&
			status !== '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä' &&
			!allowedIds.includes(userId)
		) {
			await context.send('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.')
			return
		}

		const [command, target] = message.split(' ')
		const targetId = await resolveUserId(target)

		if (targetId) {
			const targetWcoin = await getUserWcoin(targetId)

			// –°–Ω–∏–º–∞–µ–º 500 WCoin, –¥–∞–∂–µ –µ—Å–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –±—É–¥–µ—Ç –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º
			await updateUserWcoin(targetId, -500)

			const updatedWcoin = targetWcoin - 500
			await context.send(
				`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —É—Å–ø–µ—à–Ω–æ —Å–Ω—è—Ç–æ 500 WCoin. –¢–µ–ø–µ—Ä—å —É –Ω–µ–≥–æ ${updatedWcoin} WCoin.`
			)
		} else {
			await context.send('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.')
		}
	} else if (message.startsWith('/givemd')) {
		if (!allowedIds.includes(userId)) {
			await context.send('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.')
			return
		}

		const [command, target] = message.split(' ')
		const targetId = await resolveUserId(target)

		if (targetId) {
			db.run(
				"UPDATE users SET status = '–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä' WHERE vk_id = ?",
				[targetId],
				async err => {
					if (err) {
						console.error(err)
						await context.send('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞.')
					} else {
						await context.send(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –Ω–∞–∑–Ω–∞—á–µ–Ω –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º.`)
					}
				}
			)
		} else {
			await context.send('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.')
		}
	} else if (message.startsWith('/delmd')) {
		if (!allowedIds.includes(userId)) {
			await context.send('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.')
			return
		}

		const [command, target] = message.split(' ')
		const targetId = await resolveUserId(target)

		if (targetId) {
			db.run(
				"UPDATE users SET status = '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å' WHERE vk_id = ?",
				[targetId],
				async err => {
					if (err) {
						console.error(err)
						await context.send('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞.')
					} else {
						await context.send(
							`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —Å–Ω—è—Ç —Å –¥–æ–ª–∂–Ω–æ—Å—Ç–∏ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞.`
						)
					}
				}
			)
		} else {
			await context.send('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.')
		}
	} else if (message.startsWith('/—Ä–∞—Å—Å—ã–ª–∫–∞')) {
		if (allowedIds.includes(userId)) {
			const broadcastMessage = message.replace('/—Ä–∞—Å—Å—ã–ª–∫–∞', '').trim()

			if (!broadcastMessage) {
				await context.send(
					`${await getUserMention(
						userId
					)}, –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.`
				)
				return
			}

			// –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∏–∞–ª–æ–≥–∏ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
			try {
				let offset = 0
				const limit = 200 // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞ –æ–¥–∏–Ω –∑–∞–ø—Ä–æ—Å
				let conversations = []
				let hasMore = true

				while (hasMore) {
					const response = await vk.api.messages.getConversations({
						count: limit,
						offset: offset,
						filter: 'all',
					})

					conversations = conversations.concat(response.items)
					offset += limit
					hasMore = response.items.length === limit // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º, –µ—Å–ª–∏ –µ—Å—Ç—å –µ—â–µ

					// –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
					for (const conversation of response.items) {
						const peerId = conversation.conversation.peer.id

						// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –∞ –Ω–µ –≥—Ä—É–ø–ø–∞ –∏–ª–∏ —á–∞—Ç
						if (peerId < 2000000000) {
							try {
								await vk.api.messages.send({
									user_id: peerId,
									message: broadcastMessage,
									random_id: Math.floor(Math.random() * 1000000),
								})
							} catch (error) {
								console.error(
									`–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å ID ${peerId}:`,
									error
								)
							}
						}
					}
				}

				await context.send(
					`${await getUserMention(userId)}, –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.`
				)
			} catch (error) {
				console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∏–∞–ª–æ–≥–æ–≤:', error)
				await context.send(
					`${await getUserMention(
						userId
					)}, –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π.`
				)
			}
		} else {
			await context.send(
				`${await getUserMention(
					userId
				)}, üò° –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.`
			)
		}
	} else if (message.startsWith('/givestatus')) {
		const args = message.split(' ')

		if (!allowedIds.includes(userId)) {
			return await context.send(
				'‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.'
			)
		}

		if (args.length === 1) {
			return await context.send(`–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã: ${statuses.join(', ')}`)
		}

		const status = args[2]
		const target = args[1]

		if (!statuses.includes(status)) {
			return await context.send(
				'‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Å—Ç–∞—Ç—É—Å. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /givestatus –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—Ç–∞—Ç—É—Å–æ–≤.'
			)
		}

		// –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø–æ–º–æ—â—å—é —Ñ—É–Ω–∫—Ü–∏–∏ resolveUserId
		const targetUserId = await resolveUserId(target)

		if (!targetUserId) {
			return await context.send(
				'‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —Å—Å—ã–ª–∫–∏, —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏–ª–∏ ID.'
			)
		}

		// –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
		await db.run('UPDATE users SET status = ? WHERE vk_id = ?', [
			status,
			targetUserId,
		])
		await context.send(
			`üéâ –°—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID ${targetUserId} —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ "${status}".`
		)
	} else if (message.startsWith('/villagesinfo')) {
		// –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
		if (!allowedIds.includes(userId)) {
			await context.send(
				`${await getUserMention(
					userId
				)}, üò° –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.`
			)
			return
		}

		// –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–µ—Ä–µ–≤–Ω—è—Ö –∏ –∫–ª–∞–Ω–∞—Ö
		db.all(
			`SELECT v.name AS village_name, c.name AS clan_name, 
                v.last_join_timestamp,
                (strftime('%s', 'now') - v.last_join_timestamp) / 60 AS minutes_since_join
         FROM villages v 
         LEFT JOIN clans c ON v.clan_id = c.id
         WHERE v.clan_id IS NOT NULL`,
			(err, rows) => {
				if (err) {
					console.error('Error fetching villages info:', err)
					context.send(
						'‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–µ—Ä–µ–≤–Ω—è—Ö.'
					)
					return
				}

				if (rows.length === 0) {
					context.send('üè° –£ –≤—Å–µ—Ö –∫–ª–∞–Ω–æ–≤ –Ω–µ—Ç –∑–∞—Ö–≤–∞—á–µ–Ω–Ω—ã—Ö –¥–µ—Ä–µ–≤–µ–Ω—å.')
					return
				}

				let responseMessage = 'üó∫Ô∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞—Ö–≤–∞—á–µ–Ω–Ω—ã—Ö –¥–µ—Ä–µ–≤–Ω—è—Ö:\n'
				rows.forEach(row => {
					responseMessage += `üè∞ –î–µ—Ä–µ–≤–Ω—è: ${row.village_name}, –ö–ª–∞–Ω: ${
						row.clan_name
					}, –í—Ä–µ–º—è —Å –º–æ–º–µ–Ω—Ç–∞ –∑–∞—Ö–≤–∞—Ç–∞: ${Math.floor(
						row.minutes_since_join
					)} –º–∏–Ω—É—Ç.\n`
				})

				context.send(responseMessage)
			}
		)
	} else if (message.startsWith('/clearwarvillage')) {
		if (allowedIds.includes(userId)) {
			// –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–µ—Ä–µ–≤–Ω—è—Ö, –Ω–∞—Ö–æ–¥—è—â–∏—Ö—Å—è –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –∑–∞—Ö–≤–∞—Ç–∞
			db.all(
				`SELECT villages.name, clans.name AS clan_name 
             FROM villages 
             LEFT JOIN clans ON villages.attacking_clan_id = clans.id 
             WHERE villages.is_in_battle = 1`,
				[],
				async (err, villagesInBattle) => {
					if (err) {
						await context.send(
							`${await getUserMention(
								userId
							)}, ‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –¥–µ—Ä–µ–≤–Ω—è—Ö.`
						)
						console.error(err)
					} else if (villagesInBattle.length === 0) {
						await context.send(
							`${await getUserMention(
								userId
							)}, ‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—Ö–≤–∞—Ç–æ–≤ –¥–µ—Ä–µ–≤–µ–Ω—å.`
						)
					} else {
						// –û—á–∏—â–∞–µ–º –∑–∞—Ö–≤–∞—Ç—ã –¥–µ—Ä–µ–≤–µ–Ω—å
						db.run(
							`UPDATE villages SET is_in_battle = 0, attacking_clan_id = NULL`,
							[],
							async err => {
								if (err) {
									await context.send(
										`${await getUserMention(
											userId
										)}, ‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—Ö–≤–∞—Ç–æ–≤ –¥–µ—Ä–µ–≤–µ–Ω—å.`
									)
									console.error(err)
								} else {
									// –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∫–ª–∞–Ω–∞—Ö, —á—å–∏ –∑–∞—Ö–≤–∞—Ç—ã –±—ã–ª–∏ –æ—á–∏—â–µ–Ω—ã
									const clearedVillagesInfo = villagesInBattle
										.map(
											village =>
												`–î–µ—Ä–µ–≤–Ω—è "${village.name}" (–ö–ª–∞–Ω: ${
													village.clan_name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
												})`
										)
										.join('\n')

									await context.send(
										`${await getUserMention(
											userId
										)}, ‚úîÔ∏è –í—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞—Ö–≤–∞—Ç—ã –¥–µ—Ä–µ–≤–µ–Ω—å –æ—á–∏—â–µ–Ω—ã.\n–û—á–∏—â–µ–Ω–Ω—ã–µ –∑–∞—Ö–≤–∞—Ç—ã:\n${clearedVillagesInfo}`
									)
								}
							}
						)
					}
				}
			)
		} else {
			await context.send(
				`${await getUserMention(
					userId
				)}, üò° –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.`
			)
		}
	} // –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∏–∑—ä—è—Ç–∏—è –¥–µ—Ä–µ–≤–Ω–∏ –∏–∑ –∏–º—É—â–µ—Å—Ç–≤–∞ –∫–ª–∞–Ω–∞
	else if (message.startsWith('/clearvillage')) {
		const villageName = message.split(' ').slice(1).join(' ') // –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Å–µ —á–∞—Å—Ç–∏ –Ω–∞–∑–≤–∞–Ω–∏—è –¥–µ—Ä–µ–≤–Ω–∏

		if (allowedIds.includes(userId)) {
			if (!villageName) {
				await context.send(
					`${await getUserMention(
						userId
					)}, ‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /clearvillage [–Ω–∞–∑–≤–∞–Ω–∏–µ –¥–µ—Ä–µ–≤–Ω–∏]`
				)
				return
			}

			// –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–µ—Ä–µ–≤–Ω—é —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º
			db.get(
				`SELECT * FROM villages WHERE name = ?`,
				[villageName],
				async (err, village) => {
					if (err) {
						await context.send(
							`${await getUserMention(
								userId
							)}, ‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –¥–µ—Ä–µ–≤–Ω–∏.`
						)
						console.error(err)
						return
					}

					if (!village || village.clan_id === null) {
						await context.send(
							`${await getUserMention(
								userId
							)}, üóø –î–µ—Ä–µ–≤–Ω—è ${villageName} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.`
						)
						return
					}

					// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–µ—Ä–µ–≤–Ω—è –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –∫–ª–∞–Ω—É
					db.run(
						`UPDATE villages SET clan_id = NULL WHERE name = ?`,
						[villageName],
						async err => {
							if (err) {
								await context.send(
									`${await getUserMention(
										userId
									)}, ‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑—ä—è—Ç–∏–∏ –¥–µ—Ä–µ–≤–Ω–∏.`
								)
								console.error(err)
							} else {
								await context.send(
									`${await getUserMention(
										userId
									)}, ‚úîÔ∏è –î–µ—Ä–µ–≤–Ω—è ${villageName} —É—Å–ø–µ—à–Ω–æ –∏–∑—ä—è—Ç–∞ –∏–∑ –∏–º—É—â–µ—Å—Ç–≤–∞ –∫–ª–∞–Ω–∞.`
								)
							}
						}
					)
				}
			)
		} else {
			await context.send(
				`${await getUserMention(
					userId
				)}, üò° –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.`
			)
		}
	}
	if (message.startsWith('/creativent')) {
		const args = message.split(' ')
		const taskId = args[1]
		const taskText = args.slice(2, -1).join(' ')
		const reward = parseInt(args[args.length - 1], 10)

		if (!allowedIds.includes(userId)) {
			return context.send('–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è.')
		}

		// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
		db.run(
			'INSERT INTO quests (id, text, reward) VALUES (?, ?, ?)',
			[taskId, taskText, reward],
			err => {
				if (err) {
					return context.send('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è.')
				}

				quests[taskId] = { text: taskText, reward }
				context.send(
					`–ó–∞–¥–∞–Ω–∏–µ #${taskId} —Å–æ–∑–¥–∞–Ω–æ: ${taskText} (–ù–∞–≥—Ä–∞–¥–∞: ${reward} WCoin)`
				)
			}
		)
		return
	}

	// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è
	if (message.startsWith('/delivent')) {
		const args = message.split(' ')
		const taskId = args[1]

		if (!allowedIds.includes(userId)) {
			return context.send('–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏–π.')
		}

		if (quests[taskId]) {
			// –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
			db.run('DELETE FROM quests WHERE id = ?', [taskId], err => {
				if (err) {
					return context.send('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è.')
				}

				delete quests[taskId]
				context.send(`–ó–∞–¥–∞–Ω–∏–µ #${taskId} —É–¥–∞–ª–µ–Ω–æ.`)
			})
		} else {
			context.send(`–ó–∞–¥–∞–Ω–∏–µ #${taskId} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.`)
		}
		return
	}

	// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è
	if (message.startsWith('/checkivent')) {
		const args = message.split(' ')
		const taskId = args[1]
		const target = args[2]

		// –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
		const status = await getUserStatus(userId)

		// –ü—Ä–æ–≤–µ—Ä–∫–∞, –∏–º–µ–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∞–≤–∞ (–º–æ–¥–µ—Ä–∞—Ç–æ—Ä, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –∏–ª–∏ –≤ —Å–ø–∏—Å–∫–µ —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã—Ö ID)
		if (
			status !== '–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä' &&
			status !== '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä' &&
			!allowedIds.includes(userId)
		) {
			return context.send('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–¥–∞–Ω–∏–π.')
		}

		const targetUserId = await resolveUserId(target)
		if (!quests[taskId]) {
			return context.send(`–ó–∞–¥–∞–Ω–∏–µ #${taskId} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.`)
		}

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–æ –ª–∏ –∑–∞–¥–∞–Ω–∏–µ —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ
		const taskStatus = await getUserTaskStatus(targetUserId, taskId)
		if (taskStatus.completed) {
			return context.send(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤—ã–ø–æ–ª–Ω–∏–ª –∑–∞–¥–∞–Ω–∏–µ #${taskId}.`)
		}

		// –õ–æ–≥–∏–∫–∞ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –Ω–∞–≥—Ä–∞–¥—ã
		const reward = quests[taskId].reward

		const targetUsername = await getUserNickname(targetUserId) // –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–º—É –≤—ã–¥–∞–Ω–æ –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ

		// –û–±–Ω–æ–≤–ª—è–µ–º WCoin –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
		await updateUserWcoin(targetUserId, reward)

		// –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è
		await markTaskAsCompleted(targetUserId, taskId)

		await context.send(
			`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é [id${targetUserId}|${targetUsername}] –∑–∞ –∑–∞–¥–∞–Ω–∏–µ #${taskId} –Ω–∞—á–∏—Å–ª–µ–Ω–æ ${reward} WCoin.`
		)

		// –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
		const adminId = 252840773
		const adminUsername = await getUserNickname(userId) // –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –≤—ã–ø–æ–ª–Ω–∏–≤—à–µ–≥–æ –∫–æ–º–∞–Ω–¥—É

		const notificationMessage = `üîî –ö–æ–º–∞–Ω–¥–∞ /checkivent –±—ã–ª–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞:
- –í—ã–ø–æ–ª–Ω–∏–ª: [id${userId}|${adminUsername}]
- –í—ã–¥–∞–Ω–æ: [id${targetUserId}|${targetUsername}]
- –ó–∞–¥–∞–Ω–∏–µ: #${taskId}
- –ù–∞–≥—Ä–∞–¥–∞: ${reward} WCoin`

		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é 252840773 –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
		await vk.api.messages.send({
			user_id: adminId, // ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–º—É –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —Å–æ–æ–±—â–µ–Ω–∏–µ
			message: notificationMessage,
			random_id: Math.floor(Math.random() * 1000000), // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
		})
		return
	} // –ö–æ–º–∞–Ω–¥–∞ /—á–∏—Å–ª–æ ‚Äî –≤—ã–≤–æ–¥ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥
	if (message === '/—á–∏—Å–ª–æ') {
		return context.send(`
            –ö–æ–º–∞–Ω–¥—ã –∏–≥—Ä—ã "–£–≥–∞–¥–∞–π —á–∏—Å–ª–æ":
            1. /—á–∏—Å–ª–æ –∏–≥—Ä–∞—Ç—å - –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∏–≥—Ä–µ 80WCoin (–ø–µ—Ä–≤—ã–π –Ω–∞–ø–∏—Å–∞–≤—à–∏–π —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º)
            2. /—á–∏—Å–ª–æ –Ω–∞—á–∞—Ç—å - –ù–∞—á–∞—Ç—å –∏–≥—Ä—É (—Ç–æ–ª—å–∫–æ –¥–ª—è —Å–æ–∑–¥–∞—Ç–µ–ª—è, –º–∏–Ω–∏–º—É–º 2 –∏–≥—Ä–æ–∫–∞)
            3. /—á–∏—Å–ª–æ [—á–∏—Å–ª–æ] - –£–≥–∞–¥–∞—Ç—å —á–∏—Å–ª–æ –≤ —Å–≤–æ–π —Ö–æ–¥\n4. /—á–∏—Å–ª–æ –≤—ã–π—Ç–∏ - –í—ã–π—Ç–∏ –∏–∑ –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä—ã\n5. /—á–∏—Å–ª–æ —Ä–µ–ø–æ—Ä—Ç [ID/—É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è] - –µ—Å–ª–∏ –∏–≥—Ä–æ–∫ –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç, –º–æ–∂–Ω–æ –ø–æ–∑–≤–∞—Ç—å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤
        `)
	}

	if (message === '/—á–∏—Å–ª–æ –∏–≥—Ä–∞—Ç—å') {
		const user = await getUser(userId)
		if (!user) {
			return context.send(
				`${await getUserMention(
					userId
				)}, –¥–ª—è —É—á–∞—Å—Ç–∏—è –≤–∞–º –Ω—É–∂–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è. –í–≤–µ–¥–∏—Ç–µ /reg.`
			)
		}
		if (user.wcoin < 80) {
			return context.send(
				`${await getUserMention(
					userId
				)}, —É –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ WCoin –¥–ª—è —É—á–∞—Å—Ç–∏—è. –¢—Ä–µ–±—É–µ—Ç—Å—è –º–∏–Ω–∏–º—É–º 80 WCoin.`
			)
		}

		if (!gameState.isGameActive) {
			// –ò–≥—Ä–∞ –µ—â–µ –Ω–µ –Ω–∞—á–∞–ª–∞—Å—å
			if (!gameState.players.includes(userId)) {
				gameState.players.push(userId)
				if (!gameState.gameCreator) {
					gameState.gameCreator = userId // –ü–µ—Ä–≤—ã–π –∏–≥—Ä–æ–∫ ‚Äî —Å–æ–∑–¥–∞—Ç–µ–ª—å –∏–≥—Ä—ã
					context.send(
						`üéÆ ${await getUserMention(
							userId
						)} —Å–æ–∑–¥–∞–ª –∏–≥—Ä—É. –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–æ–±–∏—Ä–∞—Ç—å—Å—è –≤ –≥—Ä—É–ø–ø—É, –∫–∞–∫ –±—É–¥–µ—Ç–µ –≥–æ—Ç–æ–≤—ã, —Å–æ–∑–¥–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –Ω–∞–ø–∏—Å–∞—Ç—å: /—á–∏—Å–ª–æ –Ω–∞—á–∞—Ç—å`
					)
				}
				return context.send(
					`${await getUserMention(userId)} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –∏–≥—Ä–µ!üë•`
				)
			} else {
				return context.send(
					`${await getUserMention(userId)}, –≤—ã —É–∂–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ –∏–≥—Ä–µ.üéÆ`
				)
			}
		} else {
			return context.send(
				`${await getUserMention(
					userId
				)}, –∏–≥—Ä–∞ —É–∂–µ –∏–¥–µ—Ç. –î–æ–∂–¥–∏—Ç–µ—Å—å —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ä–∞—É–Ω–¥–∞.üéÆ`
			)
		}
	}

	// –ö–æ–º–∞–Ω–¥–∞ /—á–∏—Å–ª–æ –Ω–∞—á–∞—Ç—å ‚Äî —Ç–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å –∏–≥—Ä—ã –º–æ–∂–µ—Ç –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É
	if (message === '/—á–∏—Å–ª–æ –Ω–∞—á–∞—Ç—å') {
		if (gameState.isGameActive) {
			return context.send('–ò–≥—Ä–∞ —É–∂–µ –Ω–∞—á–∞–ª–∞—Å—å!üéÆ')
		}
		if (userId !== gameState.gameCreator) {
			return context.send('–¢–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å –∏–≥—Ä—ã –º–æ–∂–µ—Ç –µ—ë –Ω–∞—á–∞—Ç—å.')
		}
		if (gameState.players.length < 2) {
			return context.send(
				'–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã. –ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 2 —É—á–∞—Å—Ç–Ω–∏–∫–∞.üë•'
			)
		}

		// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —Å–ø–∏—Å–∞–Ω–∏–µ 80 WCoin —Å –∫–∞–∂–¥–æ–≥–æ –∏–≥—Ä–æ–∫–∞
		prizeFund = 0 // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø—Ä–∏–∑–æ–≤–æ–π —Ñ–æ–Ω–¥ –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º
		for (let playerId of gameState.players) {
			const player = await getUser(playerId)

			if (!player || player.wcoin < 80) {
				return context.send(
					`${await getUserMention(
						playerId
					)}, —É –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ WCoin –¥–ª—è —É—á–∞—Å—Ç–∏—è. –í–∞–º –Ω—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 80 WCoin.`
				)
			}

			// –°–ø–∏—Å—ã–≤–∞–µ–º WCoin
			await updateUserWcoin(playerId, -80)
			prizeFund += 80 // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ø—Ä–∏–∑–æ–≤–æ–π —Ñ–æ–Ω–¥
			context.send(
				`–° ${await getUserMention(
					playerId
				)} —Å–ø–∏—Å–∞–Ω–æ 80 WCoin –∑–∞ —É—á–∞—Å—Ç–∏–µ –≤ –∏–≥—Ä–µ.`
			)
		}

		// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ —á–∏—Å–ª–∞
		gameState.secretNumber =
			Math.floor(
				Math.random() * (gameState.maxRange - gameState.minRange + 1)
			) + gameState.minRange
		console.log(`–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —á–∏—Å–ª–æ: ${gameState.secretNumber}`)
		gameState.isGameActive = true
		gameState.currentPlayer = gameState.players[0] // –ü–µ—Ä–≤—ã–π —Ö–æ–¥ –∑–∞ –ø–µ—Ä–≤—ã–º –∏–≥—Ä–æ–∫–æ–º

		return context.send(
			`–ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å!üò± –£–≥–∞–¥–∞–π—Ç–µ —á–∏—Å–ª–æ –æ—Ç ${gameState.minRange} –¥–æ ${
				gameState.maxRange
			}\n–°–µ–π—á–∞—Å —Ö–æ–¥ ${await getUserMention(
				gameState.currentPlayer
			)}üéÆ\n–ü—Ä–∏–∑–æ–≤–æ–π —Ñ–æ–Ω–¥: ${prizeFund} WCoin.üí∞\n–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: ${
				gameState.players.length
			}üë•\n\n–í–≤–æ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É: /—á–∏—Å–ª–æ [–æ—Ç 0 –¥–æ 300]`
		)
	}

	// –ö–æ–º–∞–Ω–¥–∞ /—á–∏—Å–ª–æ –≤—ã–π—Ç–∏ ‚Äî –ø–æ–∑–≤–æ–ª—è–µ—Ç –≤—ã–π—Ç–∏ –∏–∑ –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä—ã
	if (message === '/—á–∏—Å–ª–æ –≤—ã–π—Ç–∏') {
		if (!gameState.isGameActive) {
			return context.send('–ò–≥—Ä–∞ –µ—â–µ –Ω–µ –Ω–∞—á–∞–ª–∞—Å—å, –≤—ã—Ö–æ–¥ –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω.')
		}

		if (!gameState.players.includes(userId)) {
			return context.send('–í—ã –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ —ç—Ç–æ–π –∏–≥—Ä–µ.')
		}

		// –£–±–∏—Ä–∞–µ–º –∏–≥—Ä–æ–∫–∞ –∏–∑ –∏–≥—Ä—ã
		gameState.players = gameState.players.filter(
			playerId => playerId !== userId
		)

		// –ï—Å–ª–∏ –ø–æ—Å–ª–µ –≤—ã—Ö–æ–¥–∞ –æ—Å—Ç–∞–ª—Å—è —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –∏–≥—Ä–æ–∫, –æ–Ω –≤—ã–∏–≥—Ä—ã–≤–∞–µ—Ç
		if (gameState.players.length === 1) {
			const remainingPlayer = gameState.players[0]
			context.send(
				`üéÆ ${await getUserMention(
					userId
				)} –≤—ã—à–µ–ª –∏–∑ –∏–≥—Ä—ã. –í –∏–≥—Ä–µ –æ—Å—Ç–∞–ª—Å—è —Ç–æ–ª—å–∫–æ ${await getUserMention(
					remainingPlayer
				)}. –û–Ω –ø–æ–ª—É—á–∞–µ—Ç –≤–µ—Å—å –ø—Ä–∏–∑–æ–≤–æ–π —Ñ–æ–Ω–¥ –≤ —Ä–∞–∑–º–µ—Ä–µ ${prizeFund} WCoin!`
			)

			// –ó–∞—á–∏—Å–ª—è–µ–º –ø—Ä–∏–∑–æ–≤–æ–π —Ñ–æ–Ω–¥ –æ—Å—Ç–∞–≤—à–µ–º—É—Å—è –∏–≥—Ä–æ–∫—É
			await updateUserWcoin(remainingPlayer, prizeFund)

			resetGameState() // –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã
			return
		}

		// –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏ –ø–µ—Ä–µ–¥–∞–µ–º —Ö–æ–¥ —Å–ª–µ–¥—É—é—â–µ–º—É –∏–≥—Ä–æ–∫—É
		const currentIndex = gameState.players.indexOf(userId)
		gameState.currentPlayer =
			gameState.players[(currentIndex + 1) % gameState.players.length]
		context.send(
			`üéÆ ${await getUserMention(
				userId
			)} –≤—ã—à–µ–ª –∏–∑ –∏–≥—Ä—ã. –¢–µ–ø–µ—Ä—å —Ö–æ–¥–∏—Ç ${await getUserMention(
				gameState.currentPlayer
			)}.`
		)
	}

	if (message.startsWith('/—á–∏—Å–ª–æ —Ä–µ–ø–æ—Ä—Ç ')) {
		const target = message.split(' ')[2]
		const reportedUserId = await resolveUserId(target)

		if (!reportedUserId) {
			return context.send(
				'–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤–≤–µ–¥–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π ID –∏–ª–∏ —Å—Å—ã–ª–∫–∞.'
			)
		}

		const reporterUserMention = await getUserMention(userId)
		const reportedUserMention = await getUserMention(reportedUserId)

		// –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–ø–æ—Ä—Ç–∞ –≤ –±–µ—Å–µ–¥—É –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤
		await vk.api.messages.send({
			peer_id: 2000000009, // ID –±–µ—Å–µ–¥—ã –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤ (c179)
			message: `@all\n\nüö® –†–µ–ø–æ—Ä—Ç –æ—Ç ${reporterUserMention} –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${reportedUserMention}. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–∏—Ç—É–∞—Ü–∏—é.`,
			random_id: Date.now(), // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è random_id
		})

		// –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ —Ç–æ–º, —á—Ç–æ —Ä–µ–ø–æ—Ä—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω
		return context.send(
			`–í–∞—à —Ä–µ–ø–æ—Ä—Ç –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${reportedUserMention} –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º. –°–ø–∞—Å–∏–±–æ –∑–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ!`
		)
	}

	// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	const status = await getUserStatus(userId)
	const isModeratorOrAdmin =
		status === '–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä' ||
		status === '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä' ||
		allowedIds.includes(userId)
	// –ö–æ–º–∞–Ω–¥–∞ /—á–∏—Å–ª–æ cleargame
	if (message.startsWith('/—á–∏—Å–ª–æ cleargame')) {
		if (!isModeratorOrAdmin) {
			return await context.send(
				`${await getUserMention(
					userId
				)}, üò° –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.`
			)
		}

		if (!gameState.isGameActive) {
			return await context.send('–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.')
		}

		// –í–æ–∑–≤—Ä–∞—â–∞–µ–º WCoin –≤—Å–µ–º –∏–≥—Ä–æ–∫–∞–º –∏–∑ –ø—Ä–∏–∑–æ–≤–æ–≥–æ —Ñ–æ–Ω–¥–∞
		for (const playerId of gameState.players) {
			await updateUserWcoin(playerId, prizeFund / gameState.players.length) // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–∞–≤–Ω—É—é –¥–æ–ª—é
		}

		// –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
		resetGameState()

		return await context.send(
			'–ê–∫—Ç–∏–≤–Ω–∞—è –∏–≥—Ä–∞ –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞, –≤—Å–µ WCoin –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –Ω–∞ –±–∞–ª–∞–Ω—Å –∏–≥—Ä–æ–∫–∞–º.'
		)
	}

	// –ö–æ–º–∞–Ω–¥–∞ /—á–∏—Å–ª–æ –∫–∏–∫ [ID/—É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è]
	else if (message.startsWith('/—á–∏—Å–ª–æ –∫–∏–∫ ')) {
		if (!isModeratorOrAdmin) {
			return await context.send(
				`${await getUserMention(
					userId
				)}, üò° –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.`
			)
		}

		const target = message.split(' ')[2]
		const kickedUserId = await resolveUserId(target) // –ü–æ–ª—É—á–∞–µ–º ID –∏—Å–∫–ª—é—á–∞–µ–º–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

		if (!kickedUserId || !gameState.players.includes(kickedUserId)) {
			return await context.send(
				'–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –æ–Ω –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç –≤ –∏–≥—Ä–µ.'
			)
		}

		// –ò—Å–∫–ª—é—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∏–≥—Ä—ã
		gameState.players = gameState.players.filter(
			player => player !== kickedUserId
		)
		await context.send(
			`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${await getUserMention(kickedUserId)} –±—ã–ª –∏—Å–∫–ª—é—á–µ–Ω –∏–∑ –∏–≥—Ä—ã.`
		)

		// –ï—Å–ª–∏ –≤ –∏–≥—Ä–µ –æ—Å—Ç–∞–ª–∏—Å—å –∏–≥—Ä–æ–∫–∏, —Å–æ–æ–±—â–∞–µ–º –æ —Ö–æ–¥–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞
		if (gameState.players.length > 0) {
			gameState.currentPlayer = gameState.players[0] // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞
			return await context.send(
				`–¢–µ–ø–µ—Ä—å —Ö–æ–¥ ${await getUserMention(gameState.currentPlayer)}.`
			)
		} else {
			return await context.send('–í—Å–µ –∏–≥—Ä–æ–∫–∏ –∏—Å–∫–ª—é—á–µ–Ω—ã –∏–∑ –∏–≥—Ä—ã. –ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.')
		}
	}

	// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —É–≥–∞–¥—ã–≤–∞–Ω–∏—è —á–∏—Å–ª–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä /—á–∏—Å–ª–æ 120
	if (message.startsWith('/—á–∏—Å–ª–æ ')) {
		if (!gameState.isGameActive) {
			return context.send(
				'–ò–≥—Ä–∞ –µ—â–µ –Ω–µ –Ω–∞—á–∞–ª–∞—Å—å. –ù–∞–ø–∏—à–∏—Ç–µ /—á–∏—Å–ª–æ –∏–≥—Ä–∞—Ç—å, —á—Ç–æ–±—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è.üë•'
			)
		}

		if (userId !== gameState.currentPlayer) {
			return context.send(
				`–°–µ–π—á–∞—Å —Ö–æ–¥ ${await getUserMention(gameState.currentPlayer)}üéÆ.`
			)
		}

		// –ü–æ–ª—É—á–∞–µ–º —á–∏—Å–ª–æ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
		const guess = parseInt(message.split(' ')[1], 10)

		if (isNaN(guess)) {
			return context.send('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.')
		}

		// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —á–∏—Å–ª–∞
		if (guess === gameState.secretNumber) {
			context.send(
				`–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!ü•≥ ${await getUserMention(userId)} —É–≥–∞–¥–∞–ª —á–∏—Å–ª–æ ${
					gameState.secretNumber
				}! –ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.üéÆ –ü—Ä–∏–∑–æ–≤–æ–π —Ñ–æ–Ω–¥ ${prizeFund} WCoin –∑–∞—á–∏—Å–ª–µ–Ω –Ω–∞ –≤–∞—à –±–∞–ª–∞–Ω—Åü§©`
			)

			// –ó–∞—á–∏—Å–ª–µ–Ω–∏–µ –ø—Ä–∏–∑–æ–≤–æ–≥–æ —Ñ–æ–Ω–¥–∞ –ø–æ–±–µ–¥–∏—Ç–µ–ª—é
			await updateUserWcoin(userId, prizeFund)

			resetGameState() // –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã
			return
		} else if (guess < gameState.secretNumber) {
			context.send('–ß–∏—Å–ª–æ –±–æ–ª—å—à–µüî∫')
		} else {
			context.send('–ß–∏—Å–ª–æ –º–µ–Ω—å—à–µüîª')
		}

		// –ü–µ—Ä–µ—Ö–æ–¥ —Ö–æ–¥–∞ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –∏–≥—Ä–æ–∫—É
		const currentIndex = gameState.players.indexOf(userId)
		gameState.currentPlayer =
			gameState.players[(currentIndex + 1) % gameState.players.length]
		context.send(
			`–¢–µ–ø–µ—Ä—å —Ö–æ–¥–∏—Ç ${await getUserMention(gameState.currentPlayer)}üéÆ`
		)
	} else if (message.startsWith('/auth')) {
		await handleAuthCommand(context, message);
	} else if (message === '/–Ω–∞—á–∞—Ç—å –ø—É—Ç—å') {
		await context.send({
			message:
				'–ü—Ä–∏–≤–µ—Ç, —è –ê—è–Ω–∞ –£—ç–π–Ω! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è –≤ –Ω–∞—à–µ–º –±–æ—Ç–µ. –î–ª—è –Ω–∞—á–∞–ª–∞, –¥–∞–≤–∞–π —è —Ä–∞—Å—Å–∫–∞–∂—É —Ç–µ–±–µ, —á—Ç–æ –º–æ–∂–Ω–æ –¥–µ–ª–∞—Ç—å. –ù–∞–∂–∏–º–∞–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ –∏ –ø–∏—à–∏ –∫–æ–º–∞–Ω–¥—ã, –∫–æ—Ç–æ—Ä—ã–µ —è —Ç–µ–±–µ —Å–∫–∞–∂—É. –ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å".',
			keyboard: Keyboard.builder()
				.textButton({
					label: '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å',
					payload: { command: 'continue' },
					color: Keyboard.POSITIVE_COLOR,
				})
				.inline(),
		})
	} else if (
		context.messagePayload &&
		context.messagePayload.command === 'continue'
	) {
		await context.send({
			message:
				'–¢—ã –º–æ–∂–µ—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ä–∞–∑–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã. –ù–∞–ø—Ä–∏–º–µ—Ä, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å, –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É "/–ø—Ä–æ—Ñ–∏–ª—å".',
			keyboard: Keyboard.builder()
				.textButton({
					label: '–ß—Ç–æ –¥–∞–ª—å—à–µ?',
					payload: { command: 'what_next' },
					color: Keyboard.POSITIVE_COLOR,
				})
				.textButton({
					label: '–ü—Ä–æ—Ñ–∏–ª—å?',
					payload: { command: 'why_profile' },
					color: Keyboard.DEFAULT_COLOR,
				})
				.inline(),
		})
	} else if (
		context.messagePayload &&
		context.messagePayload.command === 'why_profile'
	) {
		await context.send(
			'–ö–æ–º–∞–Ω–¥–∞ "/–ø—Ä–æ—Ñ–∏–ª—å" –ø–æ–∑–≤–æ–ª—è–µ—Ç —É–∑–Ω–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–≤–æ–µ–º –∞–∫–∫–∞—É–Ω—Ç–µ, —Ç–∞–∫–∏–µ –∫–∞–∫ ID, –ù–∏–∫, WCoin, —Ä–µ–π—Ç–∏–Ω–≥.\n\nüí∏ WCoin —ç—Ç–æ –æ—Å–Ω–æ–≤–Ω–∞—è –≤–∞–ª—é—Ç–∞ –≤ –±–æ—Ç–µ, –∑–∞ –Ω–∏—Ö –≤—ã –ø–æ–∫—É–ø–∞–µ—Ç–µ —Ä–∞–∑–Ω—ã–µ –≤–µ—â–∏, –∫–µ–π—Å—ã, –≥–¥–µ –º–æ–∂–Ω–æ –≤—ã–≤–µ—Å—Ç–∏ –ø—Ä–∏–∑, –Ω–æ –æ–± —ç—Ç–æ–º –ø–æ–∑–∂–µ.\nüíé –ù–∏–∫ –Ω—É–∂–µ–Ω, —á—Ç–æ–±—ã –ª–µ–≥—á–µ –±—ã–ª–æ —É–∑–Ω–∞–≤–∞—Ç—å —Ç–µ–±—è –≤ —á–∞—Ç–µ, –∫—Å—Ç–∞—Ç–∏, –µ–≥–æ –º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å.\nüëë –†–µ–π—Ç–∏–Ω–≥ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç, —Å–∫–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏–π —Ç—ã —É–∂–µ –æ—Ç–ø—Ä–∞–≤–∏–ª –∏ –Ω–∞—Å–∫–æ–ª—å–∫–æ —á–∞—Å—Ç–æ —Ç—ã –∞–∫—Ç–∏–≤–µ–Ω.'
		)
	} else if (
		context.messagePayload &&
		context.messagePayload.command === 'what_next'
	) {
		await context.send('üí∏ –î–∞–≤–∞–π –ø–æ–ø—Ä–æ–±—É–µ–º –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å WCoin.')
		await context.send({
			message:
				'–£ –Ω–∞—Å –µ—Å—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∏–¥–æ–≤ –∑–∞—Ä–∞–±–æ—Ç–∫–∞: —Å–æ–±–∏—Ä–∞—Ç—å –±–æ–Ω—É—Å, –∫–æ–ø–∞—Ç—å –∫–ª–∞–¥, –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–≤–∞—Ç—å –ø—Ä–µ–¥–º–µ—Ç—ã –¥—Ä—É–≥–∏–º –∏–≥—Ä–æ–∫–∞–º –Ω–∞ –º–∞—Ä–∫–µ—Ç–µ –∏–ª–∏ —Å—Ä–∞–∂–∞—Ç—å—Å—è —Å –≤—Ä–∞–≥–∞–º–∏ –≤–º–µ—Å—Ç–µ —Å –∫–ª–∞–Ω–æ–º. –ê –¥–ª—è —Ä–∏—Å—Å–∫–æ–≤—ã—Ö –µ—Å—Ç—å –±–∞—Ä, –ø—Ä—è–º –∫–∞–∫ –Ω–∞ ORP.\n\n–î–∞–≤–∞–π —Å–æ–±–µ—Ä–µ–º –±–æ–Ω—É—Å, –Ω–∞–ø–∏—à–∏ –∫–æ–º–∞–Ω–¥—É "/–±–æ–Ω—É—Å".',
			keyboard: Keyboard.builder()
				.textButton({
					label: '–ß—Ç–æ —è –ø–æ–ª—É—á–∏–ª?',
					payload: { command: 'what_i_got' },
					color: Keyboard.POSITIVE_COLOR,
				})
				.inline(),
		})
	} else if (
		context.messagePayload &&
		context.messagePayload.command === 'what_i_got'
	) {
		await context.send({
			message:
				'–¢—ã –∑–∞—Ä–∞–±–æ—Ç–∞–ª —Å–≤–æ–∏ –ø–µ—Ä–≤—ã–µ WCoin!üòÉ\n–ê –µ—â—ë —Ç—ã –ø–æ–ª—É—á–∏–ª –ø—Ä–µ–¥–º–µ—Ç, –Ω–µ –∑–∞–±—ã–≤–∞–π –ø—Ä–æ –Ω–∏—Ö, –∫–æ–≥–¥–∞ –ø–æ–ª—É—á–∞–µ—à—å. –¢—ã –∏—Ö –≤ –±—É–¥—É—â–µ–º –º–æ–∂–µ—à—å –ø—Ä–æ–¥–∞—Ç—å –∏–≥—Ä–æ–∫–∞–º –∑–∞ WCoin.\n\n–ù–æ —Ç—ã –Ω–∞–≤–µ—Ä–Ω–æ–µ –∏ —Å–∞–º –ø–æ–Ω–∏–º–∞–µ—à—å, —á—Ç–æ —ç—Ç–æ –º–∞–ª–æ, –∞ –¥–∞–≤–∞–π –∫—É–ø–∏–º –ª–æ–ø–∞—Ç—É?\n–ù–∞–ø–∏—à–∏ –∫–æ–º–∞–Ω–¥—É "/–ª–æ–ø–∞—Ç—ã".',
			keyboard: Keyboard.builder()
				.textButton({
					label: '–ù–∞–ø–∏—Å–∞–ª',
					payload: { command: 'write' },
					color: Keyboard.POSITIVE_COLOR,
				})
				.inline(),
		})
	} else if (
		context.messagePayload &&
		context.messagePayload.command === 'write'
	) {
		await context.send({
			message:
				'–°–º–æ—Ç—Ä–∏, —Ü–µ–Ω—ã –∏ –ø–æ–¥—Å–∫–∞–∑–∫–∞ –Ω–∞ –∫–æ–º–∞–Ω–¥—É –µ—Å—Ç—å. –ü–æ–º–Ω–∏—à—å —Å–∫–æ–ª—å–∫–æ —É —Ç–µ–±—è WCoin? –ï—Å–ª–∏ –≤–¥—Ä—É–≥ –∑–∞–±—ã–ª, –Ω–∞–ø–∏—à–∏ "/–ø—Ä–æ—Ñ–∏–ª—å".\n\n–í—ã–±–∏—Ä–∞–π —Ç—É –ª–æ–ø–∞—Ç—É, –Ω–∞ –∫–æ—Ç–æ—Ä—É—é —É —Ç–µ–±—è —Ö–≤–∞—Ç–∞–µ—Ç WCoin –∏–ª–∏ –∫–æ—Ç–æ—Ä—É—é —Ç—ã —Ö–æ—á–µ—à—å, –µ—Å–ª–∏ —à–∏–ø–∫–æ –±–æ–≥–∞—Çüòä\n\n–ê—Ö –¥–∞, –µ—Å–ª–∏ –≤–¥—Ä—É–≥ –Ω–µ –ø–æ–Ω—è–ª –∫–æ–º–∞–Ω–¥—É, —Ç–æ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–∏–º–µ—Ä–Ω–æ —Ç–∞–∫ "/–∫—É–ø–∏—Ç—å –ª–æ–ø–∞—Ç—É –æ–±—ã—á–Ω–∞—è".',
			keyboard: Keyboard.builder()
				.textButton({
					label: '–Ø –∫—É–ø–∏–ª –ª–æ–ø–∞—Ç—É',
					payload: { command: 'buy_shovels' },
					color: Keyboard.POSITIVE_COLOR,
				})
				.inline(),
		})
	} else if (
		context.messagePayload &&
		context.messagePayload.command === 'buy_shovels'
	) {
		await context.send({
			message:
				'–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å —ç—Ç–∞ –ª–æ–ø–∞—Ç–∞ —É —Ç–µ–±—è –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ, –º–æ–∂–µ—à—å –¥–∞–∂–µ —É–±–µ–¥–∏—Ç—å—Å—è "/–ª–æ–ø–∞—Ç—ã"üëå.\n\n–ù—É —á—Ç–æ.. –ø–æ–ø—Ä–æ–±—É–µ–º –æ—Ç–∫—Ä—ã—Ç—å? –£—á—Ç–∏, –±—ã–≤–∞–ª—ã–µ –∏–≥—Ä–æ–∫–∏ –Ω–µ –∑—Ä—è –ø–∏—à—É—Ç –ø—Ä–æ —ç—Ç–∏ –ª–æ–ø–∞—Ç—ãü§î. –í–æ—Ç –Ω–∞–ø—Ä–∏–º–µ—Ä: "–æ–ø—É–∫" –∏–ª–∏ "–ø–æ–ø—É–∫". –°–º–µ—à–Ω–æ, –Ω–µ –ø—Ä–∞–≤–¥–∞ –ª–∏?üòÖ\n\n–î–∞–≤–∞–π –Ω–∞–∫–æ–Ω–µ—Ü –æ—Ç–∫—Ä–æ–µ–º –∏ —É–∑–Ω–∞–µ–º, —á—Ç–æ —Ç–∞–º –Ω–µ —Ç–∞–∫, –ø–æ—Ç–æ–º –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É "–û–ø—É–∫".\n\n–ï—Å–ª–∏ —á—Ç–æ, –∫–æ–º–∞–Ω–¥–∞ "/–∫–æ–ø–∞—Ç—å –∫–ª–∞–¥ –æ–±—ã—á–Ω–∞—è", —ç—Ç–æ –∫ –ø—Ä–∏–º–µ—Ä—É, –µ—Å–ª–∏ —Ç—ã –∫—É–ø–∏–ª –æ–±—ã—á–Ω—É—é –ª–æ–ø–∞—Ç—É.',
			keyboard: Keyboard.builder()
				.textButton({
					label: '–û–ø—É–∫',
					payload: { command: 'opyk' },
					color: Keyboard.POSITIVE_COLOR,
				})
				.inline(),
		})
	} else if (
		context.messagePayload &&
		context.messagePayload.command === 'opyk'
	) {
		await context.send({
			message:
				'–ü–æ–º–Ω–∏—à—å –∑–∞ —Å–∫–æ–ª—å–∫–æ —Ç—ã –ø–æ–∫—É–ø–∞–ª –ª–æ–ø–∞—Ç—É? –ê —Ç–µ–ø–µ—Ä—å —Å–∫–æ–ª—å–∫–æ –ø–æ–ª—É—á–∏–ª —Å –∫–æ–ø–∞–Ω–∏—è –∫–ª–∞–¥–∞. –í–æ—Ç —Ç–µ–±–µ –ø–æ–≤–µ–∑–ª–æ, –µ—Å–ª–∏ —É —Ç–µ–±—è "–û–ø—É–∫", –∑–Ω–∞—á–∏—Ç —Ç—ã –æ—Ç–∫–æ–ø–∞–ª –±–æ–ª—å—à–µ, —á–µ–º –ø–æ–∫—É–ø–∞–ª. –ê –±—ã–≤–∞–µ—Ç "–ü–æ–ø—É–∫", –∫–æ–≥–¥–∞ —Ç—ã –æ—Ç–∫–æ–ø–∞–ª –º–µ–Ω—å—à–µ, —á–µ–º –ø–æ–∫—É–ø–∞–ª. –û—Ç —Å—é–¥–∞ –∏ –ø–æ—è–≤–∏–ª–∏—Å—å —Å–ª–æ–≤–∞ –û–∫—É–ø–∞ –∏ –Ω–µ –ø–æ–≤–µ–∑–ª–æ.\n\n–¢–∞–∫, –¥–æ–ø—É—Å—Ç–∏–º –º—ã —É–∂–µ –Ω–∞—É—á–∏–ª–∏—Å—å –ø–æ–∫—É–ø–∞—Ç—å –ª–æ–ø–∞—Ç—ã –∏ —Å–æ–±–∏—Ä–∞—Ç—å –±–æ–Ω—É—Å. –ù–æ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ –≤–æ–ø—Ä–æ—Å: "–ì–¥–µ –¥–µ–Ω—å–≥–∏ –õ—é–±–æ–≤—Å–∫–∏?", –∑–¥–µ—Å—å –æ–±–µ—â–∞–ª–∏ –∂–µ –∫–∞–∫–∏–µ-—Ç–æ –∫–µ–π—Å—ã, —á–µ-—Ç–æ –æ—Ç–∫—Ä—ã–≤–∞—Ç—å.\n\n–ù–∞–ø–∏—à–∏ –∫–æ–º–∞–Ω–¥—É "/–∫—É–ø–∏—Ç—å –∫–µ–π—Å" –∏ –≤—Å–µ —Ç–µ–±–µ —Ä–∞—Å—Å–∫–∞–∂—Éüòä. –ü–æ—Ç–æ–º –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É "–û–ø–∞ –∫–µ–π—Å–∏–∫–∏".',
			keyboard: Keyboard.builder()
				.textButton({
					label: '–û–ø–∞ –∫–µ–π—Å–∏–∫–∏',
					payload: { command: 'casses' },
					color: Keyboard.POSITIVE_COLOR,
				})
				.inline(),
		})
	} else if (
		context.messagePayload &&
		context.messagePayload.command === 'casses'
	) {
		await context.send({
			message:
				'–ê–≥–∞! –ò–∑ –≤—Å–µ—Ö —ç—Ç–∏—Ö –∫–µ–π—Å–æ–≤, –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –≤–∏—Ä—Ç—ã –∏–ª–∏ –∞–∫—Å–µ—Å—Å—É–∞—Ä—ã, –∞ —Å –∫–µ–π—Å–æ–≤ –ø–æ–¥–æ—Ä–æ–∂–µ –µ—â–µ –∏ –∫–æ—Å—Ç—é–º—ã.\n\n–î–∞–≤–∞–π –ø–æ–ø—Ä–æ–±—É–µ–º –∫—É–ø–∏—Ç—å, –∞ –ø–æ—Ç–æ–º –æ—Ç–∫—Ä—ã—Ç—å –∫–µ–π—Å, –∫–µ–π—Å-–Ω–æ–≤–∏—á–æ–∫ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è. –ù–∞–ø–∏—à–∏ –∫–æ–º–∞–Ω–¥—É "/–∫—É–ø–∏—Ç—å –∫–µ–π—Å –Ω–æ–≤–∏—á–æ–∫".',
			keyboard: Keyboard.builder()
				.textButton({
					label: '–Ø –∫—É–ø–∏–ª –∫–µ–π—Å',
					payload: { command: 'beginner' },
					color: Keyboard.POSITIVE_COLOR,
				})
				.row()
				.textButton({
					label: '–û—Ç–∫—É–¥–∞ —Ç–∞–∫–∞—è —â–µ–¥—Ä–æ—Å—Ç—å?',
					payload: { command: 'what_generosity' },
					color: Keyboard.DEFAULT_COLOR,
				})
				.inline(),
		})
	} else if (
		context.messagePayload &&
		context.messagePayload.command === 'what_generosity'
	) {
		await context.send(
			'–Ø –±—ã —Ç–æ–∂–µ –Ω–µ –ø–æ–≤–µ—Ä–∏–ª–∞üòä, –Ω–æ –Ω–∞ —Å–∞–º–æ–º –¥–µ–ª–µ —Ç–∞–∫ –∏ –µ—Å—Ç—å.\nWaynes —Ö–æ—á–µ—Ç –∫–∞–∫ –º–æ–∂–Ω–æ –±–æ–ª—å—à–µ —Ä–∞—Å–ø–∏–∞—Ä–∏—Ç—å—Å—è, –∞ —ç—Ç–æ –∫–∞–∫ –ª—É—á—à–∏–π —Å–ø–æ—Å–æ–± –ø–æ–¥–Ω—è—Ç—å –∞–∫—Ç–∏–≤. –ö–∞–∫ –≥–æ–≤–æ—Ä–∏–ª –†–æ–±–µ—Ä—Ç: "–û—Ç–¥–∞–π –∫–∞–∫ –º–æ–∂–Ω–æ –±–æ–ª—å—à–µ - –∏ –ø–æ–ª—É—á–∏—à—å –±–æ–ª—å—à–µ".\n\n–ù–∞–º –≤—ã–≥–æ–¥–Ω–µ–µ –≤–∞–º –≤—ã–¥–∞–≤–∞—Ç—å –ø—Ä–∏–∑—ã, —á–µ–º –Ω–∏—á–µ–≥–æ –Ω–µ –¥–∞–≤–∞—Ç—åüòä'
		)
	} else if (
		context.messagePayload &&
		context.messagePayload.command === 'beginner'
	) {
		await context.send({
			message:
				'–ú–æ–ª–æ–¥–µ—Ü! –¢–µ–ø–µ—Ä—å –æ—á–µ–Ω—å –≤–∞–∂–Ω—ã–π –º–æ–º–µ–Ω—Ç, –≥–ª–∞–≤–Ω–æ–µ –Ω–µ –∑–∞–ø—É—Ç–∞—Ç—å—Å—è‚úä.\n\n–°–µ–π—á–∞—Å —Ç–µ–±–µ –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –Ω–∞–ø–∏—Å–∞—Ç—å –∫–æ–º–∞–Ω–¥—É "/–æ—Ç–∫—Ä—ã—Ç—å –∫–µ–π—Å –Ω–æ–≤–∏—á–æ–∫". –¢–µ–±–µ –æ—Ç–ø—Ä–∞–≤—è—Ç—Å—è —Å—Ä–∞–∑—É 2 —Å–æ–æ–±—â–µ–Ω–∏—è, –æ–±—Ä–∞—Ç–∏ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ —Ç–æ, –≥–¥–µ —Ç—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫—Ä—ã–ª –∫–µ–π—Å –Ω–æ–≤–∏—á–æ–∫.',
			keyboard: Keyboard.builder()
				.textButton({
					label: '–ù—É –æ—Ç–∫—Ä—ã–ª',
					payload: { command: 'open_beginner' },
					color: Keyboard.POSITIVE_COLOR,
				})
				.inline(),
		})
	} else if (
		context.messagePayload &&
		context.messagePayload.command === 'open_beginner'
	) {
		await context.send({
			message:
				'–í–∏–¥–∏—à—å, —Ç—ã –æ—Ç–∫—Ä—ã–ª –∫–µ–π—Å –∏ —É —Ç–µ–±—è –≤—ã–ø–∞–ª–æ 15.000$üòÉ.\n\n–ú–∞–ª–æ –ø–æ–¥—É–º–∞–µ—à—å —Ç—ã, –Ω–æ —É–∂–µ –Ω–µ–ø–ª–æ—Ö–æ, —Ç–µ–º–±–æ–ª–µ–µ —Ç—ã –µ–≥–æ –ø–æ–ª—É—á–∏–ª –±–µ—Å–ø–ª–∞—Ç–Ω–æ –∏ –º–æ–∂–µ—à—å –≤—ã–≤–µ—Å—Ç–∏ —É–∂–µ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Åüòâ.\n\n–î–∞–≤–∞–π –ø–æ–ø–æ—Ä–æ–±—É–µ–º –≤—ã–≤–µ—Å—Ç–∏. –£ –Ω–∞—Å –µ—Å—Ç—å –∫–æ–º–∞–Ω–¥–∞ "/–ø–æ–º–æ—â—å", –≥–¥–µ —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –ø–æ–¥—Ä–æ–±–Ω–µ–µ, –∫–∞–∫ –º–æ–∂–Ω–æ –≤—ã–≤–µ—Å—Ç–∏ –ø—Ä–∏–∑.\n–ù–æ –∑–∞—á–µ–º —Ç–µ–±–µ —ç—Ç–æ —Å–µ–π—á–∞—Å —á–∏—Ç–∞—Ç—å, –≤–µ—Ä–Ω–æüòä?\n\n1. –î–ª—è –Ω–∞—á–∞–ª–∞, —Å–∫–æ–ø–∏—Ä—É–π —ç—Ç–æ—Ç —Ç–µ–∫—Å—Ç:\n–í—ã–ø–ª–∞—Ç–∞ —Å –ø–æ—Å—Ç–∞/–∫–µ–π—Å–∞:\n–ù–∏–∫:\n–ë–∞–Ω–∫.—Å—á–µ—Ç:\n–î–æ–∫-–≤–∞:\n\n2. –°–¥–µ–ª–∞–π —Å–∫—Ä–∏–Ω—à–æ—Ç —ç–∫—Ä–∞–Ω–∞, –≥–¥–µ –±—É–¥–µ—Ç –≤–∏–¥–Ω–æ –∫–æ–º–∞–Ω–¥—É "/–æ—Ç–∫—Ä—ã—Ç—å –∫–µ–π—Å –Ω–æ–≤–∏—á–æ–∫" –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –±–æ—Ç–∞, —á—Ç–æ –≤—ã–ø–∞–ª –ø—Ä–∏–∑ 15.000$.\n\n3. –ó–∞—Ç–µ–º —Ç–µ–±–µ –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –∑–∞–π—Ç–∏ –≤ –õ–° –≥—Ä—É–ø–ø—ã - https://vk.com/waynes_family –Ω–æ —Ç—ã —É–∂–µ –∑–¥–µ—Å—å, –ø–æ—ç—Ç–æ–º—É –Ω–∞–ø–∏—à–∏ –Ω–∞–ø—Ä–∏–º–µ—Ä "–ü—Ä–∏–≤–µ—Ç" –∏ —Å–ª–µ–¥—É—é—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç, –∑–∞–ø–æ–ª–Ω–∏ –¥–∞–Ω–Ω—ã–µ.\n4. –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å —Å–∫—Ä–∏–Ω—à–æ—Ç –∏ –ø–µ—Ä–µ—à–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å—é–¥–∞ –∂–µ, –≥–¥–µ –±–æ—Ç –Ω–∞–ø–∏—Å–∞–ª –æ –ø—Ä–∏–∑–µ —Å –∫–µ–π—Å–∞.\n\n–ò –≤—Å–µüòä. –û—Å—Ç–∞–ª–æ—Å—å –∂–¥–∞—Ç—å –æ—Ç–≤–µ—Ç–∞ –æ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞.',
			keyboard: Keyboard.builder()
				.textButton({
					label: '–Ø –≤—Å–µ —Å–¥–µ–ª–∞–ª, —á—Ç–æ –µ—â–µ?',
					payload: { command: 'more' },
					color: Keyboard.POSITIVE_COLOR,
				})
				.row()
				.textButton({
					label: '–ú–æ–∂–Ω–æ –≤–∏–¥–µ–æ-—Ñ–æ—Ä–º–∞—Ç?',
					payload: { command: 'video' },
					color: Keyboard.DEFAULT_COLOR,
				})
				.inline(),
		})
	} else if (
		context.messagePayload &&
		context.messagePayload.command === 'video'
	) {
		await context.send(
			'–ö–æ–Ω–µ—á–Ω–æ! –î–µ—Ä–∂–∏ - https://vk.com/video-199010052_456239063?list=bff676fbfb33815ff9\n\n–°–∞–º–∞ —á–µ—Å—Ç–Ω–æ –ª—é–±–∏—Ç–µ–ª—å —Å–º–æ—Ç—Ä–µ—Ç—å –≤–∏–¥–æ—Å–∏–∫–∏üòä'
		)
	} else if (
		context.messagePayload &&
		context.messagePayload.command === 'more'
	) {
		await context.send({
			message:
				'–ü–æ–∑–¥—Ä–∞–≤–ª—è—é, —Ç—ã –∑–∞–∫–æ–Ω—á–∏–ª –ø—É—Ç—å –Ω–æ–≤–∏—á–∫–∞üéâ! –î–µ—Ä–∂–∏ –ø—Ä–æ–º–æ–∫–æ–¥ "Love_Waynes". –ö—Å—Ç–∞—Ç–∏, –∫–æ–º–∞–Ω–¥–∞ –ø–∏—à–µ—Ç—Å—è "/usepromo [–Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞]", —Ç—ã –≤–µ–¥—å –ø–æ–º–Ω–∏—à—å, —á—Ç–æ –Ω—É–∂–Ω–æ –ø–∏—Å–∞—Ç—å –≤ –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã—Ö —Å–∫–æ–±–∫–∞—Ö?üòä\n\n–ï—Å–ª–∏ —á—Ç–æ, –º–æ–∂–µ—à—å –ø–æ–∑–≤–∞—Ç—å –º–µ–Ω—è —Å–Ω–æ–≤–∞, –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ê—è–Ω–∞ –ø—Ä–∏–¥–∏" –∏ —è —Ç–µ–±–µ —Ä–∞—Å—Å–∫–∞–∂—É –ø—Ä–æ –∫–ª–∞–Ω—ã, –º–∞—Ä–∫–µ—Ç—ã –∏ –º–Ω–æ–≥–æ-–º–Ω–æ–≥–æ —á–µ–≥–æ.\n\n–î–æ –≤—Å—Ç—Ä–µ—á–∏ –ª—é–±–∏–º—á–∏–∫ü§≠',
			keyboard: Keyboard.builder()
				.textButton({
					label: '–ê—è–Ω–∞ –ø—Ä–∏–¥–∏',
					payload: { command: 'ayna' },
					color: Keyboard.POSITIVE_COLOR,
				})
				.inline(),
		})
	} else if (
		context.messagePayload &&
		context.messagePayload.command === 'ayna'
	) {
		await context.send({
			message:
				'–Ø —Ç—É—Ç! –Ø —Ä–∞–¥–∞, —á—Ç–æ —Ç—ã —Å–Ω–æ–≤–∞ –∫–æ –º–Ω–µ –æ–±—Ä–∞—Ç–∏–ª—Å—èü§≠\n\n–¢–∞–∫ —Å —á–µ–º —Ç–µ–±–µ –ø–æ–º–æ—á—å?',
			keyboard: Keyboard.builder()
				.textButton({
					label: '–ß—Ç–æ –¥–µ–ª–∞—Ç—å, –µ—Å–ª–∏ —è –∑–∞–±—ã–ª –∫–æ–º–∞–Ω–¥—É?',
					payload: { command: 'help_command' },
					color: Keyboard.POSITIVE_COLOR,
				})
				.row()
				.textButton({
					label: '–ß—Ç–æ –∑–∞ –º–∞—Ä–∫–µ—Ç?',
					payload: { command: 'help_market' },
					color: Keyboard.POSITIVE_COLOR,
				})
				.row()
				.textButton({
					label: '–ê —á—Ç–æ –Ω–∞—Å—á–µ—Ç –∫–ª–∞–Ω–æ–≤?',
					payload: { command: 'help_clan' },
					color: Keyboard.POSITIVE_COLOR,
				})
				.row()
				.textButton({
					label: '–ö–æ–º—É –¥–æ–≤–µ—Ä—è—Ç—å –∏ –∫–∞–∫–∏–µ –º–µ—Ä—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏?',
					payload: { command: 'help_info' },
					color: Keyboard.POSITIVE_COLOR,
				})
				.inline(),
		})
	} else if (
		context.messagePayload &&
		context.messagePayload.command === 'help_command'
	) {
		await context.send(
			'–î–ª—è —ç—Ç–æ–≥–æ –µ—Å—Ç—å –∫–æ–º–∞–Ω–¥–∞ "/–∫–æ–º–∞–Ω–¥—ã".\n–¢–∞–º –µ—Å—Ç—å –≤—Å—è –∏–Ω—Ñ–∞, –≥–ª–∞–≤–Ω–æ–µ –Ω–µ –∑–∞–±—ã–≤–∞–π –ø—Ä–æ "/"üòä'
		)
	} else if (
		context.messagePayload &&
		context.messagePayload.command === 'help_market'
	) {
		await context.send(
			'–†–µ—à–∏–ª —Å—Ç–∞—Ç—å –ø—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª–µ–ºüòè? –Ø –ª—é–±–ª—é —Ç–∞–∫–∏—Ö.\n\n–°–º–æ—Ç—Ä–∏ —É —Ç–µ–±—è –µ—Å—Ç—å –∫–æ–º–∞–Ω–¥–∞ "/wmarkets". –ö–æ–≥–¥–∞ —Ç—ã –µ—ë –ø–∏—à–µ—à—å, —É —Ç–µ–±—è –≤—ã—Ö–æ–¥–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –∫–æ–º–∞–Ω–¥–∞–º. –ê –ø–æ–º–Ω–∏—à—å —Ç–µ —Å–∞–º—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã–ø–∞–¥–∞—é—Ç? –≠—Ç–∏ –ø—Ä–µ–¥–º–µ—Ç—ã —Ç—ã –º–æ–∂–µ—à—å —Ç–∞–º –ø—Ä–æ–¥–∞—Ç—å –∫–ª–∞–Ω–æ–≤–æ–¥–∞–º.\n–ö–æ–º–∞–Ω–¥–∞ "/–ø—Ä–µ–¥–º–µ—Ç—ã" –ø–æ–º–æ–∂–µ—Ç —É–∑–Ω–∞—Ç—å, —Å–∫–æ–ª—å–∫–æ —É —Ç–µ–±—è —Å–µ–π—á–∞—Å. –£—á—Ç–∏, –ø—Ä–∏ –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–∏–∏ –∏ —Å–Ω—è—Ç–∏–∏ –ø—Ä–µ–¥–º–µ—Ç–∞, –∫–∞–∫ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–µ–¥–º–µ—Ç, —Ç–∞–∫ –∏ –ø–∏—à–∏. –ù–∞–ø—Ä–∏–º–µ—Ä –ó–µ–ª—å–µ –æ–≥–Ω—è, –∞ –Ω–µ –∑–µ–ª—å–µ –æ–≥–Ω—è.'
		)
	} else if (
		context.messagePayload &&
		context.messagePayload.command === 'help_clan'
	) {
		await context.send(
			'–†–µ—à–∏–ª –ø–æ—É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –±–∏—Ç–≤–µ —Å –≤—Ä–∞–≥–∞–º–∏ –≤–º–µ—Å—Ç–µ —Å –∫–ª–∞–Ω–æ–≤–æ–¥–∞–º–∏? –ê —Ç—ã —Å–º–µ–ª—ã–π –ø–∞—Ä–µ–Ω—åüòä.\n\n–ö–æ–º–∞–Ω–¥–∞ "/wclan" –ø–æ–∫–∞–∂–µ—Ç —Ç–µ–±–µ –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã —Å –∫–ª–∞–Ω–∞–º–∏. –¢—ã –º–æ–∂–µ—à—å —Å–æ–∑–¥–∞—Ç—å —Å–≤–æ–π –∫–ª–∞–Ω, –æ–Ω —Å—Ç–æ–∏—Ç 5000 WCoin, –¥–æ—Ä–æ–≥–æ–≤–∞—Ç–æ –¥–∞, –ª–∏–±–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∫–æ–º—É-–Ω–∏–±—É–¥—å.\n–¢–µ–±–µ –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –ø–æ–º–æ–≥–∞—Ç—å —Å–æ–∑–¥–∞—Ç–µ–ª—é –¥–æ–±—ã–≤–∞—Ç—å –ø—Ä–µ–¥–º–µ—Ç—ã, –ø–æ—Ç–æ–º—É —á—Ç–æ –±–µ–∑ –Ω–∏—Ö —É –≤–∞—Å —à–∞–Ω—Å–æ–≤ –ø—Ä–æ—Ç–∏–≤ –≤—Ä–∞–≥–æ–≤ –Ω–µ—Ç!\n–ö–æ–º–∞–Ω–¥–∞ "/wclan –≤—Ä–∞–≥–∏", –ø–æ–¥—Å–∫–∞–∂–µ—Ç, –∫–∞–∫–∏–µ –µ—Å—Ç—å —Å–ª–∞–±—ã–µ –º–µ—Å—Ç–∞ —É –≤—Ä–∞–≥–æ–≤. –ö—Å—Ç–∞—Ç–∏ —É–¥–∞—Ä—è—Ç—å –Ω–∞–¥–æ –ø—Ä–µ–¥–º–µ—Ç–æ–º, –∞ –æ–±—ã—á–Ω—ã–π —É–¥–∞—Ä –±—É–¥–µ—Ç –Ω–∞–Ω–æ—Å–∏—Ç—å —Ç–æ–ª—å–∫–æ 30—É—Ä–æ–Ω–∞, –∞ –≤—Ä–∞–≥ –Ω–∞–Ω–æ—Å–∏—Ç –æ—Ç 15 –¥–æ 50 —É—Ä–æ–Ω–∞.'
		)
	} else if (
		context.messagePayload &&
		context.messagePayload.command === 'help_info'
	) {
		await context.send(
			'–Ø —Ä–∞–¥–∞, —á—Ç–æ —Ç—ã —Ä–µ—à–∏–ª —É—Ç–æ—á–Ω–∏—Ç—å —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å.\n\n–ù–∞—à –±–ª–æ–≥ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏: https://vk.com/waynes_development\n–ó–¥–µ—Å—å —Ç—ã —É–∑–Ω–∞–µ—à—å –æ –Ω–æ–≤—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è—Ö –∏ –Ω–æ–≤—ã—Ö –ø—Ä–æ–º–æ–∫–æ–¥–∞—Ö.\n\n–ù–∞—à–∞ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–∞—è –≥—Ä—É–ø–ø–∞: https://vk.com/waynes_family\n–ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –ø—Ä–µ–¥–ª–∞–≥–∞—Ç—å —É–ª—É—á—à–µ–Ω–∏—è, –≥–æ–≤–æ—Ä–∏—Ç—å –æ –±–∞–≥–∞—Ö, –Ω–∞—Ä—É—à–µ–Ω–∏—è—Ö –∏ –≤—ã–≤–æ–¥–∏—Ç—å –ø—Ä–∏–∑—ã.\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–º–Ω–∏. –ú—ã –Ω–µ –ø—Ä–æ—Å–∏–º –ø–∞—Ä–æ–ª–∏ –∏ –Ω–µ –ø—Ä–æ–∫–∞—á–∏–≤–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç—ã. –ú—ã –Ω–µ –ø–∏—à–µ–º —Å–∞–º–∏ (–∏—Å–∫–ª. –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–∞—è –≥—Ä—É–ø–ø–∞, —Å–º–æ—Ç—Ä–∏ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–µ–µ –Ω–∞ —Å—Å—ã–ª–∫—É).'
		)
	}

	if (message === '–Ω–∞—á–∞—Ç—å' || message === '–ù–∞—á–∞—Ç—å') {
        // –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è —Å –∫–Ω–æ–ø–∫–∞–º–∏
        await context.send({
					message:
						'Hello! –ü—Ä–∏–≤–µ—Ç! üëã\n\n–í–ø–µ—Ä–≤—ã–µ –∑–¥–µ—Å—å –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å Telegram Premium, –Ø–Ω–¥–µ–∫—Å –ü–ª—é—Å –∏ –¥—Ä. –ø–æ–¥–ø–∏—Å–∫–∏ –∑–∞ WCoin! üéÅ\n\nüìñ –ù–∞—à –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –∫–∞–Ω–∞–ª: https://t.me/waynes_premium\n\nüí¨ –ù–∞—à —á–∞—Ç TG: https://t.me/+THCVJSKfbjY2MTgy\n\nüí¨ –ù–∞—à —á–∞—Ç VK: https://vk.me/join//8bh0EmFeJ997CsQ/GUCRqER9d2aagtdxh0=\n\n',
					keyboard: Keyboard.builder()
						.textButton({
							label: '–û —Å–µ—Ä–≤–∏—Å–µ WAYNES',
							payload: { command: 'about_waynes' },
							color: Keyboard.SECONDARY_COLOR,
						})
						.row()
						.textButton({
							label: '–ß—Ç–æ —Ç–∞–∫–æ–µ WCoin?',
							payload: { command: 'about_wcoin' },
							color: Keyboard.SECONDARY_COLOR,
						})
						.row()
						.textButton({
							label: '–ú–µ–Ω—è –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä—É—é—Ç?',
							payload: { command: 'block_info' },
							color: Keyboard.SECONDARY_COLOR,
						})
						.row()
						.textButton({
							label: '–ö–∞–∫ –ø–æ–ª—É—á–∞—Ç—å –ø—Ä–∏–∑—ã?',
							payload: { command: 'get_prizes' },
							color: Keyboard.SECONDARY_COLOR,
						})
						.row()
						.textButton({
							label: '–ü–æ–∑–≤–∞—Ç—å –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞',
							payload: { command: 'call_operator' },
							color: Keyboard.POSITIVE_COLOR,
						})
						.inline(),
				})
    } else if (context.messagePayload) {
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫
        switch (context.messagePayload.command) {
					case 'about_waynes':
						await context.send({
							message:
								'‚≠ê ¬´WAYNES¬ª ‚Äî –ø—Ä–æ–µ–∫—Ç, –∫–æ—Ç–æ—Ä—ã–π —Ä–∞–∑–≤–∏–≤–∞–µ—Ç—Å—è –≤ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è—Ö.\n\nüíö –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å Telegram Premium, –Ø–Ω–¥–µ–∫—Å –ü–ª—é—Å –∏ –¥—Ä. –ø–æ–¥–ø–∏—Å–∫–∏ –∑–∞ WCoin!\n\nüí≠ –î–ª—è –∏–≥—Ä–æ–∫–æ–≤ ONLINE RP –º–æ–∂–Ω–æ –±–µ—Å–ø–ª–∞—Ç–Ω–æ –æ–±–º–µ–Ω–∏–≤–∞—Ç—å WCoin –Ω–∞ –ø—Ä–∏–∑—ã —Å –∫–µ–π—Å–æ–≤ –∏ –±–æ–∫—Å–æ–≤.\n\nüóØ–ü—Ä–æ—Å–º–æ—Ç—Ä –≤–∏–¥–µ–æ –±–µ–∑ –æ–±—Ö–æ–¥–æ–≤ –∏ —Ä–∞–∑–≤–∏—Ç–∏–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π.\n\n–ù–∞—à–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: https://t.me/the_waynes_bot?start=950607972',
							keyboard: getInlineKeyboard(),
						})
						break
					case 'about_wcoin':
						await context.send({
							message:
								'‚≠ê WCoin ‚Äî —ç—Ç–æ –≤–∞–ª—é—Ç–∞ –≤ –Ω–∞—à–µ–º –±–æ—Ç–µ –∏–ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏. –¢—ã –º–æ–∂–µ—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –µ—ë –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –∫–µ–π—Å–æ–≤, –±–æ–∫—Å–æ–≤, –ø–ª–∞—Ç–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫.\n\nüíö –î–µ—Ä–∂–∞—Ç–µ–ª–∏ WCoin –±—É–¥—É—Ç —Ü–µ–Ω–∏—Ç—å—Å—è —Å—Ä–µ–¥–∏ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π. –ú—ã –ø–æ—Å—Ç–æ—è–Ω–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤—ã–≤–∞–µ–º –Ω–æ–≤—ã–µ –∏–¥–µ–∏, —á—Ç–æ–±—ã WCoin –±—ã–ª —Ü–µ–Ω–Ω–µ–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –¥–Ω—è.\n\n‚ù§ –ò–Ω–≤–µ—Å—Ç–∏—Ä—É—è –≤ –Ω–∞—Å, –≤—ã –ø–æ–º–æ–≥–∞–µ—Ç–µ —Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤–æ–≤–∞—Ç—å –Ω–∞—à —Å–µ—Ä–≤–∏—Å –∏ –≤–∞—à–∏ WCoin!',
							keyboard: getInlineKeyboard(),
						})
						break
					case 'block_info':
						await context.send({
							message:
								'–ù–µ—Ç ‚ùå\n\n–≠—Ç–æ –∞–∫—Ü–∏—è —Å–µ–º—å–∏ ¬´Waynes Family¬ª. –ú—ã –ù–ï –ø—Ä–æ–¥–∞–µ–º –∏–≥—Ä–æ–≤—É—é –≤–∞–ª—é—Ç—É, –∞ —Ä–∞–∑—ã–≥—Ä—ã–≤–∞–µ–º –∫–∞–∫ –≤ –æ–±—ã—á–Ω–æ–º –∫–æ–Ω–∫—É—Ä—Å–µ, –∏—Å–ø–æ–ª—å–∑—É—è –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞ –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø–∏–∞—Ä–∞.\n\n‚ùó –ó–∞–ø–æ–º–Ω–∏—Ç–µ:\n–ú—ã –Ω–µ –ø—Ä–æ–∫–∞—á–∏–≤–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç—ã\n–ù–µ –ø—Ä–æ—Å–∏–º –ø–∞—Ä–æ–ª–∏ –æ—Ç –∞–∫–∫–∞—É–Ω—Ç–æ–≤\n–ù–µ –ø—Ä–æ—Å–∏–º –∑–∞–ø–ª–∞—Ç–∏—Ç—å –∑–∞ —É—á–∞—Å—Ç–∏–µ –≤ –∞–∫—Ü–∏–∏ ‚Äî –£–ß–ê–°–¢–ò–ï –ë–ï–°–ü–õ–ê–¢–ù–û–ï\n–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–≥—Ä–∞–¥ ‚Äî –ë–ï–°–ü–õ–ê–¢–ù–û–ï',
							keyboard: getInlineKeyboard(),
						})
						break
					case 'get_prizes':
						await context.send({
							message:
								'–ü—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –∫–µ–π—Å–∞ "/–æ—Ç–∫—Ä—ã—Ç—å –∫–µ–π—Å –Ω–∞–∑–≤–∞–Ω–∏–µ" –≤—ã –¥–æ–ª–∂–Ω—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç–≤–µ—Ç –æ—Ç –±–æ—Ç–∞, —á—Ç–æ –≤–∞–º –≤—ã–ø–∞–ª–æ –∏ –Ω–∞–ø–∏—Å–∞—Ç—å —Å–≤–æ–π –±–∞–Ω–∫.—Å—á–µ—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–∏–∑–∞. –î–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø—Ä–æ–π–¥–∏—Ç–µ –æ–±—É—á–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–æ–π\n/–Ω–∞—á–∞—Ç—å –ø—É—Ç—å\n\n–£ –Ω–∞—Å —Ç–∞–∫–∂–µ –µ—Å—Ç—å —Å–≤–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ, –≥–¥–µ –Ω–∞–º–Ω–æ–≥–æ —É–¥–æ–±–Ω–µ–µ –ø–æ–ª—É—á–∞—Ç—å –ø—Ä–∏–∑—ã ‚Äî [https://vk.com/wall-199010052_996|–°–º–æ—Ç—Ä–∏—Ç–µ –ø—Ä–∏–º–µ—Ä]',
							keyboard: getInlineKeyboard(),
						})
						break
					case 'call_operator':
						if (context.isChat) {
							await context.send(
								'üë®‚Äçüíª –í—ã–∑–≤–∞—Ç—å –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö –±–æ—Ç–∞.'
							)
						} else {
							await context.send(
								'üë®‚Äçüíª –û–ø–µ—Ä–∞—Ç–æ—Ä —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏.\n\n‚ùî –û–ø–∏—à–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–µ–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É –∏–ª–∏ –≤–æ–ø—Ä–æ—Å, —á—Ç–æ–±—ã –æ–ø–µ—Ä–∞—Ç–æ—Ä —Å–º–æ–≥ –≤–∞–º –ø–æ–º–æ—á—å.'
							)
						}
				}
    }
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
function getInlineKeyboard() {
    return Keyboard.builder()
			.textButton({
				label: '–û —Å–µ—Ä–≤–∏—Å–µ WAYNES',
				payload: { command: 'about_waynes' },
				color: Keyboard.SECONDARY_COLOR,
			})
			.row()
			.textButton({
				label: '–ß—Ç–æ —Ç–∞–∫–æ–µ WCoin?',
				payload: { command: 'about_wcoin' },
				color: Keyboard.SECONDARY_COLOR,
			})
			.row()
			.textButton({
				label: '–ú–µ–Ω—è –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä—É—é—Ç?',
				payload: { command: 'block_info' },
				color: Keyboard.SECONDARY_COLOR,
			})
			.row()
			.textButton({
				label: '–ö–∞–∫ –ø–æ–ª—É—á–∞—Ç—å –ø—Ä–∏–∑—ã?',
				payload: { command: 'get_prizes' },
				color: Keyboard.SECONDARY_COLOR,
			})
			.row()
			.textButton({
				label: '–ü–æ–∑–≤–∞—Ç—å –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞',
				payload: { command: 'call_operator' },
				color: Keyboard.POSITIVE_COLOR,
			})
			.inline()
}

// –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–µ–π—Ç–∏–Ω–≥–∞
async function updateUserRating(vk_id, ratingIncrement) {
	const user = await getUser(vk_id)

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
	if (!user) {
		console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å vk_id ${vk_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.`)
		return // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, –Ω–µ –æ–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–π—Ç–∏–Ω–≥
	}

	return new Promise((resolve, reject) => {
		db.run(
			'UPDATE users SET rating = rating + ? WHERE vk_id = ?',
			[ratingIncrement, vk_id],
			function (err) {
				if (err) {
					reject(err)
				} else {
					console.log(`–û–±–Ω–æ–≤–ª–µ–Ω —Ä–µ–π—Ç–∏–Ω–≥ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${vk_id}`)
					resolve()
				}
			}
		)
	})
}

async function getTopUsersByWcoin(limit) {
	const excludedIds = [252840773, 422202607] // IDs, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –∏—Å–∫–ª—é—á–∏—Ç—å
	const placeholders = excludedIds.map(() => '?').join(', ') // –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–æ–∫—É "?, ?" –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
	return new Promise((resolve, reject) => {
		db.all(
			`SELECT vk_id, nickname, wcoin FROM users WHERE vk_id NOT IN (${placeholders}) ORDER BY wcoin DESC LIMIT ?`,
			[...excludedIds, limit],
			(err, rows) => {
				if (err) reject(err)
				else resolve(rows)
			}
		)
	})
}

async function getTopUsersByRating(limit) {
	return new Promise((resolve, reject) => {
		db.all(
			'SELECT * FROM users ORDER BY rating DESC LIMIT ?',
			[limit],
			(err, rows) => {
				if (err) {
					reject(err)
				} else {
					resolve(rows)
				}
			}
		)
	})
}

vk.updates.start().catch(console.error)

setInterval(async () => {
	const users = await getAllUsers()
	const currentTimestamp = await getTimestampNow()

	for (const user of users) {
		if (currentTimestamp >= user.last_bonus_timestamp + oneHour) {
			// –ï—Å–ª–∏ –ø—Ä–æ—à–µ–ª —á–∞—Å —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –±–æ–Ω—É—Å–∞, –æ–±–Ω—É–ª—è–µ–º last_bonus_timestamp
			await updateLastBonusTimestamp(user.vk_id, 0)
		}
	}
}, 60000) // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É

console.log('–°–∫—Ä–∏–ø—Ç –∑–∞–ø—É—â–µ–Ω 1.2.0')
