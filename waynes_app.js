const { VK } = require('vk-io')
const sqlite3 = require('sqlite3').verbose()
const { setInterval } = require('timers')

const vk = new VK({
	token:
		'vk1.a.4TJ20-POEDuJ4UCKXMDrTl6KUvfo80jMwVuCTiv9Um-ZafFxYUfQgVwNfbzuPM8TyE6mfviaJRBvokiD_XI06euMurtz5q1X_Om8PFRgUWesicyiDV9r4KRi-ps853kmtSbEvlHoMupBPbgWrlJQd1qtM7MIvk0aYDhfIIpNzib5_-eNLt76QxQ3vOg2DGCC94DSfRLMQ8OriuAlzr5y1w',
})

const db = new sqlite3.Database('users.db')

const oneHour = 3600 // 1 —á–∞—Å –≤ —Å–µ–∫—É–Ω–¥–∞—Ö

db.serialize(() => {
	db.run(
		'CREATE TABLE IF NOT EXISTS users (id INTEGER PRIMARY KEY, vk_id INTEGER, nickname TEXT, status TEXT, wcoin INTEGER, rating INTEGER DEFAULT 0, last_bonus_timestamp INTEGER DEFAULT 0)'
	)

	db.run(
		'CREATE TABLE IF NOT EXISTS promocodes (code TEXT PRIMARY KEY, wcoin INTEGER)'
	)

	db.run(
		'CREATE TABLE IF NOT EXISTS used_promocodes (user_id INTEGER, code TEXT, PRIMARY KEY (user_id, code))'
	)

	db.run(
		'CREATE TABLE IF NOT EXISTS cases (id INTEGER PRIMARY KEY, vk_id INTEGER, common INTEGER DEFAULT 0, silver INTEGER DEFAULT 0, gold INTEGER DEFAULT 0, platinum INTEGER DEFAULT 0, wayne INTEGER DEFAULT 0)'
	)

	db.run(`CREATE TABLE IF NOT EXISTS rooms (
        id INTEGER PRIMARY KEY,
        room_name TEXT,
        creator_id INTEGER,
        wcoin_amount INTEGER,
        player1_id INTEGER,
        player2_id INTEGER,
        status TEXT DEFAULT 'open'
    )`)
})

const caseRewards = {
	common: {
		wcoin: [60, 90, 100],
		items: [
			'40.000$',
			'50.000$',
			'60.000$',
			'–ì–∏—Ç–∞—Ä–∞ –Ω–∞ —Å–ø–∏–Ω—É',
			'–ë–∞–Ω–∞–Ω–∫–∞ "Supreme"',
		],
	},
	silver: {
		wcoin: [110, 140, 170],
		items: [
			'60.000$',
			'80.000$',
			'110.000$',
			'–©–µ–ª–∫—É–Ω—á–∏–∫ –Ω–∞ —Å–ø–∏–Ω—É',
			'–ö—Ä–µ—Å—Ç –Ω–∞ —Å–ø–∏–Ω—É',
		],
	},
	gold: {
		wcoin: [180, 220, 260, 300],
		items: [
			'110.000$',
			'130.000$',
			'150.000$',
			'–ú–∏—à–∫–∞ –Ω–∞ —Å–ø–∏–Ω—É',
			'–ö–æ–Ω—Ñ–µ—Ç–∞ –Ω–∞ —Å–ø–∏–Ω—É',
			'–ü–æ–¥–∞—Ä–æ–∫ –Ω–∞ —Å–ø–∏–Ω—É',
		],
	},
	platinum: {
		wcoin: [340, 390, 430],
		items: [
			'200.000$',
			'300.000$',
			'400.000$',
			'–§—Ä–µ–¥–¥–∏',
			'–ê–π—Å–º–µ–Ω',
			'–ê—Ä–∞–±—Å–∫–∏–π –®–µ–π—Ö',
			'–ë—É—Å—Ç–µ—Ä',
		],
	},
	wayne: {
		wcoin: [490, 550, 1000],
		items: ['400.000$', '500.000$', '680.000$', '–î—Ä–µ–π–∫', '–õ–∏—Ç–≤–∏–Ω', '–ò–ª–æ–Ω –ú–∞—Å–∫'],
	},
}

const caseTypes = {
	–æ–±—ã—á–Ω—ã–π: 'common',
	—Å–µ—Ä–µ–±—Ä—è–Ω—ã–π: 'silver',
	–∑–æ–ª–æ—Ç–æ–π: 'gold',
	–ø–ª–∞—Ç–∏–Ω–æ–≤—ã–π: 'platinum',
	wayne: 'wayne',
}

function getRandomReward(caseType) {
	const rewards = caseRewards[caseType]
	const allRewards = rewards.wcoin.concat(rewards.items)
	const randomIndex = Math.floor(Math.random() * allRewards.length)
	const reward = allRewards[randomIndex]
	console.log(`–°–ª—É—á–∞–π–Ω–æ–µ –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ: ${reward}`)
	return reward
}

// –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ WCoin
async function updateUserWcoin(vkId, delta) {
    return new Promise((resolve, reject) => {
        db.run(
            `UPDATE users SET wcoin = wcoin + ? WHERE vk_id = ?`,
            [delta, vkId],
            function(err) {
                if (err) {
                    reject(err);
                } else {
                    console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${vkId} –ø–æ–ª—É—á–∏–ª –∏–∑–º–µ–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ WCoin –Ω–∞ ${delta}.`);
                    resolve();
                }
            }
        );
    });
}

async function resolveUserId(target) {
	if (target.startsWith('@')) {
		const screenName = target.slice(1)
		try {
			const response = await vk.api.users.get({ user_ids: screenName })
			if (response.length > 0) {
				return response[0].id
			}
		} catch (error) {
			console.error('Error resolving user ID by @mention:', error)
		}
	} else if (!isNaN(target)) {
		return parseInt(target, 10)
	} else if (target.startsWith('https://vk.com/')) {
		const screenName = target.slice(15) // remove "https://vk.com/"
		try {
			const response = await vk.api.utils.resolveScreenName({
				screen_name: screenName,
			})
			if (response.type === 'user') {
				return response.object_id
			}
		} catch (error) {
			console.error('Error resolving user ID by profile link:', error)
		}
	} else {
		try {
			const response = await vk.api.utils.resolveScreenName({
				screen_name: target,
			})
			if (response.type === 'user') {
				return response.object_id
			}
		} catch (error) {
			console.error('Error resolving user ID by profile name:', error)
		}
	}
	return null
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ handle –≤—ã–¥–∞—á–∏ WCoin
async function handleGrantWcoin(context, target, wcoinAmount) {
	const wcoin = parseInt(wcoinAmount, 10)
	const userId = context.senderId

	if (isNaN(wcoin) || !target) {
		await context.send(
			`${await getUserMention(
				userId
			)}, ‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /–≤—ã–¥–∞—Ç—å [ID/@—Å—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å(–∑–∞—Ç–µ–º "@" —É–±–µ—Ä–∏—Ç–µ)] [—Å—É–º–º–∞]`
		)
		return
	}

	const targetUserId = await resolveUserId(target)
	if (!targetUserId) {
		await context.send(
			`${await getUserMention(userId)}, üóø –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.`
		)
		return
	}

	const targetUser = await getUser(targetUserId)
	if (targetUser) {
		await updateUserWcoin(targetUser.vk_id, wcoin)
		const updatedUser = await getUser(targetUser.vk_id)
		await context.send(
			`${await getUserMention(userId)}, üí∏ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${
				targetUser.nickname
			} –¥–æ–±–∞–≤–ª–µ–Ω–æ ${wcoin} WCoin. –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: ${updatedUser.wcoin} WCoin.`
		)
	} else {
		await context.send(
			`${await getUserMention(userId)}, üóø –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.`
		)
	}
}

async function addUser(vk_id, nickname, status, wcoin) {
	return new Promise((resolve, reject) => {
		const stmt = db.prepare(
			'INSERT INTO users (vk_id, nickname, status, wcoin) VALUES (?, ?, ?, ?)'
		)
		stmt.run(vk_id, nickname, status, wcoin, function (err) {
			if (err) {
				reject(err)
			} else {
				console.log(`–î–æ–±–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${vk_id} —Å WCoin: ${wcoin}`)
				resolve()
			}
		})
		stmt.finalize()
	})
}

async function updateUserNickname(vk_id, newNickname) {
	return new Promise((resolve, reject) => {
		const stmt = db.prepare('UPDATE users SET nickname = ? WHERE vk_id = ?')
		stmt.run(newNickname, vk_id, function (err) {
			if (err) {
				reject(err)
			} else {
				console.log(`–ù–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${vk_id} –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ ${newNickname}`)
				resolve()
			}
		})
		stmt.finalize()
	})
}

async function getUser(vk_id) {
	return new Promise((resolve, reject) => {
		db.get('SELECT * FROM users WHERE vk_id = ?', [vk_id], (err, row) => {
			if (err) {
				reject(err)
			} else {
				resolve(row)
			}
		})
	})
}

async function addPromocode(code, wcoin) {
	return new Promise((resolve, reject) => {
		const stmt = db.prepare(
			'INSERT INTO promocodes (code, wcoin) VALUES (?, ?)'
		)
		stmt.run(code, wcoin, function (err) {
			if (err) {
				reject(err)
			} else {
				console.log(`–î–æ–±–∞–≤–ª–µ–Ω –ø—Ä–æ–º–æ–∫–æ–¥ ${code} —Å WCoin: ${wcoin}`)
				resolve()
			}
		})
		stmt.finalize()
	})
}

async function getPromocode(code) {
	return new Promise((resolve, reject) => {
		db.get('SELECT * FROM promocodes WHERE code = ?', [code], (err, row) => {
			if (err) {
				reject(err)
			} else {
				resolve(row)
			}
		})
	})
}

async function deletePromocode(code) {
	return new Promise((resolve, reject) => {
		const stmt = db.prepare('DELETE FROM promocodes WHERE code = ?')
		stmt.run(code, function (err) {
			if (err) {
				reject(err)
			} else {
				console.log(`–£–¥–∞–ª–µ–Ω –ø—Ä–æ–º–æ–∫–æ–¥ ${code}`)
				resolve()
			}
		})
		stmt.finalize()
	})
}

async function hasUsedPromocode(user_id, code) {
	return new Promise((resolve, reject) => {
		db.get(
			'SELECT 1 FROM used_promocodes WHERE user_id = ? AND code = ?',
			[user_id, code],
			(err, row) => {
				if (err) {
					reject(err)
				} else {
					resolve(!!row)
				}
			}
		)
	})
}

async function markPromocodeAsUsed(user_id, code) {
	return new Promise((resolve, reject) => {
		const stmt = db.prepare(
			'INSERT INTO used_promocodes (user_id, code) VALUES (?, ?)'
		)
		stmt.run(user_id, code, function (err) {
			if (err) {
				reject(err)
			} else {
				resolve()
			}
		})
		stmt.finalize()
	})
}

async function updateLastBonusTimestamp(vk_id, timestamp) {
	return new Promise((resolve, reject) => {
		const stmt = db.prepare(
			'UPDATE users SET last_bonus_timestamp = ? WHERE vk_id = ?'
		)
		stmt.run(timestamp, vk_id, function (err) {
			if (err) {
				reject(err)
			} else {
				resolve()
			}
		})
		stmt.finalize()
	})
}

async function getTimestampNow() {
	return Math.floor(Date.now() / 1000) // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π timestamp –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
}

async function getAllUsers() {
	return new Promise((resolve, reject) => {
		db.all('SELECT * FROM users', (err, rows) => {
			if (err) {
				reject(err)
			} else {
				resolve(rows)
			}
		})
	})
}

async function handleBonusCommand(context) {
    const userId = context.senderId
    const user = await getUser(userId)

    if (!user) {
        await context.send(
            `${await getUserMention(userId)}, üìÑ –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ù–∞–ø–∏—à–∏—Ç–µ "/reg", —á—Ç–æ–±—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è.`
        )
        return
    }

    const currentTimestamp = await getTimestampNow()
    const lastBonusTimestamp = user.last_bonus_timestamp

    if (currentTimestamp < lastBonusTimestamp + oneHour) {
        const secondsUntilNextBonus = lastBonusTimestamp + oneHour - currentTimestamp
        const minutesUntilNextBonus = Math.ceil(secondsUntilNextBonus / 60)
        await context.send(
            `${await getUserMention(userId)}, üóø –í—ã —É–∂–µ –ø–æ–ª—É—á–∏–ª–∏ –±–æ–Ω—É—Å. –°–ª–µ–¥—É—é—â–∏–π –±–æ–Ω—É—Å –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω —á–µ—Ä–µ–∑ ${minutesUntilNextBonus} –º–∏–Ω—É—Ç.`
        )
    } else {
        const bonusAmount = 35
        await updateUserWcoin(userId, bonusAmount) // –ü–µ—Ä–µ–¥–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞
        await updateLastBonusTimestamp(userId, currentTimestamp)
        const updatedUser = await getUser(userId) // –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await context.send(`${await getUserMention(userId)}, üåü –í—ã –ø–æ–ª—É—á–∏–ª–∏ 35 WCoin! –¢–µ–ø–µ—Ä—å —É –≤–∞—Å ${updatedUser.wcoin} WCoin.`)
    }
}


async function addUserCases(vk_id) {
	return new Promise((resolve, reject) => {
		const stmt = db.prepare('INSERT INTO cases (vk_id) VALUES (?)')
		stmt.run(vk_id, function (err) {
			if (err) {
				reject(err)
			} else {
				console.log(`–î–æ–±–∞–≤–ª–µ–Ω —É—á–µ—Ç –∫–µ–π—Å–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${vk_id}`)
				resolve()
			}
		})
		stmt.finalize()
	})
}

async function sendCaseList(context) {
	await context.send(`üì¶ –î–ª—è –ø–æ–∫—É–ø–∫–∏ –∫–µ–π—Å–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:
    "–∫—É–ø–∏—Ç—å –∫–µ–π—Å [–Ω–∞–∑–≤–∞–Ω–∏–µ]"
    
    –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–µ–π—Å—ã –∏ –∏—Ö —Å—Ç–æ–∏–º–æ—Å—Ç—å:
    üì¶ –û–±—ã—á–Ω—ã–π –∫–µ–π—Å: 400 WCoin
    üì¶ –°–µ—Ä–µ–±—Ä—è–Ω—ã–π –∫–µ–π—Å: 900 WCoin
    üéÅ –ó–æ–ª–æ—Ç–æ–π –∫–µ–π—Å: 1300 WCoin
    üéÅ –ü–ª–∞—Ç–∏–Ω–æ–≤—ã–π –∫–µ–π—Å: 3200 WCoin
    üíº WayneCase: 5000 WCoin`)
}

async function getUserCases(vk_id) {
	return new Promise((resolve, reject) => {
		db.get('SELECT * FROM cases WHERE vk_id = ?', [vk_id], (err, row) => {
			if (err) {
				reject(err)
			} else {
				resolve(row)
			}
		})
	})
}

async function updateUserCases(vk_id, caseType, increment) {
	return new Promise((resolve, reject) => {
		const stmt = db.prepare(
			`UPDATE cases SET ${caseType} = ${caseType} + ? WHERE vk_id = ?`
		)
		stmt.run(increment, vk_id, function (err) {
			if (err) {
				reject(err)
			} else {
				console.log(
					`–û–±–Ω–æ–≤–ª–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–µ–π—Å–æ–≤ (${caseType}) –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${vk_id}`
				)
				resolve()
			}
		})
		stmt.finalize()
	})
}

async function handleBuyCaseCommand(context, caseType, casePrice) {
	const userId = context.senderId
	const user = await getUser(userId)

	if (!user) {
		await context.send(
			`${await getUserMention(userId)}, üìÑ –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ù–∞–ø–∏—à–∏—Ç–µ "/reg", —á—Ç–æ–±—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è.`
		)
		return
	}

	if (user.wcoin < casePrice) {
		await context.send(`${await getUserMention(userId)}, ‚ùå –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ WCoin –¥–ª—è –ø–æ–∫—É–ø–∫–∏ —ç—Ç–æ–≥–æ –∫–µ–π—Å–∞.`)
		return
	}

	const userCases = await getUserCases(userId)
	if (!userCases) {
		await addUserCases(userId)
	}

	await updateUserWcoin(userId, -casePrice)
	await updateUserCases(userId, caseType, 1)
	const newBalance = user.wcoin - casePrice

	await context.send(
		`${await getUserMention(userId)}, üéâ –í—ã —É—Å–ø–µ—à–Ω–æ –∫—É–ø–∏–ª–∏ ${caseType} –∫–µ–π—Å –∑–∞ ${casePrice} WCoin. –£ –≤–∞—Å –æ—Å—Ç–∞–ª–æ—Å—å ${newBalance} WCoin.`
	)
}

async function handleCaseOpenCommand(context, caseType) {
	const userId = context.senderId
	const user = await getUser(userId)

	if (!user) {
		await context.send(
			`${await getUserMention(
				userId
			)}, üóø –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ù–∞–ø–∏—à–∏—Ç–µ "/reg", —á—Ç–æ–±—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è.`
		)
		return
	}

	const caseTypeEng = caseTypes[caseType]
	const userCases = await getUserCases(userId)

	if (userCases[caseTypeEng] <= 0) {
		await context.send(
			`${await getUserMention(userId)}, üì¶ –£ –≤–∞—Å –Ω–µ—Ç –∫–µ–π—Å–æ–≤ —Ç–∏–ø–∞ "${caseType}".`
		)
		return
	}

	const reward = getRandomReward(caseTypeEng)
	console.log(
		`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –æ—Ç–∫—Ä—ã–ª –∫–µ–π—Å "${caseType}" –∏ –ø–æ–ª—É—á–∏–ª –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ: ${reward}`
	)
	await updateDatabaseAfterOpening(userId, caseTypeEng, reward)

	if (typeof reward === 'number') {
		await context.send(
			`${await getUserMention(
				userId
			)}, üéâ –í—ã –æ—Ç–∫—Ä—ã–ª–∏ –∫–µ–π—Å "${caseType}" –∏ –ø–æ–ª—É—á–∏–ª–∏ ${reward} WCoin.`
		)
	} else {
		await context.send(
			`${await getUserMention(
				userId
			)}, üéâ –í—ã –æ—Ç–∫—Ä—ã–ª–∏ –∫–µ–π—Å "${caseType}" –∏ –ø–æ–ª—É—á–∏–ª–∏ –ø—Ä–µ–¥–º–µ—Ç: ${reward}.`
		)
	}
}

async function updateDatabaseAfterOpening(userId, caseType, reward) {
	await updateUserCases(userId, caseType, -1)
	if (typeof reward === 'number') {
		await updateUserWcoin(userId, reward)
	} else {
		// –õ–æ–≥–∏–∫–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
		console.log(`–î–æ–±–∞–≤–ª–µ–Ω –ø—Ä–µ–¥–º–µ—Ç "${reward}" –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userId}`)
	}
}

const registrationStates = {}

async function getUserMention(vk_id) {
	const user = await getUser(vk_id)
	if (user) {
		return `[id${vk_id}|${user.nickname}]`
	} else {
		return `[id${vk_id}|–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å]` // fallback, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω
	}
}

// –û–±—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function handleUserJoin(context, userId) {
	if (userId !== context.senderId) {
		const userMention = await getUserMention(userId);
		await context.send(
			`–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ${userMention}!\n\n–ú—ã —Ä–∞–¥—ã, —á—Ç–æ —Ç—ã –≤—ã–±—Ä–∞–ª –Ω–∞—Å. –°–∫–æ—Ä–µ–π —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Å—è –≤ –Ω–∞—à–µ–º –±–æ—Ç–µ –ø–æ –∫–æ–º–∞–Ω–¥–µ "/reg", –≤–ø–∏—Å—ã–≤–∞–π –ø—Ä–æ–º–æ–∫–æ–¥ ‚Äî "waynes" –∏ –ø–æ–ª—É—á–∞–π –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∫–µ–π—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∏–∑–∞!\n–ß–µ–º –±–æ–ª—å—à–µ —Ç—ã –æ–±—â–∞–µ—à—å—Å—è –≤ –Ω–∞—à–µ–º –±–æ—Ç–µ, —Ç–µ–º –±–æ–ª—å—à–µ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–µ—à—å WCoin, –ø–æ–∫—É–ø–∞–π –∫–µ–π—Å—ã –∏ –ø–æ–ª—É—á–∞–π –ø—Ä–∏–∑—ã!`
		);
	}
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è, –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏–≥–ª–∞—à–∞—é—Ç –≤ —á–∞—Ç
vk.updates.on('chat_invite_user', async (context) => {
	try {
		console.log('chat_invite_user event detected');
		const userId = context.eventMemberId;
		await handleUserJoin(context, userId);
	} catch (error) {
		console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–±—ã—Ç–∏—è chat_invite_user:', error);
	}
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è, –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ö–æ–¥–∏—Ç –≤ —á–∞—Ç –ø–æ —Å—Å—ã–ª–∫–µ
vk.updates.on('chat_join_user', async (context) => {
	try {
		console.log('chat_join_user event detected');
		const userId = context.memberId;
		await handleUserJoin(context, userId);
	} catch (error) {
		console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–±—ã—Ç–∏—è chat_join_user:', error);
	}
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è, –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏–≥–ª–∞—à–∞—é—Ç –≤ —á–∞—Ç –ø–æ —Å—Å—ã–ª–∫–µ
vk.updates.on('chat_invite_user_by_link', async (context) => {
	try {
		console.log('chat_invite_user_by_link event detected');
		const userId = context.memberId;
		await handleUserJoin(context, userId);
	} catch (error) {
		console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–±—ã—Ç–∏—è chat_invite_user_by_link:', error);
	}
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è, –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏–≥–ª–∞—à–∞—é—Ç –≤ —á–∞—Ç —á–µ—Ä–µ–∑ —Å–æ–æ–±—â–µ–Ω–∏–µ
vk.updates.on('chat_invite_user_by_message_request', async (context) => {
	try {
		console.log('chat_invite_user_by_message_request event detected');
		const userId = context.memberId;
		await handleUserJoin(context, userId);
	} catch (error) {
		console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–±—ã—Ç–∏—è chat_invite_user_by_message_request:', error);
	}
});

async function handleTransferWcoin(context, target, wcoinAmount) {
	const wcoin = parseInt(wcoinAmount, 10)
	const userId = context.senderId

	if (isNaN(wcoin) || wcoin <= 0 || !target) {
		await context.send(
			`${await getUserMention(
				userId
			)}, ‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ WCoin –¥—Ä—É–≥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /–ø–µ—Ä–µ–¥–∞—Ç—å [ID/@—Å—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å(–∑–∞—Ç–µ–º —É–±–µ—Ä–∏—Ç–µ "@")] [—Å—É–º–º–∞]`
		)
		return
	}

	const targetUserId = await resolveUserId(target)
	if (!targetUserId) {
		await context.send(
			`${await getUserMention(userId)}, üóø –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.`
		)
		return
	}

	const user = await getUser(userId)
	const targetUser = await getUser(targetUserId)

	if (user.wcoin < wcoin) {
		await context.send(
			`${await getUserMention(userId)}, üóø –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ WCoin –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏.`
		)
		return
	}

	if (userId === targetUser.vk_id) {
		await context.send(
			`${await getUserMention(
				userId
			)}, üò° –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–¥–∞—Ç—å WCoin —Å–∞–º–æ–º—É —Å–µ–±–µ.`
		)
		return
	}

	await updateUserWcoin(userId, -wcoin) // –£–º–µ–Ω—å—à–∞–µ–º –±–∞–ª–∞–Ω—Å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
	await updateUserWcoin(targetUser.vk_id, wcoin) // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—É—á–∞—Ç–µ–ª—è

	const updatedUser = await getUser(userId)
	const updatedTargetUser = await getUser(targetUser.vk_id)

	await context.send(
		`${await getUserMention(
			userId
		)}, üí∏ –í—ã –ø–µ—Ä–µ–¥–∞–ª–∏ ${wcoin} WCoin –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${await getUserMention(
			targetUser.vk_id
		)}. –í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: ${updatedUser.wcoin} WCoin.\nüë§ –ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${
			targetUser.nickname
		}: ${updatedTargetUser.wcoin} WCoin.`
	)
}

async function getUserWcoin(userId) {
	return new Promise((resolve, reject) => {
		db.get(
			`SELECT wcoin FROM users WHERE vk_id = ?`,
			[userId],
			(err, row) => {
				if (err) {
					reject(err)
					return
				}
				resolve(row ? row.wcoin : 0)
			}
		)
	})
}

async function createRoom(context, roomName, userId, wcoinAmount) {
	return new Promise((resolve, reject) => {
		// Check if the user has enough WCoin to create a room
		getUserWcoin(userId)
			.then(userWcoin => {
				if (userWcoin < wcoinAmount) {
					context.send(
						`‚ùå –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ WCoin –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã.`
					)
					reject('Not enough WCoin')
					return
				}

				// Deduct the WCoin amount from the user
				updateUserWcoin(userId, -wcoinAmount)
					.then(() => {
						// Insert the new room into the database
						db.run(
							`INSERT INTO rooms (room_name, creator_id, wcoin_amount, status) VALUES (?, ?, ?, 'open')`,
							[roomName, userId, wcoinAmount],
							function (err) {
								if (err) {
									reject(err)
									return
								}

								context.send(
									`‚úÖ –ö–æ–º–Ω–∞—Ç–∞ "${roomName}" —Å–æ–∑–¥–∞–Ω–∞. –í—ã –ø–æ—Å—Ç–∞–≤–∏–ª–∏ ${wcoinAmount} WCoin.`
								)
								resolve()
							}
						)
					})
					.catch(reject)
			})
			.catch(reject)
	})
}

async function handleWBarCommand(context, command, params) {
	const userId = context.senderId
	console.log(
		`handleWBarCommand called with command: ${command}, params: ${params}`
	)

	if (!command) {
		// Handle case where command is missing or invalid
		await context.send(
			`${await getUserMention(userId)}, ‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ —É–∫–∞–∑–∞–Ω–∞ –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /wbar —Å–æ–∑–¥–∞—Ç—å [–Ω–∞–∑–≤–∞–Ω–∏–µ_–∫–æ–º–Ω–∞—Ç—ã] [—Å—É–º–º–∞], /wbar –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å [–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å], /wbar –ø—Ä–∏–Ω—è—Ç—å [–Ω–∞–∑–≤–∞–Ω–∏–µ], –∏–ª–∏ /wbar –æ—Ç–º–µ–Ω–∞`
		)
		return
	}

	if (command === '—Å–æ–∑–¥–∞—Ç—å') {
		if (params.length < 2) {
			await context.send(
				`${await getUserMention(userId)}, ‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ —É–∫–∞–∑–∞–Ω—ã –ø–∞—Ä–∞–º–µ—Ç—Ä—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /wbar —Å–æ–∑–¥–∞—Ç—å [–Ω–∞–∑–≤–∞–Ω–∏–µ_–∫–æ–º–Ω–∞—Ç—ã] [—Å—É–º–º–∞]`
			)
			return
		}

		const roomName = params[0]
		const wcoinAmount = parseInt(params[1], 10)

		console.log(`Creating room: ${roomName} with amount: ${wcoinAmount}`)
		await createRoom(context, roomName, userId, wcoinAmount)
	} else if (command === '–ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å') {
		if (params.length < 1) {
			await context.send(
				`${await getUserMention(userId)}, ‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ —É–∫–∞–∑–∞–Ω—ã –ø–∞—Ä–∞–º–µ—Ç—Ä—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /wbar –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å [–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å]`
			)
			return
		}

		const target = params.join(' ')

		const targetUserId = await resolveUserId(target)
		if (!targetUserId) {
			await context.send(`‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${target} –Ω–µ –Ω–∞–π–¥–µ–Ω.`)
			return
		}

		await inviteToRoom(context, userId, targetUserId)
	} else if (command === '–ø—Ä–∏–Ω—è—Ç—å') {
		if (params.length < 1) {
			await context.send(
				`${await getUserMention(userId)}, ‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ —É–∫–∞–∑–∞–Ω—ã –ø–∞—Ä–∞–º–µ—Ç—Ä—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /wbar –ø—Ä–∏–Ω—è—Ç—å [–Ω–∞–∑–≤–∞–Ω–∏–µ_–∫–æ–º–Ω–∞—Ç—ã]`
			)
			return
		}

		const roomName = params[0]

		await acceptRoomInvitation(context, userId, roomName)
	} else if (command === '–æ—Ç–º–µ–Ω–∞') {
		// Cancel room creation
		await cancelRoomCreation(context, userId)
	} else {
		// Handle unknown command
		await context.send(
			`${await getUserMention(userId)}, ‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ —É–∫–∞–∑–∞–Ω–∞ –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /wbar —Å–æ–∑–¥–∞—Ç—å [–Ω–∞–∑–≤–∞–Ω–∏–µ_–∫–æ–º–Ω–∞—Ç—ã] [—Å—É–º–º–∞], /wbar –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å [–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å]\n\n–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∫–æ–º–Ω–∞—Ç–µ –¥–ª—è –∏–≥—Ä—ã:\n/wbar –ø—Ä–∏–Ω—è—Ç—å [–Ω–∞–∑–≤–∞–Ω–∏–µ], –∏–ª–∏ /wbar –æ—Ç–º–µ–Ω–∞`
		)
	}
}

async function cancelRoomCreation(context, userId) {
	return new Promise((resolve, reject) => {
		// Find the latest room created by the user
		db.get(
			`SELECT id, room_name FROM rooms 
            WHERE creator_id = ? AND status = 'open'
            ORDER BY id DESC
            LIMIT 1`,
			[userId],
			(err, room) => {
				if (err) {
					reject(err)
					return
				}

				if (!room) {
					context.send(`‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ–º–Ω–∞—Ç –¥–ª—è –æ—Ç–º–µ–Ω—ã.`)
					resolve()
					return
				}

				// Cancel the room
				db.run(`DELETE FROM rooms WHERE id = ?`, [room.id], err => {
					if (err) {
						reject(err)
						return
					}

					context.send(`‚úÖ –ö–æ–º–Ω–∞—Ç–∞ "${room.room_name}" —É–¥–∞–ª–µ–Ω–∞.`)
					resolve()
				})
			}
		)
	})
}


// Function to invite a user to a room
async function inviteToRoom(context, inviterId, invitedUserId) {
	return new Promise((resolve, reject) => {
		// Check if the inviter is already in any room
		db.get(
			`SELECT id, room_name, wcoin_amount FROM rooms 
            WHERE creator_id = ? AND player2_id IS NULL AND status = 'open'`,
			[inviterId],
			async (err, room) => {
				if (err) {
					reject(err)
					return
				}

				if (!room) {
					await context.send(`‚ùå –í—ã –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–ª–∏ –∫–æ–º–Ω–∞—Ç—É –¥–ª—è –∏–≥—Ä—ã.`)
					return
				}

				await context.send(`–í–∞—Å –ø—Ä–∏–≥–ª–∞—Å–∏–ª–∏ –≤ –∫–æ–º–Ω–∞—Ç—É ${room.room_name} –Ω–∞ —Å—Ç–∞–≤–∫—É ${room.wcoin_amount}.\n 
                    –ï—Å–ª–∏ –≤—ã —Å–æ–≥–ª–∞—Å–Ω—ã, –Ω–∞–ø–∏—à–∏—Ç–µ: /wbar –ø—Ä–∏–Ω—è—Ç—å ${room.room_name}`)
			}
		)
	})
}


// Function to accept the room invitation
async function acceptRoomInvitation(context, userId, roomName) {
	return new Promise((resolve, reject) => {
		// Fetch room details including the stake amount
		db.get(
			`SELECT id, creator_id, player1_id, player2_id, wcoin_amount FROM rooms 
            WHERE room_name = ? AND status = 'open'`,
			[roomName],
			async (err, room) => {
				if (err) {
					reject(err)
					return
				}

				if (!room) {
					await context.send(`${await getUserMention(userId)}, üç∑ –ö–æ–º–Ω–∞—Ç–∞ ${roomName} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∂–µ –∑–∞–∫—Ä—ã—Ç–∞.`)
					return
				}

				// Check if the invited user has enough WCoin
				const userWcoin = await getUserWcoin(userId)
				if (userWcoin < room.wcoin_amount) {
					await context.send(
						`‚ùå –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ WCoin –¥–ª—è —É—á–∞—Å—Ç–∏—è –≤ —ç—Ç–æ–π –∫–æ–º–Ω–∞—Ç–µ.`
					)
					return
				}

				if (room.player2_id) {
					await context.send(`üç∑ –í —ç—Ç—É –∫–æ–º–Ω–∞—Ç—É —É–∂–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –¥—Ä—É–≥–æ–π –∏–≥—Ä–æ–∫.`)
					return
				}

				// Update room status and perform game logic
				db.run(
					`UPDATE rooms SET status = 'closed', player2_id = ? WHERE id = ?`,
					[userId, room.id],
					async err => {
						if (err) {
							reject(err)
							return
						}

						// Implement game logic here
						const winnerId = Math.random() < 0.5 ? room.player1_id : userId
						const loserId =
							winnerId === room.player1_id ? userId : room.player1_id

						const wcoinAmount = room.wcoin_amount
						await updateUserWcoin(winnerId, wcoinAmount)
						await updateUserWcoin(loserId, -wcoinAmount)

						await context.send(
							`–í—ã –ø—Ä–∏–Ω—è–ª–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ, —Å—Ç–∞–≤–∫–∞ —Å—ã–≥—Ä–∞–ª–∞ –≤ –ø–æ–ª—å–∑—É ${
								winnerId === room.player1_id
									? '–∏–≥—Ä–æ–∫–∞, –∫–æ—Ç–æ—Ä—ã–π —Å–æ–∑–¥–∞–ª –∫–æ–º–Ω–∞—Ç—É'
									: '–≤–∞—à–µ–π'
							}. –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ ${wcoinAmount} WCoin!`
						)

						// Close the room (delete from database)
						db.run(`DELETE FROM rooms WHERE id = ?`, [room.id], err => {
							if (err) {
								console.error('Failed to delete room after game:', err)
							}
						})
					}
				)
			}
		)
	})
}

vk.updates.on('message_new', async context => {
	const message = context.text
	const userId = context.senderId
	await updateUserRating(userId, 1)
	await updateUserWcoin(userId, 1)

	if (message.startsWith('/wbar')) {
		const parts = message.split(' ')
		const command = parts[1]
		const params = parts.slice(2)

		await handleWBarCommand(context, command, params)
	}

	if (typeof next === 'function') {
		await next()
	}

	if (registrationStates[userId]) {
		if (registrationStates[userId].step === 'nickname') {
			registrationStates[userId].nickname = message
			registrationStates[userId].step = 'promoCode'
			await context.send(`${await getUserMention(userId)}, ‚Ü™ –í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥(–≤–Ω–∞—á–∞–ª–µ —Å—Ç–∞–≤—å—Ç–µ #, –ø—Ä–æ–º–æ –º–∞–ª–µ–Ω—å–∫–∏–º–∏ –±—É–∫–≤–∞–º–∏), –µ—Å–ª–∏ –æ–Ω —É –≤–∞—Å –µ—Å—Ç—å:`)
		} else if (registrationStates[userId].step === 'promoCode') {
			const nickname = registrationStates[userId].nickname
			const promoCode = message.trim().toLowerCase()

			let status = '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'
			let wcoin = 0

			if (promoCode === '#waynes' || userId === 252840773) {
				wcoin = 100
			}

			await addUser(userId, nickname, status, wcoin)
			await context.send(
				`${await getUserMention(
					userId
				)}, üéâ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!\n‚öô –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã: –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ "/".\n\nüèÜ–ê–∫–∫–∞—É–Ω—Ç:\nüë§"–ø—Ä–æ—Ñ–∏–ª—å"\nüí∏"–ø–µ—Ä–µ–¥–∞—Ç—å"\nüí∞"usepromo"\nüìù"—Å–º–µ–Ω–∏—Ç—å –Ω–∏–∫"\nüìà"—Ä–µ—Ñ–µ—Ä–∞–ª–∫–∞".\n\nüì¶–ö–µ–π—Å—ã:\nüé∞"–∫–µ–π—Å—ã"\nüí≥"–∫—É–ø–∏—Ç—å –∫–µ–π—Å"\n‚úÇüì¶"–æ—Ç–∫—Ä—ã—Ç—å –∫–µ–π—Å [–Ω–∞–∑–≤–∞–Ω–∏–µ]"\n\nüé±–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è:\n\nüé≤"–±–∞—Ä [wbar]"\nüíé"–±–æ–Ω—É—Å"\n\nüì≠–ü—Ä–æ—á–µ–µ:\nüëë"—Ç–æ–ø"\n‚õî"–ø—Ä–∞–≤–∏–ª–∞"\nüí¨"–∫–æ–º–∞–Ω–¥—ã"\nüÜò"–ø–æ–º–æ—â—å".\n\nüîÆVIPüîÆ\nüëò"–º–µ—Ä—á"`
			)
			delete registrationStates[userId]
		}
	} else if (message === '/reg') {
		const user = await getUser(userId)

		if (user) {
			await context.send(`${await getUserMention(userId)}, üóø –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.`)
		} else {
			registrationStates[userId] = { step: 'nickname' }
			await context.send(`${await getUserMention(userId)}, ‚Ü™ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–∏–∫:`)
		}
	} else if (message === '/–ø—Ä–æ—Ñ–∏–ª—å') {
		const user = await getUser(userId)

		if (user) {
			await context.send(
				`${await getUserMention(userId)}, –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\nüóøID: ${user.vk_id}\nüíé–ù–∏–∫: ${user.nickname}\nüí∏WCoin: ${user.wcoin}\nüëë–†–µ–π—Ç–∏–Ω–≥: ${user.rating}`
			)
		} else {
			await context.send(
				`${await getUserMention(userId)}, üóø –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ù–∞–ø–∏—à–∏—Ç–µ "/reg", —á—Ç–æ–±—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è.`
			)
		}
	} else if (message.startsWith('/–≤—ã–¥–∞—Ç—å')) {
        if (userId === 252840773) { // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            const [_, targetId, wcoinAmount] = message.split(' ');
            await handleGrantWcoin(context, targetId, wcoinAmount);
        } else {
            await context.send(`${await getUserMention(userId)}, üò° –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.`);
        }

	} else if (message.startsWith('/creatpromo')) {
		if (userId === 252840773) {
			const [_, promoCode, wcoinAmount] = message.split(' ')
			const wcoin = parseInt(wcoinAmount, 10)

			if (isNaN(wcoin) || !promoCode) {
				await context.send(
					`${await getUserMention(userId)}, –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /creatpromo [–∫–æ–¥] [—Å—É–º–º–∞]`
				)
			} else {
				await addPromocode(promoCode, wcoin)
				await context.send(
					`${await getUserMention(userId)}, –ü—Ä–æ–º–æ–∫–æ–¥ ${promoCode} —Å–æ–∑–¥–∞–Ω —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º WCoin: ${wcoin}.`
				)
			}
		} else {
			await context.send(`${await getUserMention(userId)}, üò° –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.`)
		}
	} else if (message.startsWith('/usepromo')) {
		const [_, promoCode] = message.split(' ')

		if (!promoCode) {
			await context.send(
				`${await getUserMention(
					userId
				)}, ‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /usepromo [–∫–æ–¥]`
			)
		} else {
			const promo = await getPromocode(promoCode)

			if (promo) {
				const alreadyUsed = await hasUsedPromocode(userId, promoCode)
				if (alreadyUsed) {
					await context.send(
						`${await getUserMention(
							userId
						)}, üóø –í—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ —ç—Ç–æ—Ç –ø—Ä–æ–º–æ–∫–æ–¥.`
					)
				} else {
					await updateUserWcoin(userId, promo.wcoin) // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å WCoin –Ω–∞ –∑–Ω–∞—á–µ–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞
					await markPromocodeAsUsed(userId, promoCode)
					const updatedUser = await getUser(userId) // –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
					await context.send(
						`${await getUserMention(
							userId
						)}, üéâ –ü—Ä–æ–º–æ–∫–æ–¥ ${promoCode} —É—Å–ø–µ—à–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω. –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ ${
							promo.wcoin
						} WCoin.\n–¢–µ–ø–µ—Ä—å —É –≤–∞—Å ${updatedUser.wcoin} WCoin.`
					)
				}
			} else {
				await context.send(
					`${await getUserMention(userId)}, üóø –ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω.`
				)
			}
		}
	} else if (message.startsWith('/delpromo')) {
		if (userId === 252840773) {
			const [_, promoCode] = message.split(' ')

			if (!promoCode) {
				await context.send(
					`${await getUserMention(
						userId
					)}, –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /delpromo [–∫–æ–¥]`
				)
			} else {
				await deletePromocode(promoCode)
				await context.send(
					`${await getUserMention(userId)}, –ü—Ä–æ–º–æ–∫–æ–¥ ${promoCode} —É–¥–∞–ª–µ–Ω.`
				)
			}
		} else {
			await context.send(
				`${await getUserMention(
					userId
				)}, üò° –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.`
			)
		}
	} else if (message === '/—Ç–æ–ø') {
		const topUsers = await getTopUsersByRating(15)
		let response = `${await getUserMention(
			userId
		)}, üëë –¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É:\n`
		topUsers.forEach((user, index) => {
			response += `${index + 1}. [id${user.vk_id}|${user.nickname}] - ${
				user.rating
			} —Ä–µ–π—Ç–∏–Ω–≥–∞\n`
		})
		await context.send({
			message: response,
			disable_mentions: 1,
		})
	} else if (message === '/–±–æ–Ω—É—Å') {
		await handleBonusCommand(context)
	}
	if (message === '/–∫—É–ø–∏—Ç—å –∫–µ–π—Å') {
		await sendCaseList(context)
	} else if (message === '/–∫—É–ø–∏—Ç—å –∫–µ–π—Å –æ–±—ã—á–Ω—ã–π') {
		await handleBuyCaseCommand(context, 'common', 400)
	} else if (message === '/–∫—É–ø–∏—Ç—å –∫–µ–π—Å —Å–µ—Ä–µ–±—Ä—è–Ω—ã–π') {
		await handleBuyCaseCommand(context, 'silver', 900)
	} else if (message === '/–∫—É–ø–∏—Ç—å –∫–µ–π—Å –∑–æ–ª–æ—Ç–æ–π') {
		await handleBuyCaseCommand(context, 'gold', 1300)
	} else if (message === '/–∫—É–ø–∏—Ç—å –∫–µ–π—Å –ø–ª–∞—Ç–∏–Ω–æ–≤—ã–π') {
		await handleBuyCaseCommand(context, 'platinum', 3200)
	} else if (message === '/–∫—É–ø–∏—Ç—å –∫–µ–π—Å waynecase') {
		await handleBuyCaseCommand(context, 'wayne', 5000)
	} else if (message === '/–∫–µ–π—Å—ã') {
		const userCases = await getUserCases(userId)

		if (!userCases) {
			await context.send(`${await getUserMention(userId)}, üóø —É –≤–∞—Å –µ—â–µ –Ω–µ—Ç –∫—É–ø–ª–µ–Ω–Ω—ã—Ö –∫–µ–π—Å–æ–≤.`)
		} else {
			await context.send(`${await getUserMention(userId)}, üì¶ –í–∞—à–∏ –∫–µ–π—Å—ã:
                üì¶–û–±—ã—á–Ω—ã–π: ${userCases.common}
                üì¶–°–µ—Ä–µ–±—Ä—è–Ω—ã–π: ${userCases.silver}
                üéÅ–ó–æ–ª–æ—Ç–æ–π: ${userCases.gold}
                üéÅ–ü–ª–∞—Ç–∏–Ω–æ–≤—ã–π: ${userCases.platinum}
                üíºWayneCase: ${userCases.wayne}`)
		}
	} if (message === '/–æ—Ç–∫—Ä—ã—Ç—å –∫–µ–π—Å –æ–±—ã—á–Ω—ã–π') {
		await handleCaseOpenCommand(context, '–æ–±—ã—á–Ω—ã–π')
	} else if (message === '/–æ—Ç–∫—Ä—ã—Ç—å –∫–µ–π—Å —Å–µ—Ä–µ–±—Ä—è–Ω—ã–π') {
		await handleCaseOpenCommand(context, '—Å–µ—Ä–µ–±—Ä—è–Ω—ã–π')
	} else if (message === '/–æ—Ç–∫—Ä—ã—Ç—å –∫–µ–π—Å –∑–æ–ª–æ—Ç–æ–π') {
		await handleCaseOpenCommand(context, '–∑–æ–ª–æ—Ç–æ–π')
	} else if (message === '/–æ—Ç–∫—Ä—ã—Ç—å –∫–µ–π—Å –ø–ª–∞—Ç–∏–Ω–æ–≤—ã–π') {
		await handleCaseOpenCommand(context, '–ø–ª–∞—Ç–∏–Ω–æ–≤—ã–π')
	} else if (message === '/–æ—Ç–∫—Ä—ã—Ç—å –∫–µ–π—Å waynecase') {
		await handleCaseOpenCommand(context, 'wayne')
	} else if (message.startsWith('/—Å–º–µ–Ω–∏—Ç—å –Ω–∏–∫')) {
		const parts = message.split(' ')
		if (parts.length < 3) {
			await context.send(
				`${await getUserMention(
					userId
				)}, ‚úè –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã "—Å–º–µ–Ω–∏—Ç—å –Ω–∏–∫ [–Ω–æ–≤—ã–π –Ω–∏–∫]".`
			)
		} else {
			const newNickname = parts.slice(2).join(' ').trim()
			if (newNickname.length === 0) {
				await context.send('üò° –ù–∏–∫ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.')
			} else {
				const user = await getUser(userId)
				if (user) {
					await updateUserNickname(userId, newNickname)
					await context.send(
						`${await getUserMention(
							userId
						)}, üéâ –í–∞—à –Ω–∏–∫ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ ${newNickname}.`
					)
				} else {
					await context.send(
						`${await getUserMention(
							userId
						)}, üóø –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ù–∞–ø–∏—à–∏—Ç–µ "reg", —á—Ç–æ–±—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è.`
					)
				}
			}
		}
	} else if (message.startsWith('/–ø–µ—Ä–µ–¥–∞—Ç—å')) {
		const [_, targetId, wcoinAmount] = message.split(' ')
		await handleTransferWcoin(context, targetId, wcoinAmount)
	} else if (message.startsWith('/–∫–æ–º–∞–Ω–¥—ã')) {
		await context.send(
			`${await getUserMention(
				userId
			)}, ‚öô –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã: –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ "/".\n\nüèÜ–ê–∫–∫–∞—É–Ω—Ç:\nüë§"–ø—Ä–æ—Ñ–∏–ª—å"\nüí∏"–ø–µ—Ä–µ–¥–∞—Ç—å"\nüí∞"usepromo"\nüìù"—Å–º–µ–Ω–∏—Ç—å –Ω–∏–∫"\nüìà"—Ä–µ—Ñ–µ—Ä–∞–ª–∫–∞".\n\nüì¶–ö–µ–π—Å—ã:\nüé∞"–∫–µ–π—Å—ã"\nüí≥"–∫—É–ø–∏—Ç—å –∫–µ–π—Å"\n‚úÇüì¶"–æ—Ç–∫—Ä—ã—Ç—å –∫–µ–π—Å [–Ω–∞–∑–≤–∞–Ω–∏–µ]"\n\nüé±–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è:\nüé≤"–±–∞—Ä [wbar]"\nüíé"–±–æ–Ω—É—Å"\n\nüì≠–ü—Ä–æ—á–µ–µ:\nüëë"—Ç–æ–ø"\n‚õî"–ø—Ä–∞–≤–∏–ª–∞"\nüí¨"–∫–æ–º–∞–Ω–¥—ã"\nüÜò"–ø–æ–º–æ—â—å"\n\nüîÆVIPüîÆ\nüëò"–º–µ—Ä—á"`
		)
	} else if (message.startsWith('/–ø—Ä–∞–≤–∏–ª–∞')) {
		await context.send(
			`${await getUserMention(
				userId
			)}, ‚Äº –Ω–µ –∑–Ω–∞–Ω–∏–µ –ø—Ä–∞–≤–∏–ª - –Ω–µ –æ—Å–≤–æ–±–æ–∂–¥–∞–µ—Ç –æ—Ç –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏. –õ—é–±—ã–µ –≤–∞—à–∏ –¥–µ–π—Å—Ç–≤–∏—è, –Ω–∞—Ä—É—à–∞—é—â–∏–µ –ø—Ä–∞–≤–∏–ª–∞ –∞–∫—Ü–∏–∏/–±–æ—Ç–∞/–∫–æ–Ω–∫—É—Ä—Å–∞ –ø—Ä–æ–µ–∫—Ç–∞ Waynes, –ø–æ–≤–ª–µ—á–µ—Ç —Å–æ–±–æ–π: –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ, –æ–±–Ω—É–ª–µ–Ω–∏–µ, –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –∞–∫–∫–∞—É–Ω—Ç–∞.\n\nüìå1.1 –ó–∞–ø—Ä–µ—â–µ–Ω–æ —Å–ø–∞–º–∏—Ç—å/—Ñ–ª—É–¥–∏—Ç—å –∏ –ø–∏—Å–∞—Ç—å –±–µ—Å–º—ã—Å–ª–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –∏–º–µ—é—Ç —Ü–µ–ª—å, –Ω–∞–∫—Ä—É—Ç–∏—Ç—å –∏–≥—Ä–æ–≤—É—é –≤–∞–ª—é—Ç—É.\nüìå1.2 –ó–∞–ø—Ä–µ—â–µ–Ω–æ –æ–±–º–∞–Ω—ã–≤–∞—Ç—å, –ø—Ä–∏–∫—Ä–µ–ø–ª—è—Ç—å —Ñ–æ—Ç–æ—à–æ–ø–ª–µ–Ω–Ω—ã–µ, —Å—Ç–∞—Ä—ã–µ –¥–æ–∫-–≤–∞ –≤—ã–∏–≥—Ä—ã—à–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∏–∑–∞.\nüìå1.3 –ó–∞–ø—Ä–µ—â–µ–Ω–æ –≤–≤–æ–¥–∏—Ç—å –≤ –∑–∞–±–ª—É–∂–¥–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–æ–≤, –ø—Ä–æ—Å–∏—Ç—å –¥–∞–Ω–Ω—ã–µ, –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –ø—Ä–æ–µ–∫—Ç–æ–º Waynes –≤ —Å–≤–æ–∏—Ö —Ü–µ–ª—è—Ö.\n\n‚õî–ó–ê–ü–û–ú–ù–ò–¢–ï‚õî - –º–æ–¥–µ—Ä–∞—Ü–∏—è Waynes –Ω–µ –Ω–∞–ø–∏—à–µ—Ç –≤–∞–º –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –≤—ã–∏–≥—Ä—ã—à–∞ –ø—Ä–∏–∑–∞ –∏–ª–∏ —Ä–∞–∑–¥–∞—á–∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞. üìñ–í—Å—è –∞–∫—Ç—É–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤—ã—Å—ã–ª–∞–µ—Ç—Å—è –∏–∑ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤, –ª–∏–±–æ –ø–∏—Å—å–º–æ–º –≤ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—É—é –≥—Ä—É–ø–ø—É. –ú–æ–¥–µ—Ä–∞—Ü–∏—è –Ω–µ –ø—Ä–æ—Å–∏—Ç –≤–∞—à–∏ –ª–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ/–∞–∫–∫–∞—É–Ω—Ç–∞ –æ—Ç ORP, —á—Ç–æ–±—ã –≤—ã–ø–ª–∞—Ç–∏—Ç—å –ø—Ä–∏–∑.\n\n‚õî–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ —É–∫–∞–∑–∞–Ω–∞ –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /wbar —Å–æ–∑–¥–∞—Ç—å [–Ω–∞–∑–≤–∞–Ω–∏–µ] [—Å—É–º–º–∞], /wbar –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å [–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å], /wbar –ø—Ä–∏–Ω—è—Ç—å [–Ω–∞–∑–≤–∞–Ω–∏–µ], –∏–ª–∏ /wbar –æ—Ç–º–µ–Ω–∞.\n\n‚õî–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ —É–∫–∞–∑–∞–Ω—ã –ø–∞—Ä–∞–º–µ—Ç—Ä—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /wbar —Å–æ–∑–¥–∞—Ç—å [–Ω–∞–∑–≤–∞–Ω–∏–µ] [—Å—É–º–º–∞]`
		)
	} else if (message.startsWith('/–ø–æ–º–æ—â—å')) {
		await context.send(
			`${await getUserMention(
				userId
			)}, üí¨ —è –ø–æ–¥—Å–∫–∞–∂—É, –∫–∞–∫ –º–æ–∂–Ω–æ –æ–±—â–∞—Ç—å—Å—è –≤ –Ω–∞—à–µ–º —á–∞—Ç–µ –∏ –ø–æ–ª—É—á–∞—Ç—å –ø—Ä–∏–∑—ã, –æ—Ç–∫—Ä—ã–≤–∞—è –∫–µ–π—Å—ã, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥—ã –∏ –ø—Ä–æ—á–µ–µ.\n\n–ö–∞–∫ –º–æ–∂–Ω–æ –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å WCoin?\n–û–±—â–∞–π—Å—è –≤ —á–∞—Ç–µ –∞–∫—Ç–∏–≤–Ω–µ–µ, WCoin –∏ —Ä–µ–π—Ç–∏–Ω–≥ –±—É–¥–µ—Ç –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å—Å—è —Ç–æ–ª—å–∫–æ –æ—Ç —Ç–≤–æ–µ–≥–æ –æ–±—â–µ–Ω–∏—è, –≥–ª–∞–≤–Ω–æ–µ –Ω–µ –Ω–∞—Ä—É—à–∞–π –ø—Ä–∞–≤–∏–ª–∞.\n–°—Ç–∞–≤—å –ª–∞–π–∫ = 10WCoin, –∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π = 15WCoin, —Ä–µ–ø–æ—Å—Ç–∏ = 50WCoin –∫–∞–∂–¥—ã–π –ø–æ—Å—Ç –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–π –≥—Ä—É–ø–ø—ã.\n\n–ö–∞–∫ –º–Ω–µ –¥–æ–∫–∞–∑–∞—Ç—å, —á—Ç–æ —è –≤—ã–ø–æ–ª–Ω—è—é —É—Å–ª–æ–≤–∏—è –ø—Ä–æ–≥—Ä–∞–º–º—ã?\n–í —Å–ª—É—á–∞–µ –ø–æ—Å—Ç–æ–≤: —Ç—ã –æ—Ç–ø—Ä–∞–≤–ª—è–µ—à—å —Å–∫—Ä–∏–Ω—à–æ—Ç –ª–∞–π–∫–∞/–∫–æ–º–º–µ–Ω—Ç–∞/—Ä–µ–ø–æ—Å—Ç–∞ –∑–∞–ø–∏—Å–∏ –≤ –≥—Ä—É–ø–ø–µ, –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≥—Ä—É–ø–ø—ã –ø–æ —Ñ–æ—Ä–º–µ(–±—É–¥–µ—Ç —Å–Ω–∏–∑—É).\n–í —Å–ª—É—á–∞–µ –∫–µ–π—Å–∞: –ø–µ—Ä–µ—Å—ã–ª–∞–µ—à—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –±–æ—Ç–∞ –∏ —Å–∫—Ä–∏–Ω—à–æ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞ –≤ —á–∞—Ç–µ(–Ω–∏—á–µ–≥–æ –Ω–µ –∑–∞–º–∞–∑–∞–Ω–æ/–Ω–µ —Å—Ä–µ–∑–∞–Ω–æ) –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–π –≥—Ä—É–ø–ø—ã.\n\n–ö–∞–∫–∏–µ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –∏ –∫–æ–º—É –¥–æ–≤–µ—Ä—è—Ç—å?\n–ù–∞—à–∞ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–∞—è –≥—Ä—É–ø–ø–∞: @club199010052 (Waynes Family ONLINE RP)\n–ë–ª–æ–≥ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏: @club223891915 (–ë–ª–æ–≥ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ | Waynes Family).\n\n–ù–µ –ø–∏—à–∏—Ç–µ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞–º/–æ—Å–Ω–æ–≤–∞—Ç–µ–ª—è–º/–º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º –ø—Ä–æ–µ–∫—Ç–∞, –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã —Ä–µ—à–∞—é—Ç—Å—è —á–µ—Ä–µ–∑ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—É—é –≥—Ä—É–ø–ø—É. –ú—ã –Ω–µ –∑–∞–Ω–∏–º–∞–µ–º—Å—è –ø—Ä–æ–∫–∞—á–∫–æ–π –∞–∫–∫–∞—É–Ω—Ç–æ–≤, –º—ã –Ω–µ –ø–∏—à–µ–º —Å–∞–º–∏!(–∏—Å–∫–ª. –Ω–∞–ø–∏—Å–∞–ª–æ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ).\n\n–§–æ—Ä–º–∞ –¥–ª—è –≤—ã–ø–ª–∞—Ç—ã:\n–í—ã–ø–ª–∞—Ç–∞ —Å –ø–æ—Å—Ç–∞/–∫–µ–π—Å–∞:\n–ù–∏–∫:\n–ë–∞–Ω–∫.—Å—á–µ—Ç:\n–î–æ–∫-–≤–∞:\n\n–Ø –∑–∞–º–µ—Ç–∏–ª –±–∞–≥, —á—Ç–æ –¥–µ–ª–∞—Ç—å? –ü–∏—à–∏—à—å —Ç–∞–∫–∂–µ –≤ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—É—é –≥—Ä—É–ø–ø—É —Å –ø–æ–ª–Ω—ã–º –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ–º –±–∞–≥–∞, –∫–∞–∫ —ç—Ç–æ –ø—Ä–æ–∏–∑–æ—à–ª–æ –∏ –±—ã–ª–∏ –ª–∏ —É—Ç–µ—Ä–∏, –¥–ª—è –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–∏.`
		)
	} else if (message.startsWith('/–æ—Ç–∫—Ä—ã—Ç—å –∫–µ–π—Å')) {
		await context.send(
			`${await getUserMention(
				userId
			)}, ‚úÇ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –∫–µ–π—Å–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É: –æ—Ç–∫—Ä—ã—Ç—å –∫–µ–π—Å [–Ω–∞–∑–≤–∞–Ω–∏–µ —Å –º–∞–ª–µ–Ω—å–∫–æ–π –±—É–∫–≤—ã]`
		)
	} else if (message.startsWith('/-v')) {
		await context.send(`1.0.3`)
	} else if (message.startsWith('/—Ä–µ—Ñ–µ—Ä–∞–ª–∫–∞')) {
		await context.send(
			`${await getUserMention(
				userId
			)}, –ó–æ–≤–∏—Ç–µ —Å–≤–æ–∏—Ö –¥—Ä—É–∑–µ–π –∏–≥—Ä–∞—Ç—å –≤ –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞, –æ—Ç–∫—Ä—ã–≤–∞—Ç—å –∫–µ–π—Å—ã, —Ä–∞–∑–≤–ª–µ–∫–∞—Ç—å—Å—è —Å –Ω–æ–≤—ã–º–∏ –¥—Ä—É–∑—å—è–º–∏ –∏ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å WCoin!\n\n–ó–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ, –º—ã –≤–∞–º –¥–∞–µ–º 400WCoin, –∞ –≤–∞—à–µ–º—É –¥—Ä—É–≥—É 200WCoin!\n\n–û—Ç–ø–∏—à–∏—Ç–µ –Ω–∞–º –≤ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—É—é –≥—Ä—É–ø–ø—É -- [https://vk.com/waynes_family|Waynes Family ONLINE RP] –∏ —Å–æ–æ–±—â–∏—Ç–µ, —á—Ç–æ –∏–º–µ–Ω–Ω–æ –≤—ã –µ–≥–æ –ø—Ä–∏–≥–ª–∞—Å–∏–ª–∏.`
		)
	} else if (message.startsWith('/–º–µ—Ä—á')) {
		await context.send(
			`${await getUserMention(
				userId
			)}, –£ –Ω–∞—Å –µ—Å—Ç—å —Å–≤–æ–π –º–µ—Ä—á! –ü–æ–∫—É–ø–∞–π —Ö—É–¥–∏ –ø–æ —Ü–µ–Ω–µ –Ω–∏–∂–µ —Ä—ã–Ω–∫–∞ –∏ –ø–æ–ª—É—á–∞–π —è—Ä–∫–∏–µ —ç–º–æ—Ü–∏–∏ –ø–æ —É–ª–∏—á–Ω–æ–π –ø—Ä–æ–≥—É–ª–∫–µ –∏–ª–∏ –ø–æ –¥–æ—Ä–æ–≥–µ –¥–æ–º–æ–π. –í—ã–¥–µ–ª—è–π—Å—è —Å —Ç–æ–ª–ø—ã –≤–º–µ—Å—Ç–µ —Å –Ω–∞–º–∏!\n\n–£ –≤–∞—Å –µ—Å—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∫—É–ø–∏—Ç—å –¥–∞–∂–µ –∑–∞ WCoin = 65.000, –∞ –µ—Å–ª–∏ –Ω–µ —Ö–æ—Ç–∏—Ç–µ –¥–æ–ª–≥–æ –∂–¥–∞—Ç—å = 2799—Ä!\n\n–ü–æ–¥—Ä–æ–±–Ω–µ–µ –≤ –Ω–∞—à–µ–π –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–π –≥—Ä—É–ø–ø–µ.`
		)
	}
})



async function updateUserRating(vk_id, ratingIncrement) {
	return new Promise((resolve, reject) => {
		db.run(
			'UPDATE users SET rating = rating + ? WHERE vk_id = ?',
			[ratingIncrement, vk_id],
			function (err) {
				if (err) {
					reject(err)
				} else {
					console.log(`–û–±–Ω–æ–≤–ª–µ–Ω —Ä–µ–π—Ç–∏–Ω–≥ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${vk_id}`)
					resolve()
				}
			}
		)
	})
}

async function getTopUsersByRating(limit) {
	return new Promise((resolve, reject) => {
		db.all(
			'SELECT * FROM users ORDER BY rating DESC LIMIT ?',
			[limit],
			(err, rows) => {
				if (err) {
					reject(err)
				} else {
					resolve(rows)
				}
			}
		)
	})
}

vk.updates.start().catch(console.error)

setInterval(async () => {
	const users = await getAllUsers()
	const currentTimestamp = await getTimestampNow()

	for (const user of users) {
		if (currentTimestamp >= user.last_bonus_timestamp + oneHour) {
			// –ï—Å–ª–∏ –ø—Ä–æ—à–µ–ª —á–∞—Å —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –±–æ–Ω—É—Å–∞, –æ–±–Ω—É–ª—è–µ–º last_bonus_timestamp
			await updateLastBonusTimestamp(user.vk_id, 0)
		}
	}
}, 60000) // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
